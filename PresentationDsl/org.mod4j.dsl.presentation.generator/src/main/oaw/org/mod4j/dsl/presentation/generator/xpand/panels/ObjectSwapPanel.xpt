«REM»
 Copyright (c) 2010 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION  org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION  org::mod4j::dsl::presentation::generator::xtend::helpers»

«DEFINE GenerateObjectSwapPanel FOR ContentForm -»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ObjectSwapPanel.xpt") FOR this»
«LET this.name.toFirstUpper() + "SwapEditPanel" AS className»
«LET this.processes.referredProcess.selectFirst(e|e.type==ProcessType::SAVE) AS saveProcess»
«LET this.processes.referredProcess.selectFirst(e|e.type==ProcessType::DELETE) AS deleteProcess»
package «getPresentationRootPackage()».panels;

import java.util.ArrayList;
import java.util.List;

import org.apache.wicket.Page;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.CompoundPropertyModel;

«FOREACH this.processes.referredProcess.select(e|e.type == ProcessType::CUSTOM) AS p»
import «getPresentationRootPackage()».processes.«p.javaClass()»;
«ENDFOREACH»
«IF saveProcess != null»
import «getPresentationRootPackage()».processes.«saveProcess.javaClass()»;
«ENDIF»
«IF deleteProcess != null»
import «getPresentationRootPackage()».processes.«deleteProcess.javaClass()»;
«ENDIF»

import «javaDtoClassPath(this.contextRef.name)»;

public class «className» extends Panel 
{

    protected «this.name.toFirstUpper()»Panel  «this.name.toFirstLower()»Panel = null;
    protected «this.name.toFirstUpper()»EditPanel  «this.name.toFirstLower()»EditPanel = null;

    protected boolean editOn = true;
    
    public void setEditOn(boolean on){
        if( editOn != on) {
            swapPanels();
        }
    }
    
    protected IModel<«this.contextRef.name»> model = null;
    
    /**
     * create a new breakfastspage
     */
    public «className»(String id, final IModel<«this.contextRef.name»> inputModel)
    {
        super(id);
        model = new CompoundPropertyModel<«this.contextRef.name»>(inputModel);
        
		«this.name.toFirstLower()»Panel = new «this.name.toFirstUpper()»Panel("«this.name»SwapPanel",model);
		«this.name.toFirstLower()»EditPanel = new «this.name.toFirstUpper()»EditPanel("«this.name»SwapPanel",model);
		
		«this.name.toFirstLower()»EditPanel.setOutputMarkupPlaceholderTag(true);
		«this.name.toFirstLower()»Panel.setOutputMarkupPlaceholderTag(true);

		add(«this.name.toFirstLower()»EditPanel);
		
		if(  (inputModel == null)  || (inputModel.getObject() == null) ) {
		    setEditOn(false);
		}
    }

	/**
	 * 
	 */
	private void swapPanels() {
		if( editOn ){
			«this.name.toFirstLower()»EditPanel.replaceWith(«this.name.toFirstLower()»Panel);
		} else {
			«this.name.toFirstLower()»Panel.replaceWith(«this.name.toFirstLower()»EditPanel);
		}
		editOn = ! editOn;
	}
}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»