«REM»
    Copyright (c) 2010 Ordina and committers to Mod4j
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
     
    Contributors:
        Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

«DEFINE ReferenceDataProvider FOR DialogueCall»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ReferenceDataProvider.xpt") FOR this»
«LET this.referredContentForm() AS form»
«LET form.contextRef.name AS context»
«LET this.process.contextRef.name AS ownerContext»
«LET getWicketReferenceDataProviderClass(this.process.contextRef.name,form.contextRef.name) AS className»
«LET findServiceWithMethod(ownerContext, "UPDATE") AS service»
«LET findSpecialMethodInService(ownerContext, "UPDATE", service) AS updateService»
«LET (NavigationExpression)contextExp AS navigationExpression»
«LET navigationExpression.references.first().name.toFirstUpper() AS navigationName»
«LET javaLocalServiceInterface(service) AS serviceType»
«LET findSpecialMethodInService(context, "LISTALL", service) AS listallService»

package «getPresentationRootPackage()».dataproviders;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Collection;
import java.util.Arrays;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;

import «getPresentationCommonPackage()».processes.ProcessType;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaLocalServiceInterfacePath(service)»;
import «javaDtoClassPath(context)»;
import «javaDtoClassPath(ownerContext)»;

/**
 * Dataprovider for a list which is part of another object
 * 
 */
@SuppressWarnings("serial")
public class «className»
		extends ModelDataProvider<«context»>
		implements Mod4jDataProvider<«context»>
{
	private static final Log log = LogFactory.getLog(«className».class);

	private «serviceType» service;
	private «ownerContext» owner = null;

    static protected Collection<ProcessType> processTypes = Arrays.asList(
        ProcessType.CUSTOM, ProcessType.ADDTO, ProcessType.EDIT, ProcessType.REMOVEFROM, ProcessType.SAVE, ProcessType.CANCEL);

    public Collection<ProcessType> supportedProcesses() {
        return processTypes;
    }

    public «ownerContext»  getOwner() { return owner; }
	/**
	 * Create a new ServiceDataProvider 
	 * @param service The service from which the list and count is retrieved.
	 */
	public «className»(«ownerContext» owner) {
		super( new PropertyModel(new Model(owner), "«navigationName»")  );
		this.service = «getWicketHomePageClass()».get«serviceType»();
		this.owner = owner;
	}

	public «context» newDto(){
        throw new RuntimeException("«className»: No New allowed");
	}
	
	public void deleteDto(«context» toBeRemoved){
        throw new RuntimeException("«className»: No Delete allowed");
	}
	
	public void saveDto(«context» tobesaved){
		owner.addTo«navigationName»(tobesaved);
		owner = service.«updateService»(owner);
		this.setList( new PropertyModel(new Model(owner), "«navigationName»") );
	}
    
    public void addToDtoList(List<«context»> tobeadded) {
        for («context» dto : tobeadded) {
            owner.addTo«navigationName»(dto);
        }
        owner = service.«updateService»(owner);
        this.setList( new PropertyModel(new Model(owner), "«navigationName»") );
    }
    
    public void removeFromDtoList(List<«context»> toberemoved) {
        for («context» dto : toberemoved) {
            owner.removeFrom«navigationName»(dto);
        }
        owner = service.«updateService»(owner);
        this.setList( new PropertyModel(new Model(owner), "«navigationName»") );
    }    

    synchronized public Iterator iterator(int first, int count) {
        if( all ){
            return service.«listallService»(first, count).iterator();
        } else {
            return super.iterator(first, count);
        }
    }

    synchronized public int size() {
        if( all ){
        Long result = service.count«businessClassName(form)»s();
        return result.intValue();
        } else {
            return super.size();
        }
    }

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»