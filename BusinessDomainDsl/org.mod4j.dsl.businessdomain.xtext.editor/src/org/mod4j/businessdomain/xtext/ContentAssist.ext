/*******************************************************************************
 * Copyright (c) 2009 Ordina and committers to Mod4j
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Ordina - initial implementation
 *******************************************************************************/
import BusinessDomainDsl;
import codeassist;

extension org::mod4j::businessdomain::xtext::Extensions;
extension org::mod4j::businessdomain::xtext::GenContentAssist reexport;
extension org::mod4j::businessdomain::xtext::EditorExtensions;
// extension BusinessClass;

/*
 * There are two types of extensions one can define
 *
 * completeMetaType_feature(ModelElement ele, String prefix)
 * This one is called for assignments only. It gets the underlying Modelelement and the current prefix passed in.
 *
 * Note that only propals with 'Proposal.toInsert.toLowerCase().startsWith(prefix.toLowerCase())' will be proposed in the editor
 * 
 * you can sort and/or filter the proposals by overwriting 'List[Proposal] sortProposals(List[Proposal] proposalsToSort)'
 */
 
/* proposals for UniqueRule::properties */
List[Proposal] completeUniqueRule_properties(emf::EObject ctx, String prefix) :
	if ctx.metaType == UniqueRule then (
	    let uniqueRule = (UniqueRule ) ctx :
	    uniqueRule.businessClass.allProperties().name.
	    reject(name | uniqueRule.properties.name.contains(name) ).
        collect(name | newProposal(name) )
	) else ( 
	    { newProposal("???") }
	)
	;

// helper
List[Property] allProperties(BusinessClass cls) :
	let result = cls.properties :
	if cls.superclass == null then (
	    result
	) else (
	    result.addAll(cls.superclass.allProperties())
	)
    ;

/** Filter out all proiposals that end with Description. 
 *  This eliminates the descritions from all proposals.
 *  Also put a space at the end of all proposals
 */
List[Proposal] sortProposals(List[Proposal] proposalsToSort):
    proposalsToSort.reject(p | p.label.endsWith("Description"))
    .select(p | (! p.toInsert.endsWith(" ") ? p.setToInsert(p.toInsert + " ") : null)->true)
	;

