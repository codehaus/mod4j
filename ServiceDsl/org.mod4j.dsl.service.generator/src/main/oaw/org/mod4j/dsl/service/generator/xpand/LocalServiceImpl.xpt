«IMPORT ServiceDsl»
«IMPORT crossx»

«EXTENSION org::mod4j::dsl::service::mm::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 

«DEFINE LocalServiceImpl FOR ServiceModel»
«IF fileExist(fullExtendPath(getServiceModuleName(), javaPathFileName(javaLocalServiceClassPath(name))))»
    «extend(getServiceModuleName(), javaPathFileName(javaLocalServiceClassPath(name)) )»
«ELSE»
   
	«FILE extend(getServiceModuleName(), javaPathFileName(javaLocalServiceClassPath(name)))» 
    /**
     * Initially generated by Mod4j Service DSL: LocalServiceImpl::LocalServiceImpl at: «timestamp()»
     * from model «this.name»
     * Extension point: intended to be changed by hand.
     */
	package «getServiceRootPackage()»;

	import java.util.List;
            
	import «javaDomainServiceInterfacePath(name)»;
	import «javaLocalServiceBaseClassPath(name)»;
	«FOREACH this.dtoReferences.select(e|e.dtoType() != "ListDto") AS dto -»
	import «getDtoPackage()».«javaClassName(dto.name)»;
	«ENDFOREACH»
	«FOREACH this.dtoReferences.select(e|e.dtoType() == "ListDto") AS dto -»
	«LET lookupSymbol(dto.modelname, dto.name, "Dto").getPropertyValue("baseDto") AS baseDtoName»
	import «getServiceRootPackage()».dto.«baseDtoName»;
	«ENDLET»
	«ENDFOREACH»

	«FOREACH this.dtoReferences.select(dto|dto.businessClass() != "void") AS dto -»
	import «javaTranslatorClassPath(dto.name)»;
	import «javaDomainClassPath(dto.businessClass())»;
	«ENDFOREACH»
	
	/**
	 * @author Initially generated by Mod4j
	 */
	public class «javaLocalServiceClass(name)» extends  «javaLocalServiceBaseClass(name)» {

	«FOREACH this.methods.typeSelect(CustomMethod) AS method»
		/** «this.description»
	     * @params «method.inParameters.name»
	     * @return «method.output.name»
	     */
	    public «JavaType(method.output)» «method.name»(«EXPAND Parameter FOREACH method.inParameters SEPARATOR  ", "») {
	        «IF method.output == null »
	        // TODO Mod4j: implement this service method manually
	        «ENDIF»
	        «IF method.output != null »
	        // TODO Mod4j: implement this service method manually
	        return null;
	        «ENDIF»
	    }
	«ENDFOREACH»	
    }
    «ENDFILE»
«ENDIF»

«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«JavaType(type)»  «this.name»
«ENDDEFINE»