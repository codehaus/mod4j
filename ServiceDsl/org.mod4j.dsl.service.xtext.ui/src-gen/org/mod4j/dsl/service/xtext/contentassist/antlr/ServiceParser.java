/*
* generated by Xtext
*/
package org.mod4j.dsl.service.xtext.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.mod4j.dsl.service.xtext.services.ServiceGrammarAccess;

public class ServiceParser extends AbstractContentAssistParser {
	
	@Inject
	private ServiceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.mod4j.dsl.service.xtext.contentassist.antlr.internal.InternalServiceLexer createLexer(CharStream stream) {
		return new org.mod4j.dsl.service.xtext.contentassist.antlr.internal.InternalServiceLexer(stream);
	}
	
	@Override
	protected org.mod4j.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser createParser() {
		org.mod4j.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser result = new org.mod4j.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getServiceModelAccess().getAlternatives_5(), "rule__ServiceModel__Alternatives_5");
					put(grammarAccess.getServiceMethodAccess().getAlternatives(), "rule__ServiceMethod__Alternatives");
					put(grammarAccess.getSpecialMethodTypeAccess().getAlternatives(), "rule__SpecialMethodType__Alternatives");
					put(grammarAccess.getAssociationMethodTypeAccess().getAlternatives(), "rule__AssociationMethodType__Alternatives");
					put(grammarAccess.getServiceModelAccess().getGroup(), "rule__ServiceModel__Group");
					put(grammarAccess.getAssociationMethodAccess().getGroup(), "rule__AssociationMethod__Group");
					put(grammarAccess.getDtoReferenceAccess().getGroup(), "rule__DtoReference__Group");
					put(grammarAccess.getCustomMethodAccess().getGroup(), "rule__CustomMethod__Group");
					put(grammarAccess.getCustomMethodAccess().getGroup_3(), "rule__CustomMethod__Group_3");
					put(grammarAccess.getCustomMethodAccess().getGroup_3_2(), "rule__CustomMethod__Group_3_2");
					put(grammarAccess.getCustomMethodAccess().getGroup_4(), "rule__CustomMethod__Group_4");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group");
					put(grammarAccess.getSpecialMethodAccess().getGroup(), "rule__SpecialMethod__Group");
					put(grammarAccess.getCrudServiceAccess().getGroup(), "rule__CrudService__Group");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.mod4j.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser typedParser = (org.mod4j.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser) parser;
			typedParser.entryRuleServiceModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ServiceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ServiceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
