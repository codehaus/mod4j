«IMPORT BusinessDomainDsl»

«EXTENSION util»

«DEFINE BeanClassImplBase (String rootPackage) FOR AbstractType»
	«FILE rootPackage.replaceAll("\\.", "/") + "/" + name + ".java"»
		package «rootPackage»;
		
        «REM»Add import statements for Attributes. If a dataType occurs more then once, the import statement will be added just once.«ENDREM»
        «FOREACH properties.dataType.toSet() AS dataType»
            «EXPAND Imports::addImports FOR properties.selectFirst(e|e.dataType == dataType)»
        «ENDFOREACH»
		/**
		* «description»
		*
		* Generated at: «timestamp()»
		*/
        public class «name» {
        
        	«EXPAND Attributes::addAttribute FOREACH properties»
 			«EXPAND Attributes::addGetter FOREACH properties»
 			«EXPAND Attributes::addSetter FOREACH properties» 		
        }
	«ENDFILE»
«ENDDEFINE»

«DEFINE BeanClassImplBase (String rootPackage) FOR BusinessClass»
	«FILE rootPackage.replaceAll("\\.", "/") + "/" + name + "ImplBase" +  ".java"»
		package «rootPackage»;
		
		«EXPAND Imports::addImports»
		«REM»Add import statements for Attributes. If a dataType occurs more then once, the import statement will be added just once.«ENDREM»
        «FOREACH properties.dataType.toSet() AS dataType»
            «EXPAND Imports::addImports FOR properties.selectFirst(e|e.dataType == dataType)»
        «ENDFOREACH»
		
		/**
		* «description»
		*
		* Generated at: «timestamp()»
		*/
        public abstract class «name»ImplBase «IF superclass != null -»extends «superclass.name» «ENDIF»implements java.io.Serializable {
            	
 			«EXPAND Attributes::addAttribute FOREACH properties»
 			«EXPAND Associations::addToReferenceVariable FOREACH associationsTo.select(e|e.targetNavigability)»
 			«EXPAND Associations::addFromReferenceVariable FOREACH associationsFrom.select(e|e.sourceNavigability)»
 			«EXPAND Constructors::addMinimalConstructor ("ImplBase") FOR this»
 			«EXPAND Attributes::addGetter FOREACH properties»
 			«EXPAND Attributes::addSetter FOREACH properties»
        }
	«ENDFILE»
	
	«REM»Generation of Businessrules classes for this BusinessClass«ENDREM»
	«FOREACH businessRules AS br»
		«EXPAND BusinessRules (rootPackage + ".businessrules") FOR br»
	«ENDFOREACH»
	

«ENDDEFINE»

«DEFINE BeanClassExtensionPoint (String srcPath, String package) FOR AbstractType»
	«REM»No generation of AbstracTypes other then BusinessClasses«ENDREM»
«ENDDEFINE»

«DEFINE BeanClassExtensionPoint (String srcPath, String package) FOR BusinessClass»
    «IF !fileExist(srcPath + "/" + package.replaceAll("\\.", "/") + "/" + name +  ".java")»
		«FILE package.replaceAll("\\.", "/") + "/" + name +  ".java"»
			package «package»;
			
			«REM»Add import statements for Attributes. If a dataType occurs more then once, the import statement will be added just once.«ENDREM»
			«FOREACH properties.dataType.toSet() AS dataType»
			     «EXPAND Imports::addImports FOR properties.selectFirst(e|e.dataType == dataType)»
			«ENDFOREACH»
			/**
			* Extension point initially generated at: «timestamp()»
			*/
        	public class «name» extends «name»ImplBase {
            	
        	«EXPAND Constructors::addCallToSuperOnlyMinimalConstructor ("") FOR this»
 			}	
		«ENDFILE»
    «ENDIF»
«ENDDEFINE»

«DEFINE BusinessRules (String package) FOR BusinessRule»
	«FILE (package).replaceAll("\\.", "/") + "/" + name + "ImplBase" +  ".java"»
		package «package»;
		
		«EXPAND Imports::addImports»
		
		/**
		* «description»
		*
		* Generated at: «timestamp()»
		*/
        public abstract class «name»ImplBase implements Validator {
            	
 			
        }
	«ENDFILE»
«ENDDEFINE»