/**
 * Generated by Mod4j Service DSL: BusinessServiceImpl::BusinessServiceImpl at: Wed Apr 01 21:03:33 CEST 2009
 * from model breakfast
 */
package com.rosa.breakfast.business;

import org.mod4j.runtime.exception.BusinessRuleException;
import org.springframework.validation.BindException;

import com.rosa.breakfast.domain.Comestible;
import com.rosa.breakfast.domain.Part;
import com.rosa.breakfast.domain.StandardBreakfast;

/**
 * @author Generated by Mod4j, use as extension point to implement custom business services
 */
public class BreakfastDomainServiceImpl extends BreakfastDomainServiceImplBase implements BreakfastDomainService {

    public boolean isComestibleUsed(Long comestibleId) {
        if (comestibleId != null) {
            return comestibleDao.isComestibleUsed(comestibleId);
        }
        return false;
    }

    @Override
    public void deleteComestible(Comestible comestible) throws BusinessRuleException {
        if (isComestibleUsed(comestible.getId())) {
            BindException errors = new BindException(comestible, "com.rosa.breakfast.domain.comestible");
            errors.rejectValue("", "comestible.br.cannotdelete", new Object[] { comestible.getName() },
                    "The comestible is linked to a standard breakfast, so it can not be deleted.");
            throw new BusinessRuleException(errors);
        }
        super.deleteComestible(comestible);
    }
    
    
    /* (non-Javadoc)
     * @see com.rosa.breakfast.business.BreakfastDomainServiceImplBase#deleteStandardBreakfast(com.rosa.breakfast.domain.StandardBreakfast)
     * Workaround: Mod4j does not handle cascading delete of parts of a composite association yet.
     */
    @Override
    public void deleteStandardBreakfast(StandardBreakfast object) {
    	
        for (Part part: object.getParts()){
	        partDao.delete(part);
	    }    	
    	super.deleteStandardBreakfast(object);
    }

}
