
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN 
 *
 * Generated by Mod4j DataContract DSL, BusinessClassDto in dtoBean.xpt at: Fri Apr 03 14:19:48 CEST 2009
 */
package com.rosa.breakfast.web.dto;

import java.io.Serializable;

import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;


/**
 * 
 *
 * @author generated by Mod4j
 */
@SuppressWarnings("serial")
public class StandardBreakfastDto implements Serializable {

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	/**
	 *  name: 
	 */
	private String name = "Ei";

	/**
	 *  price: 
	 */
	private Float price = 3.0f;

	/**
	 *  style: 
	 */
	private ServingStyleDto style;

	/**
	 *  PartListDto: 
	 */

	private Set<PartDto> parts = new HashSet<PartDto>();

	/**
	 * Default no-argument constructor for StandardBreakfastDto 
	 */
	public StandardBreakfastDto() {
		super();
	}

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}
	/**
	 *
	 * @param id (Long) The identifier of this object.
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 *
	 * @return name (String) 
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * @param name (String) 
	 */
	public void setName(final String name) {
		this.name = name;
	}

	/**
	 *
	 * @return price (Float) 
	 */
	public Float getPrice() {
		return this.price;
	}

	/**
	 * @param price (Float) 
	 */
	public void setPrice(final Float price) {
		this.price = price;
	}

	/**
	 *
	 * @return style (ServingStyleDto) 
	 */
	public ServingStyleDto getStyle() {
		return this.style;
	}

	/**
	 * @param style (ServingStyleDto) 
	 */
	public void setStyle(final ServingStyleDto style) {
		this.style = style;
	}

	/**
	 * @return parts (Set<PartDto>) 
	 */
	public Set<PartDto> getParts() {
		return Collections.unmodifiableSet(this.parts);
	}

	/**
	 * Adds a single element to the parts collection
	 *
	 * @param element The element to add.
	 */
	public void addToParts(PartDto element) {

		if (element == null || this.parts.contains(element)) {
			return;
		}
		this.parts.add(element);
	}

	/**
	 * Removes a single element from the parts collection.
	 * 
	 * @param element The element to be removed.
	 */
	public void removeFromParts(PartDto element) {

		if (element == null) {
			return;
		}
		this.parts.remove(element);
	}

}
