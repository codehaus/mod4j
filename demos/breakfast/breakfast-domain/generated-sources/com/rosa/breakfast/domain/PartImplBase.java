
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN 
 *
 * Generated by Mod4j BusinessDomain DSL by BeanClassImplBase in NewJavaBean.xpt at: Thu Apr 02 14:32:55 CEST 2009
 */
package com.rosa.breakfast.domain;

import org.mod4j.runtime.validation.BusinessRuleValidationSupport;

import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import org.mod4j.runtime.validation.MinValueValidator;
import org.mod4j.runtime.validation.MaxValueValidator;
import org.mod4j.runtime.validation.MinLengthValidator;
import org.mod4j.runtime.validation.MaxLengthValidator;
import org.mod4j.runtime.validation.NotNullValidator;
import org.mod4j.runtime.validation.RegExpValidator;

/**
 * 
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */

@SuppressWarnings("serial")
public abstract class PartImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	@SuppressWarnings("unused")
	private int version = -1;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * equals method for PartImplBase 
	 */
	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}
		if (!(object instanceof PartImplBase)) {
			return false;
		}
		return getId() == null ? false : getId().equals(
				((PartImplBase) object).getId());
	}

	/**
	 * hashCode method for PartImplBase 
	 */
	@Override
	public int hashCode() {
		return getId() == null ? super.hashCode() : getId().hashCode();
	}

	/**
	 * toString method for PartImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("com.rosa.breakfast.domain.Part[");
		result.append("id=");
		result.append(getId());

		result.append(",");
		result.append("quantity=");
		result.append(quantity);

		result.append("]");
		return result.toString();
	}

	/**
	 *  quantity: 
	 */
	protected Integer quantity;

	/**
	 *  comestible: 
	 */
	private Comestible comestible;

	/**
	 * @return comestible (<Comestible>) 
	 */
	public Comestible getComestible() {
		return this.comestible;
	}

	/**
	 * Implements adding single element to a collection
	 */
	public void setComestible(Comestible element) {
		if (this.comestible != element) {

			this.comestible = element;

		}
	}

	/**
	 * This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalSetComestible(Comestible element) {
		this.comestible = element;
	}

	/**
	 * This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveComestible(Comestible element) {
		this.comestible = null;
	}

	/**
	 * Default no-argument constructor for PartImplBase 
	 */
	protected PartImplBase() {

	}

	/**
	 * Minimal constructor for PartImplBase
	 *
	 * @param quantity (int) 
	 */
	public PartImplBase(int quantity) {

		this.quantity = quantity;

		validation.addValidator(new NotNullValidator(Part.class, "quantity"));

		validation.validate();
	}

	/**
	 * @return quantity (int) 
	 */
	public int getQuantity() {
		return this.quantity;
	}

	/**
	 * @param quantity (int) 
	 */
	public void setQuantity(final int quantity) {
		this.quantity = quantity;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
