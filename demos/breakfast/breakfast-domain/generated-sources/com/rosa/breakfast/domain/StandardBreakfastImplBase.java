
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN 
 *
 * Generated by Mod4j BusinessDomain DSL by BeanClassImplBase in NewJavaBean.xpt at: Thu Apr 02 14:32:54 CEST 2009
 */
package com.rosa.breakfast.domain;

import org.mod4j.runtime.validation.BusinessRuleValidationSupport;

import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import org.mod4j.runtime.validation.MinValueValidator;
import org.mod4j.runtime.validation.MaxValueValidator;
import org.mod4j.runtime.validation.MinLengthValidator;
import org.mod4j.runtime.validation.MaxLengthValidator;
import org.mod4j.runtime.validation.NotNullValidator;
import org.mod4j.runtime.validation.RegExpValidator;

/**
 * 
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */

@SuppressWarnings("serial")
public abstract class StandardBreakfastImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	@SuppressWarnings("unused")
	private int version = -1;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * equals method for StandardBreakfastImplBase 
	 */
	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}
		if (!(object instanceof StandardBreakfastImplBase)) {
			return false;
		}
		return getId() == null ? false : getId().equals(
				((StandardBreakfastImplBase) object).getId());
	}

	/**
	 * hashCode method for StandardBreakfastImplBase 
	 */
	@Override
	public int hashCode() {
		return getId() == null ? super.hashCode() : getId().hashCode();
	}

	/**
	 * toString method for StandardBreakfastImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("com.rosa.breakfast.domain.StandardBreakfast[");
		result.append("id=");
		result.append(getId());

		result.append(",");
		result.append("name=");
		result.append(name);

		result.append(",");
		result.append("price=");
		result.append(price);

		result.append(",");
		result.append("style=");
		result.append(style);

		result.append("]");
		return result.toString();
	}

	/**
	 *  name: 
	 */
	protected String name;

	/**
	 *  price: 
	 */
	protected Float price;

	/**
	 *  style: 
	 */
	protected ServingStyle style;

	/**
	 *  parts: 
	 */
	private Set<Part> parts = new HashSet<Part>();

	/**
	 * @return parts (List<Part>) 
	 */
	public Set<Part> getParts() {
		return Collections.unmodifiableSet(this.parts);
	}

	/**
	 * Implements adding single element to a collection
	 */
	public boolean addToParts(Part element) {
		if (element == null) {
			return false;
		}
		if (this.parts.contains(element)) {
			return false;
		}
		this.parts.add(element);

		return true;
	}

	/**
	 * Implements removal of a single element from feature 
	 * 
	 * @param element 
	 */
	public boolean removeFromParts(Part element) {
		if (element == null) {
			return false;
		}
		if (this.parts.remove(element)) {

			validation.validate();
			return true;
		}
		return false;
	}

	/**
	 * This operation should NOT be used by clients.  It implements the correct
	 * addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToparts(Part element) {
		this.parts.add(element);
	}

	/**
	 * This operation should NOT be used by clients. It implements the correct
	 * removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromparts(Part element) {
		this.parts.remove(element);
	}

	/**
	 * Default no-argument constructor for StandardBreakfastImplBase 
	 */
	protected StandardBreakfastImplBase() {

	}

	/**
	 * Minimal constructor for StandardBreakfastImplBase
	 *
	 * @param name (String) 
	 * @param price (float) 
	 * @param style (ServingStyle) 
	 */
	public StandardBreakfastImplBase(String name, float price,
			ServingStyle style) {

		this.name = name;
		this.price = price;
		this.style = style;

		validation.addValidator(new NotNullValidator(StandardBreakfast.class,
				"name"));

		validation.addValidator(new NotNullValidator(StandardBreakfast.class,
				"price"));

		validation.addValidator(new NotNullValidator(StandardBreakfast.class,
				"style"));

		validation.validate();
	}

	/**
	 * @return name (String) 
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * @return price (float) 
	 */
	public float getPrice() {
		return this.price;
	}

	/**
	 * @return style (ServingStyle) 
	 */
	public ServingStyle getStyle() {
		return this.style;
	}

	/**
	 * @param name (String) 
	 */
	public void setName(final String name) {
		this.name = name;
		validation.validate();
	}

	/**
	 * @param price (float) 
	 */
	public void setPrice(final float price) {
		this.price = price;
		validation.validate();
	}

	/**
	 * @param style (ServingStyle) 
	 */
	public void setStyle(final ServingStyle style) {
		this.style = style;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
