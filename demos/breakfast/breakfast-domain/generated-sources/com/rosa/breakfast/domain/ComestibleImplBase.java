
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN 
 *
 * Generated by Mod4j BusinessDomain DSL by BeanClassImplBase in NewJavaBean.xpt at: Thu Apr 02 14:32:55 CEST 2009
 */
package com.rosa.breakfast.domain;

import org.mod4j.runtime.validation.BusinessRuleValidationSupport;

import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import org.mod4j.runtime.validation.MinValueValidator;
import org.mod4j.runtime.validation.MaxValueValidator;
import org.mod4j.runtime.validation.MinLengthValidator;
import org.mod4j.runtime.validation.MaxLengthValidator;
import org.mod4j.runtime.validation.NotNullValidator;
import org.mod4j.runtime.validation.RegExpValidator;

/**
 * 
 *
 * @author Generated by Mod4j BusinessDomain DSL
 */

@SuppressWarnings("serial")
public abstract class ComestibleImplBase implements java.io.Serializable {

	/**
	 * validation : Responsible for validating attribute constraints and businessrules for this business class.
	 * 
	 */
	protected BusinessRuleValidationSupport validation = new BusinessRuleValidationSupport(
			this);

	/**
	 *  id: The identifier of this object.
	 */
	private Long id;

	@SuppressWarnings("unused")
	private int version = -1;

	/**
	 *
	 * @return id (Long) The identifier of this object.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * equals method for ComestibleImplBase 
	 */
	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}
		if (!(object instanceof ComestibleImplBase)) {
			return false;
		}
		return getId() == null ? false : getId().equals(
				((ComestibleImplBase) object).getId());
	}

	/**
	 * hashCode method for ComestibleImplBase 
	 */
	@Override
	public int hashCode() {
		return getId() == null ? super.hashCode() : getId().hashCode();
	}

	/**
	 * toString method for ComestibleImplBase
	 */
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("com.rosa.breakfast.domain.Comestible[");
		result.append("id=");
		result.append(getId());

		result.append(",");
		result.append("name=");
		result.append(name);

		result.append(",");
		result.append("minimalQuantity=");
		result.append(minimalQuantity);

		result.append(",");
		result.append("price=");
		result.append(price);

		result.append(",");
		result.append("transportForm=");
		result.append(transportForm);

		result.append("]");
		return result.toString();
	}

	/**
	 *  name: 
	 */
	protected String name;

	/**
	 *  minimalQuantity: 
	 */
	protected Integer minimalQuantity;

	/**
	 *  price: 
	 */
	protected Float price;

	/**
	 *  transportForm: 
	 */
	protected String transportForm;

	/**
	 * Default no-argument constructor for ComestibleImplBase 
	 */
	protected ComestibleImplBase() {

	}

	/**
	 * Minimal constructor for ComestibleImplBase
	 *
	 * @param name (String) 
	 * @param minimalQuantity (int) 
	 * @param price (float) 
	 */
	public ComestibleImplBase(String name, int minimalQuantity, float price) {

		this.name = name;
		this.minimalQuantity = minimalQuantity;
		this.price = price;

		validation.addValidator(new NotNullValidator(Comestible.class, "name"));

		validation.addValidator(new NotNullValidator(Comestible.class,
				"minimalQuantity"));

		validation
				.addValidator(new NotNullValidator(Comestible.class, "price"));

		validation.validate();
	}

	/**
	 * @return name (String) 
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * @return minimalQuantity (int) 
	 */
	public int getMinimalQuantity() {
		return this.minimalQuantity;
	}

	/**
	 * @return price (float) 
	 */
	public float getPrice() {
		return this.price;
	}

	/**
	 * @return transportForm (String) 
	 */
	public String getTransportForm() {
		return this.transportForm;
	}

	/**
	 * @param name (String) 
	 */
	public void setName(final String name) {
		this.name = name;
		validation.validate();
	}

	/**
	 * @param minimalQuantity (int) 
	 */
	public void setMinimalQuantity(final int minimalQuantity) {
		this.minimalQuantity = minimalQuantity;
		validation.validate();
	}

	/**
	 * @param price (float) 
	 */
	public void setPrice(final float price) {
		this.price = price;
		validation.validate();
	}

	/**
	 * @param transportForm (String) 
	 */
	public void setTransportForm(final String transportForm) {
		this.transportForm = transportForm;
		validation.validate();
	}

	/**
	 * Activate/deactivate validation for this business class.
	 * When set to active the validation will immediately be executed.
	 * 
	 * @param value (boolean) 
	 */
	public void activateValidation(boolean value) {

		this.validation.setActive(value);
		if (value) {
			validation.validate();
		}
	}

}
