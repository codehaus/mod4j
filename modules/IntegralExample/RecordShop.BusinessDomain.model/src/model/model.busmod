"The RecordShop BusinessDomain model"
Model RecordShopDomainModel

/* 
 * remarks
 */
 
"A Person represents a legal person." 
Class Person [

    "First name of the person." 
    string firstName;
    "Last name of the person." 
    string lastName;
    "The age of this person in years"
    integer age nullable persistency NONE;
    "Number of ears (we allow Vulcans in this system)." 
    integer numberOfEars default 0 min 0 max 4;
    "Gender"    
    Sexe sexe nullable;   
]

"A Customer represents a Person who orders from the RecordShop."
Class Customer inherits Person [
    
    integer customerNr;
    string username minlength 3 maxlength 10 nullable ;
    boolean blackListed default false nullable;
    integer discountPercentage default 0 min 0 max 100 ;
    
    Rules [
        "If Customer has one ear, he/she get a discount of 50 percent."  
        OneEarDiscount;
        "Just another rule"
        AnotherRule;
    ]
]

"A Record is a representation of a physical medium containing one or more musical compositions."
Class Record [
    string asin;
    string title default "Title unknown";
    integer mediumCode default 111 ;
    decimal price ;
]

"An Order represents the agreement between a Customer and the RecordShop about one or more purchased Records."
Class Order [

	"An ordernumber should be unique"
    string orderNumber ;
    "The date on which the order has been placed"
    datetime day orderDate default "2009-01-01" nullable;
    datetime day deliveryDate nullable;
    integer discountPercentage min 01 max 100 nullable ;
    /*
    TODO: The following results in a compilation problem caused by float to Float conversion. 
    float totalAmount nullable;
    */
    
    Rules [
        "The deliveryDate may not precede orderDate"
        OrderDateBeforeDeliveryDate; 
    ]
]

Class OrderLine [
    integer lineNumber min 01 max 50 ;
    string description;
    decimal lineAmount;
]

Class Product [
	string productNumnber;
	integer price;
]

"Sexe enumeration."
Enumeration Sexe [
    female = 2;
    male = 3;
]
 
"One 2 Many Bidirectional: The customer has a number of orders" 
Association customer Customer [ 0..1 ] <-> [ 0..* ] orders Order;

"One 2 Many unidirectional: An order consists of orderlines"
Association composite order Order [ 0..1 ] -> [ 0..* ] orderLines OrderLine;

"One 2 One bidirectional: An ordelrine contains a record"
Association composite orderLine OrderLine [ 0..1 ] <-> [ 1 ] record Record;

"Many to One bidirectional: "
Association composite record Record [ 0..* ] <-> [ 0..1 ] product Product ;
