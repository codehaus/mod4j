/*******************************************************************************
 * Copyright (c) 2008 Ordina and committers to Mod4j
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Ordina - initial implementation
 *******************************************************************************/
import PresentationDsl;
import crossx;

extension org::mod4j::crossx::broker::xtend::Crossx;
extension org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers;
extension org::mod4j::dslcommon::xtend::generatorutil;
extension org::mod4j::dsl::presentation::validation::ValidationUtils;

/*
context ProcessReference ERROR "There is no model " + this.modelName  + " that contains process " + this.name :
       lookupSymbol(this.modelName, this.name, "Process") != null;

context DialogueReference ERROR "There is no model " + this.modelName  + " that contains form " + this.name :
       lookupSymbol(this.modelName, this.name, "Form") != null;
*/
context Action if this.type == ProcessType::NEW
	ERROR "A new action cannot be done for DTO [" + this.contextRef.name + "] which is not creatable" :
    let dtoSymbol = lookupSymbol(this.contextRef.modelName, this.contextRef.name, "Dto" ) :
    (dtoSymbol != null) implies getPropertyValue(dtoSymbol, "Creatable") == "true";
	
context ServiceReference ERROR "There is no model " + this.modelName  + " that contains service " + this.name :
       let service = lookupSymbol(this.modelName, this.modelName, "Service") :
       lookupSubSymbol(service, this.name, "ServiceMethod") != null;

context DtoReference ERROR "There is no model " + this.modelName  + " that contains dto  " + this.name :
       lookupSymbol(this.modelName, this.name, "Dto") != null;

// TODO Add xcheck for element properties
context FormElement if (this.form.contextRef.name != null) && (this.references.subname == null)
    ERROR "02 Property [" + this.references.name + "] not defined in " + this.form.contextRef.name :
	let dtoSymbol = lookupSymbol(this.form.contextRef.modelName, this.form.contextRef.name, "Dto") :
    (dtoSymbol != null) && (getSubSymbol(dtoSymbol, this.references.name) != null ) && 
                           (getSubSymbol(dtoSymbol, this.references.name).type == "DataProperty") 
	;

context FormElement if (this.form.contextRef.name != null) && (this.references.subname != null)
    ERROR "02 Reference [" + this.references.name + "." + this.references.subname + "] not defined in " + this.form.contextRef.name :
    let dtoSymbol= lookupSymbol(this.form.contextRef.modelName, this.form.contextRef.name, "Dto") :
    let navDtoSymbol = dtoSymbol .subSymbols.select(s|s.type.matches("AssociationRoleReference")).select(sym | sym.name.equalsIgnoreCase(this.references.name)).first() :
    let referredDtoSymbol = lookupSymbol(navDtoSymbol.getReferenceProperty("ReferencedDto").modelname, 
                                    navDtoSymbol.getReferenceProperty("ReferencedDto").symbolname , "Dto" ) :
    let propSymbol = referredDtoSymbol .subSymbols.select(s|s.type.matches("DataProperty")).select(sym | sym.name.equalsIgnoreCase(this.references.subname)).first() :
    ( propSymbol != null )
    ;

context StandardExpression if this.contextRef != null
    ERROR "1 No service method found for [" + this.contextRef.name + "] of type 'listall', needed to support the use of 'all'" :
    let con = this.contextRef:
    (con != null) implies lookupServiceMethod(con.name, "LISTALL") != null; 

context StandardExpression if this.contextRef != null
    ERROR "1 No service method found for [" + this.contextRef.name + "] of type 'find', needed to support the use of 'all'" :
    let con = this.contextRef:
    (con != null) implies lookupServiceMethod(con.name, "FIND") != null; 
    