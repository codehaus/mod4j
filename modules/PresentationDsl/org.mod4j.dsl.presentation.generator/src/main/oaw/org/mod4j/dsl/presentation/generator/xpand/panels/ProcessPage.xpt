«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
 
«DEFINE GenerateContentFormPage(ContentForm form) FOR InteractiveProcess -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ProcessPage.xpt") FOR this»
package «getPresentationRootPackage()».pages;

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».panels.«this.processElements.first().name»SwapEditPanel;
import «javaDtoClassPath(this.contextRef.name)»;

import org.apache.wicket.model.IModel;

public class «form.name»Page extends «getWicketMasterPageClass()»
{

    protected «this.processElements.first().name»SwapEditPanel panel = null;
    
	public «form.name»Page (final IModel<«this.contextRef.name»> context)
	{
		super();
		panel = new «this.processElements.first().name»SwapEditPanel("panel", context);
		add(panel);
	}

    public void editOn(boolean on){
        panel.setEditOn(on);
    }
    
	@Override
	public String getPageTitle()
	{
	    return "«form.name»Page";
//		return getLocalizer().getString("lbl.breakfast",this);
	}

}
«ENDDEFINE»

«DEFINE GenerateCollectionDialoguePage(ContentForm form) FOR InteractiveProcess -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ProcessPage.xpt") FOR this-»
«REM»
«LET this.processElements.first().referredCollectionDialogue() AS collDialogue»
«LET collDialogue.dialogues.first().referredContentForm() AS cf»
«LET this.processElements.first().referredContentForm() AS cf»
«ENDREM»
«LET this.processElements.typeSelect(LinkedDialogueCall).link.typeSelect(LinkService).first() AS linkService»
«LET form AS cf» 
«LET this.processElements.referredContentForm().first().getProcessOfType(ProcessType::EDIT) AS editProcess»
«LET this.processElements.referredContentForm().first().getProcessOfType(ProcessType::NEW) AS newProcess»
package «getPresentationRootPackage()».pages;

«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::CUSTOM) AS p»
import «getPresentationRootPackage()».processes.«p.name»Process;
«ENDFOREACH»
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».panels.«cf.name»CollectionDataViewPanel;
import «getPresentationRootPackage()».panels.«this.contextRef.name»ListListener;
import «javaDtoClassPath(this.contextRef.name)»;
// import «getPresentationRootPackage()».panels.«this.contextRef.name»DataProvider;
import «getPresentationRootPackage()».processes.PmfProcess;

«IF editProcess != null»
import «getPresentationRootPackage()».processes.«editProcess.name»Process;
«ENDIF»
«IF newProcess != null»
import «getPresentationRootPackage()».processes.«newProcess.name»Process;
«ENDIF»


import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.spring.injection.annot.SpringBean;

public class «form.name»Page extends «getWicketMasterPageClass()» implements «this.contextRef.name»ListListener
{
// TODO: JOS: maxItemsPerPage bean shoudl be installed
//    @SpringBean(name="maxItemsPerPage")
    private Integer maxItemsPerPage = 5;

	public «form.name»Page (IDataProvider<«this.contextRef.name»> dataProvider)
	{
		super();
        «cf.name»CollectionDataViewPanel panel = new «cf.name»CollectionDataViewPanel("panel", dataProvider, maxItemsPerPage);
        panel.addListener(this);
        add( panel );
		
	}

	@Override
	public String getPageTitle()
	{
	    return "«form.name»Page";
//		return getLocalizer().getString("lbl.breakfast",this);
	}

	public void startProcess(String processName, «this.contextRef.name» context){
	«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::CUSTOM) AS p»
		if(processName.equals("«p.name»Process")){
			«p.name»Process process = new «p.name»Process();
			setResponsePage(process.nextPage(context));
		}
	«ENDFOREACH»
	}

	public void on«this.contextRef.name»Cancel(«this.contextRef.name» element) {
	}

	public void on«this.contextRef.name»Delete(«this.contextRef.name» element) {
	}

	public void on«this.contextRef.name»Edit(«this.contextRef.name» element) {
    «IF editProcess != null»
	    PmfProcess process = new «editProcess.name»Process();
	    setResponsePage( process.nextPage(element));
	«ENDIF»
	}

	public void on«this.contextRef.name»Save(«this.contextRef.name» element) {
	}

	public void on«this.contextRef.name»New(«this.contextRef.name» element) {
    «IF newProcess != null»
	    PmfProcess process = new «newProcess.name»Process();
	    setResponsePage( process.nextPage(element));
	«ENDIF»
	}

	public void on«this.contextRef.name»Selected(«this.contextRef.name» element) {
	}
}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

