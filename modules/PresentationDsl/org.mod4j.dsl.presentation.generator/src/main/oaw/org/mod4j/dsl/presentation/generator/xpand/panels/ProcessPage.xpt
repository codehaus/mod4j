«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
 
«DEFINE GenerateContentFormPage(ContentForm form) FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ProcessPage.xpt") FOR this»
package «getPresentationRootPackage()».pages;

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».panels.«this.processElements.first().name»SwapEditPanel;
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».panels.«this.contextRef.name»ListListener;
import «getPresentationRootPackage()».panels.Mod4jDataProvider;
import «getPresentationRootPackage()».processes.«this.name»Process;
import «getPresentationRootPackage()».processes.PmfProcess;
«REM»
«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::CUSTOM) AS p»
import «getPresentationRootPackage()».processes.«p.name»Process ;
«ENDFOREACH»
«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::SAVE) AS p»
import «getPresentationRootPackage()».processes.«p.name»Process ;
«ENDFOREACH»
«ENDREM»
«FOREACH form.processes.referredProcess().select(e|(e != null) && (e.name != "") ) AS p»
import «getPresentationRootPackage()».processes.«p.name»Process ;
«ENDFOREACH»
import org.apache.wicket.Page;
import org.apache.wicket.model.IModel;

public class «this.name»«form.name»Page extends «getWicketMasterPageClass()» implements «this.contextRef.name»ListListener
{
    protected «this.processElements.first().name»SwapEditPanel panel = null;

    private Mod4jDataProvider<«form.contextRef.name»> provider = null;

	public Mod4jDataProvider<«form.contextRef.name»> getProvider() {
		return provider;
	}

	public void setProvider(Mod4jDataProvider<«form.contextRef.name»> provider) {
		this.provider = provider;
	}
	
    public «this.name»«form.name»Page (PmfProcess owner, final IModel<«this.contextRef.name»> context)
	{
		super(owner);
		panel = new «this.processElements.first().name»SwapEditPanel("panel", context);
		panel.addListener(this);
		add(panel);
	}

    public void editOn(boolean on){
        panel.setEditOn(on);
    }
    
	@Override
	public String getPageTitle()
	{
	    return "«this.name»«form.name»Page";
//		return getLocalizer().getString("lbl.breakfast",this);
	}

	public void startProcess(String processName, «this.contextRef.name» context){
	«FOREACH form.processes AS pp»
	«LET pp.referredProcess() AS p»
		if(processName.equals("«p.name»Process")){
			«p.name»Process process = new «p.name»Process();
			process.setOwningPage(this);
			«IF ! p.isInteractive() » «REM»this is a batch process«ENDREM»
				process.setProvider(provider);
				process.run(context);
				«IF (p.type == ProcessType::SAVE) || (p.type == ProcessType::CANCEL) || (p.type == ProcessType::REMOVE)»
				    owningProcess.done(this);
				«ENDIF»
			«ELSE»
				Page next = process.nextPage(context);
				if( next != null ){
					setResponsePage(process.nextPage(context));
				}
			«ENDIF»
		}
	«ENDLET»
	«ENDFOREACH»
	}

	public void on«this.contextRef.name»Cancel(«this.contextRef.name» element) {
	}

}
«ENDDEFINE»

«DEFINE GenerateListContentFormPage(DialogueCall dialogueCall) FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ProcessPage.xpt") FOR this-»
«LET referredContentForm(dialogueCall) AS form»
«LET this.processElements.referredContentForm().first().getProcessOfType(ProcessType::EDIT) AS editProcess»
«LET this.processElements.referredContentForm().first().getProcessOfType(ProcessType::NEW) AS newProcess»
package «getPresentationRootPackage()».pages;

«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::CUSTOM) AS p»
import «getPresentationRootPackage()».processes.«p.name»Process;
«ENDFOREACH»
«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::REMOVE) AS p»
import «getPresentationRootPackage()».processes.«p.name»Process;
«ENDFOREACH»
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».panels.«form.name»CollectionDataViewPanel;
import «getPresentationRootPackage()».panels.«form.contextRef.name»ListListener;
import «javaDtoClassPath(form.contextRef.name)»;
import «getPresentationRootPackage()».processes.PmfProcess;
«IF dialogueCall.getNavigationExpression() != null »
import «getPresentationRootPackage()».panels.«getWicketNavigationDataProviderClass(this.contextRef.name, form.contextRef.name)»;
«ELSEIF dialogueCall.getServiceExpression() != null »
import «getPresentationRootPackage()».panels.«getWicketServiceDataProviderClass(form.contextRef.name)»;
«ELSE»
import «getPresentationRootPackage()».panels.Mod4jDataProvider;
«ENDIF»
«IF editProcess != null»
import «getPresentationRootPackage()».processes.«editProcess.name»Process;
«ENDIF»
«IF newProcess != null»
import «getPresentationRootPackage()».processes.«newProcess.name»Process;
«ENDIF»

import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.Page;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.spring.injection.annot.SpringBean;

public class «this.name»«form.name»Page extends «getWicketMasterPageClass()» implements «form.contextRef.name»ListListener
{
    private Integer maxItemsPerPage = 5;

	«IF dialogueCall.getNavigationExpression() != null »
		«LET getWicketNavigationDataProviderClass(this.contextRef.name, form.contextRef.name) AS provider»
		private «provider» provider = null;

		public «provider» getProvider() {
			return provider;
		}
	
		public void setProvider(«provider» provider) {
			this.provider = provider;
		}
		«ENDLET»
	«ELSEIF dialogueCall.getServiceExpression() != null »
		«LET getWicketServiceDataProviderClass(form.contextRef.name) AS provider»
		private «provider» provider = null;

		public «provider» getProvider() {
			return provider;
		}
	
		public void setProvider(«provider» provider) {
			this.provider = provider;
		}
		«ENDLET»
	«ELSE»
       private Mod4jDataProvider<«form.contextRef.name»> provider = null;

		public Mod4jDataProvider<«form.contextRef.name»> getProvider() {
			return provider;
		}
	
		public void setProvider(Mod4jDataProvider<«form.contextRef.name»> provider) {
			this.provider = provider;
		}
	
	«ENDIF»
	«IF dialogueCall.getNavigationExpression() != null »
		public «this.name»«form.name»Page (PmfProcess owner, «getWicketNavigationDataProviderClass(this.contextRef.name, form.contextRef.name)» dataProvider)
	«ELSEIF dialogueCall.getServiceExpression() != null »
		public «this.name»«form.name»Page (PmfProcess owner, «getWicketServiceDataProviderClass(form.contextRef.name)» dataProvider)
	«ELSE»
		public «this.name»«form.name»Page (PmfProcess owner, Mod4jDataProvider<«form.contextRef.name»> dataProvider)
	«ENDIF»
	{
		super(owner);
        «form.name»CollectionDataViewPanel panel = new «form.name»CollectionDataViewPanel("panel", dataProvider, maxItemsPerPage);
        panel.addListener(this);
        this.provider = dataProvider;
        add( panel );
		
	}

	@Override
	public String getPageTitle()
	{
	    return "«this.name»«form.name»Page";
//		return getLocalizer().getString("lbl.breakfast",this);
	}

	public void startProcess(String processName, «form.contextRef.name» context){
	«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::CUSTOM) AS p»
		if(processName.equals("«p.name»Process")){
			«p.name»Process process = new «p.name»Process();
			process.setOwningPage(this);
			Page next = process.nextPage(context);
			if( next != null ){
				setResponsePage(process.nextPage(context));
			}
		}
	«ENDFOREACH»

	«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::NEW) AS p»
		if(processName.equals("«p.name»Process")){
			«p.name»Process process = new «p.name»Process();
			process.setOwningPage(this);
			process.setProvider(provider);
			Page next = process.nextPage(context);
			if( next != null ){
				setResponsePage(next);
			}
		}
	«ENDFOREACH»
	«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::EDIT) AS p»
		if(processName.equals("«p.name»Process")){
			«p.name»Process process = new «p.name»Process();
			process.setOwningPage(this);
			process.setProvider(provider);
			Page next = process.nextPage(context);
			if( next != null ){
				setResponsePage(next);
			}
		}
	«ENDFOREACH»
	«FOREACH form.processes.referredProcess().select(e|e.type == ProcessType::REMOVE) AS p»
		if(processName.equals("«p.name»Process")){
			«p.name»Process process = new «p.name»Process();
			process.setOwningPage(this);
			process.setProvider(provider);
			process.run(context);
		}
	«ENDFOREACH»
	}

//	public void on«form.contextRef.name»Cancel(«form.contextRef.name» element) {
//	}

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

