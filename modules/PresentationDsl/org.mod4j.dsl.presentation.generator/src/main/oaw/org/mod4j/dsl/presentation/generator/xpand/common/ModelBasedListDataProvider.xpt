«REM»
      Copyright (c) 2009 Ordina and committers to Mod4j
      All rights reserved. This program and the accompanying materials
      are made available under the terms of the Eclipse Public License v1.0
      which accompanies this distribution, and is available at
      http://www.eclipse.org/legal/epl-v10.html
     
      Contributors:
          Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::maven»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::panels»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

«DEFINE GenerateModelBasedListDataProvider  FOR PresentationModel»
package «getPresentationCommonPackage()».dataproviders;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.Iterator;

import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;
import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationCommonPackage()».ext.components.SetAsListWrapper;
import «getPresentationCommonPackage()».processes.ProcessType;
import «getPresentationCommonPackage()».ext.components.ListElementModel;
import org.mod4j.runtime.dto.AbstractDto;

public class ModelBasedListDataProvider<T extends AbstractDto> extends SortableDataProvider<T>
         implements Mod4jDataProvider<T> {

    protected IModel<T> model;
    
    public ModelBasedListDataProvider(IModel<T> model) {
        this.model = model;
    }

    public Object getOwner() {
        return null;
    }

    public Collection<ProcessType> supportedProcesses() {
        return ProcessType.all();
    }
    
    // Copied from ListDataProvider
    private static final long serialVersionUID = 1L;

    /** reference to the list used as dataprovider for the dataview */
    private List<T> list;

    protected void getList(){
        list = new SetAsListWrapper<T>((Set<T>) (model.getObject()));
    }

    /**
     * @see IDataProvider#iterator(int, int)
     */
    public Iterator<? extends T> iterator(final int first, final int count)
    {
        getList();
        int toIndex = first + count;
        if (toIndex > list.size())
        {
            toIndex = list.size();
        }
        return list.subList(first, toIndex).listIterator();
    }

    /**
     * @see IDataProvider#size()
     */
    public int size()
    {
        getList();
        return list.size();
    }

    /**
     * @see IDataProvider#model(Object)
     */
    public IModel<T> model(T object)
    {
		ListElementModel<T> elementModel = new ListElementModel<T>("id", object.getId(), model);
		return elementModel;
//      return new Model<T>(object);
    }

    /**
     * @see org.apache.wicket.model.IDetachable#detach()
     */
    public void detach()
    {
    }



}

«ENDDEFINE»