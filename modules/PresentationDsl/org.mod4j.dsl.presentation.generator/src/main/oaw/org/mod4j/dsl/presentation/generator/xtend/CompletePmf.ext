/* 
   This file contains the code to create a Crossx model from a BusinesDomainDsl model.
   Needed for crosssreference purposes.
*/
import crossx;
import PresentationDsl;

extension org::mod4j::crossx::broker::xtend::Crossx;
extension org::mod4j::dslcommon::xtend::generatorutil;

// Complete the model such that all higher level constructs and all implicit definitions are added.
completeModel(PresentationModel pmfModel) :
    let formElements = pmfModel.elements.typeSelect(ContentForm).formElements :    
    let contentForms = pmfModel.elements.typeSelect(ContentForm):

    contentForms.select(form | form.formElements.isEmpty ).addElements()
    ->pmfModel.elements.typeSelect(ContentForm).formElements.addDataProperty()
    ->pmfModel.elements.typeSelect(ContentForm).formElements.fillLabel()
    -> contentForms.convertActions()
    -> pmfModel.elements.typeSelect(Process).fillLabel()
    -> pmfModel.elements.typeSelect(Dialogue).processes.fillLabel()
    -> ( (pmfModel.start != null)? pmfModel.start.startProcesses.fillLabel() : null)
	
	;

/** add all the properties of the contextual Dto to the form is none are specified in the model.
 */
addElements(ContentForm form):
    let dtoSymbol = lookupSymbol(form.contextRef.modelName, form.contextRef.name, "Dto") :
    let symbols = dtoSymbol.subSymbols.select(s|s.type.matches("DataProperty")) :
    ( form.formElements.isEmpty ? symbols.addFormElement(form) : null);


addFormElement(Symbol symbol, ContentForm form) :
    let element = new FormElement :
    let reference = new DtoPropertyReference :
    element.setName(symbol.name)
    ->reference.setName(symbol.name)
    ->element.setReferences(reference)
    ->form.formElements.add(element)
;

/** Add the referred dataproperty to a formelements.
 */	
DataProperty addDataProperty(FormElement element) :
    let dtoSymbol = lookupSymbol(element.form.contextRef.modelName, element.form.contextRef.name, "Dto") :
    let symbol = dtoSymbol.subSymbols.select(s|s.type.matches("DataProperty")).select(sym | sym.name.equalsIgnoreCase(element.references.name)).first() :
    element.setDataProperty(newDataProperty(symbol))
;

/** If the label is empty, fill it with the name of the property
 */
fillLabel(FormElement element) :
    (  ( (element.label == null) || (element.label == "")  ) ? element.setLabel(element.references.name) : null)
;

/** If the label is empty, fill it with the name of the property
 */
fillLabel(ProcessCall pcall) :
    (  ( (pcall.label == null) || (pcall.label == "")  ) ? pcall.setLabel(pcall.name) : null)
;

/**
 * Create a new DtoProperty for 'ref''
 * 'symbols' is the list of Symbols from Crossx containing the "Property" definitions
 */
    
PresentationDsl::DataProperty newDataProperty(Symbol symbol) :
    let result = new DataProperty :
    let dataType = symbol.getPropertyValue("DataType") :
    let owner = (Symbol)(symbol.eContainer) :
    let ref = lookupSymbol(owner.owner.modelname, dataType, "EnumerationDto") :
    result.setName(symbol.name)->
    result.setDataType(dataType)->
    result.setIsEnumeration(ref != null)->
    result;

fillLabel(Process p) :
    (   (p.label == null) || (p.label == "")
      ? (p.setLabel(p.name))
      : null
    )
;
Boolean convertActions(ContentForm form) :
    let actions = {}  :
    actions.addAll(form.actions)->
    actions.forAll(e|e.createProcess(form))
;

Boolean createProcess(Object actionObject, ContentForm form) :
    let action = (Process) actionObject :
    let name = form.name + action.name.toFirstUpper() + "Action" :
    let processCall = new ProcessCall :
    processCall.setName(name)->
    action.setLabel( ((action.label == null) || (action.label == "")) ? action.name : action.label )->
    processCall.setLabel(action.label)->
    action.setName(name)->
    action.setContextRef(form.contextRef)->
    action.setCollectionContext(false)->
    form.processes.add(processCall)->
    form.presentationModel.elements.add(action)->
    true
    ;
