«REM»
 Copyright (c) 2010 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
 
«DEFINE GenerateObjectEditPanel FOR ContentForm -»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ObjectEditPanel.xpt") FOR this»
«LET this.name.toFirstUpper() + "EditPanel" AS className»
«LET this.processes.select(p | p.referredProcess.type == ProcessType::SAVE)   AS saveProcesses»
«LET this.processes.select(p | p.referredProcess.type == ProcessType::DELETE) AS removeProcesses»
«LET this.processes.select(p | p.referredProcess.type == ProcessType::CANCEL) AS cancelProcesses»
«LET this.processes.select(p | p.referredProcess.type == ProcessType::EDIT) AS editProcesses»
package «getPresentationRootPackage()».panels;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

«FOREACH this.processes.referredProcess AS p»
import «getPresentationRootPackage()».processes.«p.name.toFirstUpper()»Process;
«ENDFOREACH»

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationCommonPackage()».ext.components.AjaxEditableLabel;
import «getPresentationCommonPackage()».ext.components.AjaxIndicator;
import «getPresentationCommonPackage()».ext.components.AjaxUpdatingBehaviour;
import «getPresentationCommonPackage()».ext.components.ComponentsFeedbackMessageFilter;
import «getPresentationCommonPackage()».ext.components.FieldFeedbackPanel;
import «getPresentationCommonPackage()».ext.components.FormFeedbackPanel;
import «getPresentationCommonPackage()».ext.components.ConfirmAjaxButton;
import «getPresentationCommonPackage()».ext.components.IndicatingAjaxButton;
import «getPresentationCommonPackage()».ext.components.ModalWindow;
import «getPresentationCommonPackage()».ext.components.JodaModel;

import org.joda.time.DateTime;
import org.apache.wicket.extensions.yui.calendar.DateTimeField;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;
import org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton;
import org.apache.wicket.behavior.SimpleAttributeModifier;
import org.apache.wicket.feedback.ComponentFeedbackMessageFilter;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Button;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.ResourceModel;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.validation.validator.PatternValidator;
import org.apache.wicket.validation.validator.RangeValidator;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.datetime.StyleDateConverter;

import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.mod4j.runtime.exception.BusinessRuleException;


import «javaDtoClassPath(this.contextRef.name)»;

«FOREACH this.formElements.dataProperty AS dp»
	«IF dp.isEnumeration»
	import «javaDtoClassPath(dp.dataType)»;
	«ENDIF»
«ENDFOREACH»

/**
 * A reusable panel that allows the user to edit an object.
 * The object may be an existing one or a new one.
 */
@SuppressWarnings("serial")
public class «className» extends Panel {
	private Log log = LogFactory.getLog(getClass());

«EXPAND addWicketVariable(className) FOREACH this.formElements»

	protected «getWicketMasterPageClass()» page() {
	    return («getWicketMasterPageClass()»)findPage();
	}
	
    protected IModel<«this.contextRef.name»> localModel ;
    Form<«this.contextRef.name»> form = null;

    public «className»(String id, final IModel<«this.contextRef.name»> model) {
        super(id);
    «IF (removeProcesses != null) && (!removeProcesses.isEmpty)»
        boolean isNew = (model.getObject() != null)
        				&& ((model.getObject()).getId() == null);
    «ENDIF»
        localModel = model;
        form = new Form<«this.contextRef.name»>("frm«this.contextRef.name»", model);

		ComponentsFeedbackMessageFilter filter = new ComponentsFeedbackMessageFilter();
		FormFeedbackPanel formMsgs = new FormFeedbackPanel("formMsgs", filter);
		filter.addComponent(form);
        formMsgs.setOutputMarkupId(true);

    «EXPAND addWicketComponent(className) FOREACH this.formElements»
        form.add(new AjaxIndicator("ajaxIndicator"));
 
 «IF (saveProcesses != null) && (!saveProcesses.isEmpty)»
     «FOREACH saveProcesses.referredProcess AS p»
        AjaxFallbackButton «p.name»save = new AjaxFallbackButton("«p.name»save", 
                new Model<String>( getLocalizer().getString("cmd.«p.name»", «className».this) ), form ){
            @Override
            public void onSubmit(AjaxRequestTarget target, Form theForm) {
                try {
	                «p.javaClass()» process = new «p.javaClass()»(model);
	                «getWicketMasterPageClass()» currentPage = («getWicketMasterPageClass()»)this.getPage();
	                process.setOwningPage(currentPage);
	                process.run(model.getObject());
	            } catch( BusinessRuleException e){
	                handleBusinessRuleException(target, theForm, e);
	            }
            }
        };
        form.add(«p.name»save);
        filter.addComponent(«p.name»save);
        form.setDefaultButton(«p.name»save);
    «ENDFOREACH»
«ENDIF»
 «IF (removeProcesses != null) && (!removeProcesses.isEmpty)»
     «FOREACH removeProcesses.referredProcess AS p»
        Button «p.name»delete = new Button("«p.name»delete", 
                new Model<String>( getLocalizer().getString("cmd.«p.name»", «className».this) ) ){
            @Override
            public void onSubmit() {
                «p.javaClass()» process = new «p.javaClass()»(model);
                «getWicketMasterPageClass()» currentPage = («getWicketMasterPageClass()»)this.getPage();
                process.setOwningPage(currentPage);
                process.run(model.getObject());

                currentPage.getProcess().done();
            }
        };
        «p.name»delete.setDefaultFormProcessing(false);
        «p.name»delete.setVisible(!isNew);
        «p.name»delete.add( new SimpleAttributeModifier("onclick", "return confirm('"
                        + getLocalizer().getString("msg.confirm", this) + "');"));
        form.add(«p.name»delete);
        filter.addComponent(«p.name»delete);
    «ENDFOREACH»
«ENDIF» 
 «IF (cancelProcesses != null) && (! cancelProcesses.isEmpty)»
     «FOREACH cancelProcesses.referredProcess AS p»
        Button cancel = new Button("«p.name»cancel", 
                new Model<String>( getLocalizer().getString("cmd.«p.name»", «className».this) ) ){
            @Override
            public void onSubmit() {
            	form.clearInput();
            	page().getProcess().cancel();
             }
        };
        cancel.setDefaultFormProcessing(false);
        form.add(cancel);
        filter.addComponent(cancel);
    «ENDFOREACH»
«ENDIF» 

 «IF (editProcesses != null) && (!editProcesses.isEmpty)»
     «FOREACH editProcesses.referredProcess AS p»
        Button «p.name»edit = new Button("«p.name»edit", 
                new Model<String>( getLocalizer().getString("cmd.«p.name»", «className».this) ) ){
            @Override
            public void onSubmit() {
                localModel.setObject(null);
                form.clearInput();
            }
        };
        «p.name»edit.setDefaultFormProcessing(false);
        form.add(«p.name»edit);
        filter.addComponent(«p.name»edit);
    «ENDFOREACH»
«ENDIF» 

    «FOREACH this.processes.select(pc | (pc.referredProcess != null) && (pc.referredProcess.type==ProcessType::CUSTOM)) AS pc»
        «LET pc.referredProcess AS process»
        Button «process.name»custom = new Button("«process.name»custom", 
                new Model<String>( getLocalizer().getString("cmd.«process.name»", «className».this) ) ){
            @Override
            public void onSubmit() {
        «IF process.isInteractive()»
                «process.javaClass()» process = new «process.javaClass()»(model);
                process.setOwningPage(page());
                setResponsePage(process.nextPage());
        «ENDIF»
            }
        };
        form.add(«process.name»custom);
        filter.addComponent(«process.name»custom);
        «ENDLET»
    «ENDFOREACH»

    «FOREACH this.processes.select(pc | (pc.referredProcess != null) && (pc.referredProcess.type==ProcessType::ADDTO)) AS pc»
        «LET pc.referredProcess AS process»
        Button «process.name» = new Button("«process.name»", 
                new Model<String>( getLocalizer().getString("cmd.«process.name»", «className».this) ) ){
            @Override
            public void onSubmit() {
        «IF process.isInteractive()»
                «process.javaClass()» process = new «process.javaClass()»(model);
                process.setOwningPage(page());
                setResponsePage(process.nextPage());
        «ENDIF»
            }
        };
        form.add(«process.name»);
        filter.addComponent(«process.name»);
        «ENDLET»
    «ENDFOREACH»

    «FOREACH this.processes.select(pc | (pc.referredProcess != null) && (pc.referredProcess.type==ProcessType::LINK)) AS pc»
        «LET pc.referredProcess AS process»
        Button «process.name» = new Button("«process.name»", 
                new Model<String>( getLocalizer().getString("cmd.«process.name»", «className».this) ) ){
            @Override
            public void onSubmit() {
        «IF process.isInteractive()»
                «process.javaClass()» process = new «process.javaClass()»(model);
                process.setOwningPage(page());
                setResponsePage(process.nextPage());
        «ENDIF»
            }
        };
        form.add(«process.name»);
        filter.addComponent(«process.name»);
        «ENDLET»
    «ENDFOREACH»

        add(formMsgs);
        add(form);
    }
    
    /**
     * @param target
     * @param thForm
     * @param e
     */
    private void handleBusinessRuleException(AjaxRequestTarget target, Form theForm, BusinessRuleException e) {
        Errors exceptionErrors = (Errors) e.getCause();
        for (Object tmp : exceptionErrors.getAllErrors()) {
            if( tmp instanceof FieldError){
                FieldError error = (FieldError)tmp;
                String field = error.getField();
                String message = error.getDefaultMessage();
                Boolean visibleFieldError = false;
    «FOREACH this.formElements AS elem»
    «LET elem.dataProperty.name.toFirstLower().replaceAll("\\.", "_") AS varName»
                if( field.equals("«elem.dataProperty.name»")){
                    «varName»Msgs.error(message);
                    target.addComponent(«varName»Msgs);
                    visibleFieldError = true;
                }
    «ENDLET»
    «ENDFOREACH»
                if( ! visibleFieldError ){
                    theForm.error(message);
                    target.addComponent(theForm);
                }
            } else if( tmp instanceof ObjectError){
                ObjectError objectError = (ObjectError)tmp;
                String objectMessage = objectError.getDefaultMessage();
                theForm.error(objectMessage);
                target.addComponent(theForm);
            }
        }
    }
    
}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«DEFINE addWicketVariable(String className) FOR FormElement»
«LET this.dataProperty.name.toFirstLower().replaceAll("\\.", "_") AS varName»
    FeedbackPanel «varName»Msgs = null;
«ENDLET»
«ENDDEFINE»

«DEFINE addWicketComponent(String className) FOR FormElement»
«LET this.dataProperty.name.toFirstLower().replaceAll("\\.", "_") AS varName»
    // «varName»
    «IF this.dataProperty.dataType.equalsIgnoreCase("string")»
        TextField<String> «varName» = new TextField<String>("«this.dataProperty.name»");
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", «className».this)));
    «ELSEIF this.dataProperty.dataType.equalsIgnoreCase("decimal")»
        TextField<Float> «varName» = new TextField<Float>("«this.dataProperty.name»", Float.class);
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", «className».this)));
    «ELSEIF this.dataProperty.dataType.equalsIgnoreCase("boolean")»
        CheckBox «varName» = new CheckBox("«this.dataProperty.name»");
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", «className».this)));
    «ELSEIF this.dataProperty.dataType.equalsIgnoreCase("integer")»
        TextField<Integer> «varName» = new TextField<Integer>("«this.dataProperty.name»", Integer.class);
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", «className».this)));
    «ELSEIF this.dataProperty.dataType.equalsIgnoreCase("datetime")»
        DateTimeField «varName» = new DateTimeField("«this.dataProperty.name»", new JodaModel(new PropertyModel<DateTime>(localModel, "«this.dataProperty.name»")));
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", «className».this)));
    «ELSEIF this.dataProperty.isEnumeration»
        DropDownChoice<«this.dataProperty.dataType»> «varName» = new DropDownChoice<«this.dataProperty.dataType»>("«this.dataProperty.name»", Arrays.asList(«this.dataProperty.dataType».values()),
        		new IChoiceRenderer<«this.dataProperty.dataType»>() {
		            public Object getDisplayValue(«this.dataProperty.dataType» o) {
		                return o.toString();
		            }
		
		            public String getIdValue(«this.dataProperty.dataType» o, int index) {
		                return o.name();
		            }
		        });
        «varName».setNullValid(true);
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", this)));
    «ENDIF»
//  «varName».setRequired(true);
    «varName»Msgs = new FeedbackPanel("«this.dataProperty.name»Msgs"); //, new ComponentFeedbackMessageFilter(«varName»));
    «varName»Msgs.setOutputMarkupId(true);
    «varName».add(new AjaxUpdatingBehaviour(«varName»Msgs));
    «IF ! this.dataProperty.editable»
        «varName».setEnabled(false);
    «ENDIF»
    form.add(«varName»);
    form.add(«varName»Msgs);
«ENDLET»
«ENDDEFINE»
