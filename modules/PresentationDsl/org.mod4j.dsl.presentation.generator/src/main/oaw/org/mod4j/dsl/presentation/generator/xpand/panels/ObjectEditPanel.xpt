«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
 
«DEFINE GenerateObjectEditPanel FOR ContentForm -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ObjectEditPanel.xpt") FOR this»
«LET this.processes.referredProcess().select(p|p.type == ProcessType::SAVE) AS saveProcesses»
«LET this.processes.referredProcess().select(p|p.type == ProcessType::DELETE) AS removeProcesses»
«LET this.processes.referredProcess().select(p|p.type == ProcessType::CANCEL) AS cancelProcesses»
package «getPresentationRootPackage()».panels;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationCommonPackage()».ext.components.AjaxEditableLabel;
import «getPresentationCommonPackage()».ext.components.AjaxIndicator;
import «getPresentationCommonPackage()».ext.components.AjaxUpdatingBehaviour;
import «getPresentationCommonPackage()».ext.components.ComponentsFeedbackMessageFilter;
import «getPresentationCommonPackage()».ext.components.FieldFeedbackPanel;
import «getPresentationCommonPackage()».ext.components.FormFeedbackPanel;
import «getPresentationCommonPackage()».ext.components.ConfirmAjaxButton;
import «getPresentationCommonPackage()».ext.components.IndicatingAjaxButton;
import «getPresentationCommonPackage()».ext.components.ModalWindow;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;
import org.apache.wicket.behavior.SimpleAttributeModifier;
import org.apache.wicket.feedback.ComponentFeedbackMessageFilter;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Button;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.ResourceModel;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.validation.validator.PatternValidator;
import org.apache.wicket.validation.validator.RangeValidator;

import «javaDtoClassPath(this.contextRef.name)»;

«FOREACH this.formElements.dataProperty AS dp»
	«IF dp.isEnumeration»
	import «javaDtoClassPath(dp.dataType)»;
	«ENDIF»
«ENDFOREACH»

/**
 * A reusable panel that allows the user to edit an object.
 * The object may be an existing one or a new one.
 */
@SuppressWarnings("serial")
public class «this.name»EditPanelWithListener extends Panel {
	private Log log = LogFactory.getLog(getClass());

//	protected List<«this.contextRef.name»ListListener> listeners = new ArrayList<«this.contextRef.name»ListListener>();
	
	/**
	 * Adds a listener to this panel. The listener will be notified whenever an event takes place on this panel.
	 * This allows the panel to be used in different pages with different behavior.
	 * @param listener The listener to be added
	 */
//	public void addListener(«this.contextRef.name»ListListener listener ){
//		listeners.add(listener);
//	}
	
	protected «getWicketMasterPageClass()» page() {
	    return («getWicketMasterPageClass()»)findPage();
	}
	
    protected IModel<«this.contextRef.name»> localModel ;
    Form<«this.contextRef.name»> form = null;

    public «this.name»EditPanelWithListener(String id, final IModel<«this.contextRef.name»> model) {
        super(id);
        boolean isNew = (model.getObject() != null)
        				&& ((model.getObject()).getId() == null);
        localModel = model;
        form = new Form<«this.contextRef.name»>("frm«this.contextRef.name»", model);

		ComponentsFeedbackMessageFilter filter = new ComponentsFeedbackMessageFilter();
		FormFeedbackPanel formMsgs = new FormFeedbackPanel("formMsgs", filter);
		filter.addComponent(form);
        formMsgs.setOutputMarkupId(true);

    «EXPAND addWicketComponent FOREACH this.formElements»
        form.add(new AjaxIndicator("ajaxIndicator"));
 
 «IF (saveProcesses != null) && (!saveProcesses.isEmpty)»
     «FOREACH saveProcesses AS p»
        Button «p.name»save = new Button("«p.name»save", new ResourceModel("cmd.save")) {
            @Override
            public void onSubmit() {
                page().startProcess("«p.name»Process", model.getObject() );
//				for («this.contextRef.name»ListListener listener : listeners) {
//					listener.startProcess("«p.name»Process", model.getObject() );
//				}
            }
        };
        form.add(«p.name»save);
        filter.addComponent(«p.name»save);
        form.setDefaultButton(«p.name»save);
    «ENDFOREACH»
«ENDIF»
 «IF (removeProcesses != null) && (!removeProcesses.isEmpty)»
     «FOREACH removeProcesses AS p»
        Button «p.name»delete = new Button("«p.name»delete", new ResourceModel("cmd.delete")) {
            @Override
            public void onSubmit() {
                page().startProcess("«p.name»Process", localModel.getObject() );
//				for («this.contextRef.name»ListListener listener : listeners) {
//					listener.startProcess("«p.name»Process", localModel.getObject() );
//				}
				localModel.setObject(null);
				form.clearInput();
            }
        };
        «p.name»delete.setDefaultFormProcessing(false);
        «p.name»delete.setVisible(!isNew);
        «p.name»delete.add( new SimpleAttributeModifier("onclick", "return confirm('"
                        + getLocalizer().getString("msg.confirm", this) + "');"));
        form.add(«p.name»delete);
        filter.addComponent(«p.name»delete);
    «ENDFOREACH»
«ENDIF» 
 «IF (cancelProcesses != null) && (! cancelProcesses.isEmpty)»
     «FOREACH cancelProcesses AS p»
        Button cancel = new Button("«p.name»cancel", new ResourceModel("cmd.cancel")) {
            @Override
            public void onSubmit() {
            	form.clearInput();
                page().startProcess("«p.name»Process", model.getObject());
//				for («this.contextRef.name»ListListener listener : listeners) {
//					listener.startProcess("«p.name»Process", model.getObject());
//				}
             }
        };
        cancel.setDefaultFormProcessing(false);
        form.add(cancel);
        filter.addComponent(cancel);
    «ENDFOREACH»
«ENDIF» 

    «FOREACH this.processes.select(pc | (pc.referredProcess() != null) && (pc.referredProcess().type==ProcessType::CUSTOM)) AS pc»
        «LET pc.referredProcess() AS p»
        Button «p.name»custom = new Button("«p.name»custom", new Model("«((pc.alias != null) && (pc.alias != "") ? pc.alias : p.label)»")) {
            @Override
            public void onSubmit() {
                page().startProcess("«p.name»Process", model.getObject());
//				for («this.contextRef.name»ListListener listener : listeners) {
//					listener.startProcess(
//									"«p.name»Process", model.getObject());
//				}
            }
        };
        form.add(«p.name»custom);
        filter.addComponent(«p.name»custom);
        «ENDLET»
    «ENDFOREACH»
        add(formMsgs);
        add(form);
    }
}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«DEFINE addWicketComponent FOR FormElement»
«LET this.dataProperty.name.toFirstLower() AS varName»
    // «varName»
    «IF this.dataProperty.dataType.equalsIgnoreCase("string")»
        TextField<String> «varName» = new TextField<String>("«this.dataProperty.name»");
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", «this.form.name»EditPanelWithListener.this)));
//        «varName».setRequired(true);

        FieldFeedbackPanel «varName»Msgs = new FieldFeedbackPanel("«varName»Msgs", new ComponentFeedbackMessageFilter(«varName»));
        «varName»Msgs.setOutputMarkupId(true);
        «varName».add(new AjaxUpdatingBehaviour(«varName»Msgs));
        form.add(«varName»);
        form.add(«varName»Msgs);
    «ELSEIF this.dataProperty.dataType.equalsIgnoreCase("decimal")»
        TextField<Float> «varName» = new TextField<Float>("«this.dataProperty.name»", Float.class);
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", «this.form.name»EditPanelWithListener.this)));
//        «varName».setRequired(true);

        FieldFeedbackPanel «varName»Msgs = new FieldFeedbackPanel("«varName»Msgs", new ComponentFeedbackMessageFilter(«varName»));
        «varName»Msgs.setOutputMarkupId(true);
        «varName».add(new AjaxUpdatingBehaviour(«varName»Msgs));
        form.add(«varName»);
        form.add(«varName»Msgs);
    «ELSEIF this.dataProperty.dataType.equalsIgnoreCase("integer")»
        TextField<Integer> «varName» = new TextField<Integer>("«this.dataProperty.name»", Integer.class);
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«this.dataProperty.name»", «this.form.name»EditPanelWithListener.this)));
//        «varName».setRequired(true);

        FieldFeedbackPanel «varName»Msgs = new FieldFeedbackPanel("«varName»Msgs", new ComponentFeedbackMessageFilter(«varName»));
        «varName»Msgs.setOutputMarkupId(true);
        «varName».add(new AjaxUpdatingBehaviour(«varName»Msgs));
        form.add(«varName»);
        form.add(«varName»Msgs);
    «ELSEIF this.dataProperty.isEnumeration»
        DropDownChoice<«this.dataProperty.dataType»> «varName» = new DropDownChoice<«this.dataProperty.dataType»>("«this.dataProperty.name»", Arrays.asList(«this.dataProperty.dataType».values()),
        		new IChoiceRenderer<«this.dataProperty.dataType»>() {
		            public Object getDisplayValue(«this.dataProperty.dataType» o) {
		                return o.toString();
		            }
		
		            public String getIdValue(«this.dataProperty.dataType» o, int index) {
		                return o.name();
		            }
		        });
        «varName».setNullValid(true);
//        «varName».setRequired(true);
        «varName».setLabel(new Model<String>(getLocalizer().getString("lbl.«varName»", this)));
        FieldFeedbackPanel «varName»Msgs = new FieldFeedbackPanel("«varName»Msgs", new ComponentFeedbackMessageFilter(«varName»));
        «varName»Msgs.setOutputMarkupId(true);
        «varName».add(new AjaxUpdatingBehaviour(«varName»Msgs));
        form.add(«varName»);
        form.add(«varName»Msgs);
    «ENDIF»
«ENDLET»
«ENDDEFINE»
