«REM»
      Copyright (c) 2009 Ordina and committers to Mod4j
      All rights reserved. This program and the accompanying materials
      are made available under the terms of the Eclipse Public License v1.0
      which accompanies this distribution, and is available at
      http://www.eclipse.org/legal/epl-v10.html
     
      Contributors:
          Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::maven»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::panels»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

«DEFINE CommonCheckBoxDtoModel FOR PresentationModel»
package «getPresentationCommonPackage()».ext.components;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.wicket.model.IModel;
import org.mod4j.runtime.dto.AbstractDto;

public class CheckBoxDtoModel<DtoType extends AbstractDto>
        implements
            IModel<Boolean>,
            Serializable {
    private static final long serialVersionUID = 1L;

    private final DtoType selection;

    private List<DtoType> selectedDtos;

    public CheckBoxDtoModel(List<DtoType> selectedModels, DtoType dto) {
        this.selectedDtos = selectedModels;
        this.selection = dto;
    }
    
    protected boolean multiple = false;
    
    /**
     * @return True if multiple element should be selected.
     */
    public boolean isMultiple() {
        return multiple;
    }

    public void setMultiple(boolean multiple) {
        this.multiple = multiple;
    }

    public IModel<?> getNestedModel() {
        return null;
    }

    public Boolean getObject() {
        return isBookAlreadyMarkedForCheckout();
    }

    private AbstractDto findElement() {
        for (AbstractDto dto : selectedDtos) {
            if (dto.getId().equals(selection.getId())) {
                return dto;
            }
        }
        return null;
    }

    private Boolean isBookAlreadyMarkedForCheckout() {
        if( findElement() != null ) {
            return Boolean.TRUE;
        } else {
            return Boolean.FALSE;
        }
    }

    public void setObject(Boolean object) {
        boolean selected = object.booleanValue();
        AbstractDto previouslySelectedDto = findElement();
//      boolean previouslySelected = isBookAlreadyMarkedForCheckout()
//              .booleanValue();
        if (selected) {
            if ( previouslySelectedDto == null) {
                if( ! multiple ){
                    selectedDtos.clear();
                }
                selectedDtos.add(selection);
            }
        } else {
            if (previouslySelectedDto != null ){
                selectedDtos.remove(previouslySelectedDto) ;
            }
        }
    }

    public void detach() {
    }
}
«ENDDEFINE»