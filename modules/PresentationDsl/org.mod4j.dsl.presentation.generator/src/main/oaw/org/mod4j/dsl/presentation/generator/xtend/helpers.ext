import PresentationDsl;
import crossx;

extension org::mod4j::crossx::broker::xtend::Crossx;
extension org::mod4j::dslcommon::xtend::ProjectProperties;

String javaClass(Process p) :
    p.name.toFirstUpper() + "Process";

String javaBaseClass(Process p) :
    p.name.toFirstUpper() + "ProcessImplBase";
    
String escapePropertyKey(String key) :
    key.replaceAll(" ",  "\\ ")
 ;

String businessClassName(ContentForm form) :
    lookupSymbol(form.contextRef.modelName, 
                  form.contextRef.name,
                  "Dto").
                   getPropertyValue("businessClass")
;

String findCreateMethodFor(ContentForm form) :
    findAllSymbols(getProject(), "Service").first().findAllSubSymbols("ServiceMethod").
    select( method | method.getPropertyValue("methodType").endsWith("Create") && method.getPropertyValue("dto").endsWith(form.contextRef.name)).first().name;
    
String findUpdateMethodFor(ContentForm form) :
    findAllSymbols(getProject(), "Service").first().findAllSubSymbols("ServiceMethod").
    select( method | method.getPropertyValue("methodType").endsWith("UPDATE") && method.getPropertyValue("dto").endsWith(form.contextRef.name)).first().name;
    
String findDeleteMethodFor(ContentForm form) :
    findAllSymbols(getProject(), "Service").first().findAllSubSymbols("ServiceMethod").
    select( method | method.getPropertyValue("methodType").endsWith("DELETE") && method.getPropertyValue("dto").endsWith(form.contextRef.name)).first().name;
    
String findReadMethodFor(ContentForm form) :
    findAllSymbols(getProject(), "Service").first().findAllSubSymbols("ServiceMethod").
    select( method | method.getPropertyValue("methodType").endsWith("READ") && method.getPropertyValue("dto").endsWith(form.contextRef.name)).first().name;
    
String findListAllMethodFor(ContentForm form) :
    findAllSymbols(getProject(), "Service").first().findAllSubSymbols("ServiceMethod").
    select( method | method.getPropertyValue("methodType").endsWith("LISTALL") && method.getPropertyValue("dto").endsWith(form.contextRef.name)).first().name;
    
String findSpecialMethod(ContentForm form, String methodType) :
    findAllSymbols(getProject(), "Service").first().findAllSubSymbols("ServiceMethod").
    select( method | method.getPropertyValue("methodType").endsWith(methodType) && method.getPropertyValue("dto").endsWith(form.contextRef.name)).first().name;

String findSpecialMethod(String dtoName, String methodType) :
    let methods =
    findAllSymbols(getProject(), "Service").first().findAllSubSymbols("ServiceMethod").
    select( method | method.getPropertyValue("methodType").endsWith(methodType) && method.getPropertyValue("dto").endsWith(dtoName)) :
    (methods.isEmpty ? null : methods.first().name);
    
String findSpecialMethodInService(String dtoName, String methodType, String serviceName) :
    findAllSymbols(getProject(), "Service").select(s | s.name.endsWith(serviceName)).findAllSubSymbols("ServiceMethod").
    select( method | method.getPropertyValue("methodType").endsWith(methodType) && method.getPropertyValue("dto").endsWith(dtoName)).first().name;
    
// returns the name of a service that contains a special method of "methodType" for the referred DTO in "form"
String findServiceWithMethod(String dtoName, String methodType) :
    findAllSymbols(getProject(), "Service").select( s | findSpecialMethodInService(dtoName, methodType, s.name) != null ).first().name;

Symbol findMethodInService(String serviceName, String methodName) :
    findAllSymbols(getProject(), "Service").select(s | s.name.endsWith(serviceName)).findAllSubSymbols("ServiceMethod").
    selectFirst( method | method.name == methodName);
    
 
 