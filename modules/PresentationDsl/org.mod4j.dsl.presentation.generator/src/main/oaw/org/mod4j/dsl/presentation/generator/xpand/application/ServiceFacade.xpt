«REM»
 Copyright (c) 2010 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»

«DEFINE ServiceFacade FOR PresentationModel -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ServiceFacade.xpt") FOR this»
«LET findAllSymbols(getProject(), "Service") AS allServices»
    «FOREACH allServices AS service»
//         import «javaLocalServiceInterfacePath(service.name)» ;
//  «LET service.subSymbols.select(sub | sub.type == "ServiceMethod" ) AS methods»
	    «FOREACH methods AS method»
// Method: «method.name»  type: «method.type» special: «method.getPropertyValue("methodType")»    
	    «ENDFOREACH»
    «ENDLET»
    «ENDFOREACH»
«ENDLET-»
package «getPresentationRootPackage()»;

import org.mod4j.runtime.dto.AbstractDto;
«FOREACH this.externalReferences AS ext-»
«LET lookupSymbol(ext.modelName, ext.modelName, "Service") AS service-»
    «IF service != null-»
        import «javaLocalServiceInterfacePath(service.name)» ;
    «ENDIF-»
«ENDLET-»
«ENDFOREACH-»

«FOREACH this.externalReferences AS extDto»
    «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
    «IF dto != null»
import «javaDtoClassPath(dto.name)»;
    «ENDIF»
    «ENDLET»
«ENDFOREACH»
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.markup.html.WebPage;
import java.util.List;

/** This class serves as a gateway to the services defined by the Service DSL Models.
 *  All other objects in the presentation layer get their access to the servuice through this class.
 */
public class «getPresentationServiceFacadeClass()»  extends WebPage {
«REM»
«LET this.externalReferences.typeSelect(DtoReference).name AS dtoNames»
«print("DtoNames [" + dtoNames + "]")»
«LET  dtoNames.findServiceMethod("Create")  AS serviceMethods»
«FOREACH serviceMethods AS m»
«print("Service [" + m.parent + "] method " + m.name)»
«ENDFOREACH»
«ENDLET»
«ENDLET»
«ENDREM»
«FOREACH this.externalReferences.typeSelect(ServiceReference).modelName.toSet() AS ext-»
«LET lookupSymbol(ext, ext, "Service") AS service-»
    «IF service != null-»
        «LET javaLocalServiceInterface(service.name) AS serviceType»
        @SpringBean(name = "«service.name.toFirstLower()»Service")
        protected static «serviceType» service«serviceType»;
        
        public static «serviceType» get«serviceType»() {
            return service«serviceType»;
        }
        «FOREACH this.externalReferences.typeSelect(DtoReference) AS extDto»
            «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
            «IF (dto != null) && (getPropertyValue(dto, "dtoType") == "BusinessClassDto" )»
                «LET findSpecialMethodInService(dto.name, "UPDATE", service.name) AS updateService»
                «IF updateService != null »
                    public static void update(«dto.name» dto){
                        service«serviceType».«updateService»(dto);
                    }
                «ENDIF»
                «ENDLET»
                «LET findSpecialMethodInService(dto.name, "Create", service.name) AS createService»
                «IF createService != null »
                    public static Long create(«dto.name» dto){
                        return service«serviceType».«createService»(dto);
                    }
                «ENDIF»
                «ENDLET»
                «LET findSpecialMethodInService(dto.name, "DELETE", service.name) AS deleteService»
                «IF deleteService != null »
                    public static void delete(«dto.name» dto){
                        service«serviceType».«deleteService»(dto);
                    }
                «ENDIF»
                «ENDLET»
                «LET findSpecialMethodInService(dto.name, "READ", service.name) AS readService»
                «IF readService != null »
                    public static «dto.name» read«dto.name»(long id){
                        return service«serviceType».«readService»(id);
                    }
                «ENDIF»
                «ENDLET»
                «LET findSpecialMethodInService(dto.name, "LISTALL", service.name) AS listAllService»
                «IF listAllService != null »
                    public static List<«dto.name»> list«dto.name»(final int firstResult, final int maxResults, 
                                                            final String sortProperty, final boolean isAscending){
                        return service«serviceType».«listAllService»(firstResult, maxResults, sortProperty, isAscending);
                    }
                        
                    public static long count«dto.name»() {
                        return service«serviceType».count«businessClassName(extDto.modelName, extDto.name)»s();
                    }
                «ENDIF»
                «ENDLET»
                «LET findSpecialMethodInService(dto.name, "FIND", service.name) AS findService»
                «IF findService != null »
                    public static List<«dto.name»> find«dto.name»(final «dto.name» exampleDto,
                                                            final int firstResult, final int maxResults, 
                                                            final String sortProperty, final boolean isAscending){
                        return service«serviceType».«findService»(exampleDto, firstResult, maxResults, sortProperty, isAscending);
                    }

                    public static long count«dto.name»(final «dto.name» exampleDto) {
                        return service«serviceType».count«businessClassName(extDto.modelName, extDto.name)»s(exampleDto);
                    }
                «ENDIF»
                «ENDLET»
            «ENDIF»
            «ENDLET»
        «ENDFOREACH»
        
        public static Long create(AbstractDto dto) {
        «FOREACH this.externalReferences AS extDto»
            «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
            «IF (dto != null) && (getPropertyValue(dto, "dtoType") == "BusinessClassDto" )»
               if( dto instanceof «dto.name» ){
                   return «getPresentationServiceFacadeClass()».create( («dto.name»)dto );
               }
            «ENDIF»
            «ENDLET»
        «ENDFOREACH»
            return null;
        }

        public static void update(AbstractDto dto) {
        «FOREACH this.externalReferences AS extDto»
            «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
            «IF (dto != null) && (getPropertyValue(dto, "dtoType") == "BusinessClassDto" )»
               if( dto instanceof «dto.name» ){
                   «getPresentationServiceFacadeClass()».update( («dto.name»)dto );
               }
            «ENDIF»
            «ENDLET»
        «ENDFOREACH»
        }

        public static AbstractDto read(AbstractDto dto) {
        «FOREACH this.externalReferences AS extDto»
            «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
            «IF (dto != null) && (getPropertyValue(dto, "dtoType") == "BusinessClassDto" )»
               if( dto instanceof «dto.name» ){
                   return «getPresentationServiceFacadeClass()».read«dto.name»( dto.getId() );
               }
            «ENDIF»
            «ENDLET»
        «ENDFOREACH»
            return null;
        }

        «ENDLET»
    «ENDIF-»
«ENDLET-»
«ENDFOREACH-»


    public  «getPresentationServiceFacadeClass()»() {
    }

    
}
«ENDDEFINE»
