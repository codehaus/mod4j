«REM»
 Copyright (c) 2010 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»

«DEFINE ServiceFacade FOR PresentationModel -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ServiceFacade.xpt") FOR this»
«LET findAllSymbols(getProject(), "Service") AS allServices»
    «FOREACH allServices AS service»
//         import «javaLocalServiceInterfacePath(service.name)» ;
//  «LET service.subSymbols.select(sub | sub.type == "ServiceMethod" ) AS methods»
	    «FOREACH methods AS method»
// Method: «method.name»  type: «method.type» special: «method.getPropertyValue("methodType")»    
	    «ENDFOREACH»
    «ENDLET»
    «ENDFOREACH»
«ENDLET-»
package «getPresentationRootPackage()»;

import org.mod4j.runtime.dto.AbstractDto;
«FOREACH this.externalReferences AS ext-»
«LET lookupSymbol(ext.modelName, ext.modelName, "Service") AS service-»
    «IF service != null-»
        import «javaLocalServiceInterfacePath(service.name)» ;
    «ENDIF-»
«ENDLET-»
«ENDFOREACH-»

«FOREACH this.externalReferences AS extDto»
    «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
    «IF dto != null»
import «javaDtoClassPath(dto.name)»;
    «ENDIF»
    «ENDLET»
«ENDFOREACH»
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.markup.html.WebPage;

public class «getPresentationServiceFacadeClass()»  extends WebPage {
«FOREACH this.externalReferences.modelName.toSet() AS ext-»
«LET lookupSymbol(ext, ext, "Service") AS service-»
    «IF service != null-»
        «LET javaLocalServiceInterface(service.name) AS serviceType»
        @SpringBean(name = "«service.name.toFirstLower()»Service")
        protected static «serviceType» service«serviceType»;
        
        public static «serviceType» get«serviceType»() {
            return service«serviceType»;
        }
        «FOREACH this.externalReferences.typeSelect(DtoReference) AS extDto»
            «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
            «IF (dto != null) && (getPropertyValue(dto, "dtoType") == "BusinessClassDto" )»
                «LET findSpecialMethodInService(dto.name, "UPDATE", service.name) AS updateService»
                «IF updateService != null »
                    public static «dto.name» update(«dto.name» dto){
                        return service«serviceType».«updateService»(dto);
                    }
                «ENDIF»
                «ENDLET»
                «LET findSpecialMethodInService(dto.name, "Create", service.name) AS createService»
                «IF createService != null »
                    public static «dto.name» create(«dto.name» dto){
                        return service«serviceType».«createService»(dto);
                    }
                «ENDIF»
                «ENDLET»
                «LET findSpecialMethodInService(dto.name, "DELETE", service.name) AS deleteService»
                «IF deleteService != null »
                    public static void delete(«dto.name» dto){
                        service«serviceType».«deleteService»(dto);
                    }
                «ENDIF»
                «ENDLET»
                «LET findSpecialMethodInService(dto.name, "READ", service.name) AS readService»
                «IF readService != null »
                    public static «dto.name» read«dto.name»(long id){
                        return service«serviceType».«readService»(id);
                    }
                «ENDIF»
                «ENDLET»
            «ENDIF»
            «ENDLET»
        «ENDFOREACH»
        
        public static AbstractDto create(AbstractDto dto) {
        «FOREACH this.externalReferences AS extDto»
            «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
            «IF (dto != null) && (getPropertyValue(dto, "dtoType") == "BusinessClassDto" )»
               if( dto instanceof «dto.name» ){
                   return «getPresentationServiceFacadeClass()».create( («dto.name»)dto );
               }
            «ENDIF»
            «ENDLET»
        «ENDFOREACH»
            return null;
        }

        public static AbstractDto update(AbstractDto dto) {
        «FOREACH this.externalReferences AS extDto»
            «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
            «IF (dto != null) && (getPropertyValue(dto, "dtoType") == "BusinessClassDto" )»
               if( dto instanceof «dto.name» ){
                   return «getPresentationServiceFacadeClass()».update( («dto.name»)dto );
               }
            «ENDIF»
            «ENDLET»
        «ENDFOREACH»
            return null;
        }

        public static AbstractDto read(AbstractDto dto) {
        «FOREACH this.externalReferences AS extDto»
            «LET lookupSymbol(extDto.modelName, extDto.name, "Dto") AS dto-»
            «IF (dto != null) && (getPropertyValue(dto, "dtoType") == "BusinessClassDto" )»
               if( dto instanceof «dto.name» ){
                   return «getPresentationServiceFacadeClass()».read«dto.name»( dto.getId() );
               }
            «ENDIF»
            «ENDLET»
        «ENDFOREACH»
            return null;
        }

        «ENDLET»
    «ENDIF-»
«ENDLET-»
«ENDFOREACH-»


    public  «getPresentationServiceFacadeClass()»() {
    }

    
}
«ENDDEFINE»
