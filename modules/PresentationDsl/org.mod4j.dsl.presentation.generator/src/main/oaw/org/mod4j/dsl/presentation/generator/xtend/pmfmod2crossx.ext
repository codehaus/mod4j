/* 
   This file contains the code to create a Crossx model from a BusinesDomainDsl model.
   Needed for crosssreference purposes.
*/
import crossx;
import PresentationDsl;

extension org::mod4j::dslcommon::xtend::generatorutil;
extension org::mod4j::crossx::broker::xtend::Crossx;

create ModelInfo exportModel(PresentationModel pmfModel, String modelFile) :
    print("MOD4J INFO: Running CrossX on file [" + modelFile + "]")->
    this.setDslname("PresentationDsl")->
    this.setModelname(pmfModel.name)->
    this.setResource(modelFile)->
    this.symbols.addAll(pmfModel.elements.typeSelect(ContentForm).toElementForm())->
    this.symbols.addAll(pmfModel.elements.typeSelect(Process).toElementProcess());
//    this.symbols.addAll(pmfModel.elements.typeSelect(Link).toElement());
    
Symbol toElementForm(ContentForm d) :
    let result = new Symbol :
    result.setName(d.name) ->
    result.setType("Form")->
    result.properties.add( newProperty("dialogueType", d.metaType.name.simpleName()))->
    result.properties.add( newProperty("context", d.contextRef.name))->
    result.properties.add( newProperty("isCollectionContext", d.collectionContext.toString()))->
    result
    ;

Symbol toElementProcess(Process process) :
    let result = new Symbol :
    result.setName(process.name) ->
    result.setType("Process")->
    result.properties.add( newProperty("dialogueType", process.metaType.name.simpleName()))->
    result.properties.add( newProperty("context", process.contextRef.name))->
    result.properties.add( newProperty("isCollectionContext", process.collectionContext.toString()))->
    result.properties.add( newProperty("processType", process.type.toString()) )->
    result
    ;
