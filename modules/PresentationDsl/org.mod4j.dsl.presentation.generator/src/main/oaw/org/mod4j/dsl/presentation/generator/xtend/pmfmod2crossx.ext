/* 
   This file contains the code to create a Crossx model from a BusinesDomainDsl model.
   Needed for crosssreference purposes.
*/
import crossx;
import PresentationDsl;

extension org::mod4j::dslcommon::xtend::generatorutil;
extension org::mod4j::crossx::broker::xtend::Crossx;

create ModelInfo exportModel(PresentationModel pmfModel, String modelFile) :
    print("MOD4J INFO: Running CrossX on file [" + modelFile + "]")->
    this.setDslname("PresentationDsl")->
    this.setModelname(pmfModel.name)->
    this.setResource(modelFile)->
    this.symbols.addAll(pmfModel.elements.typeSelect(Dialogue).toElement());
//    this.symbols.addAll(pmfModel.elements.typeSelect(Link).toElement());
    
Symbol toElement(Dialogue d) :
    let result = new Symbol :
    result.setName(d.name) ->
    result.setType("Dialogue")->
    result.properties.add( newProperty("dialogueType", d.metaType.name.simpleName()))->
    result.properties.add( newProperty("context", d.contextRef.name))->
    result
    ;

Symbol toElement(Expression l) :
	null;

/*	
Symbol toElement(LinkStep ls) :
    let result = new Symbol :
    result.setName(ls.name) ->
    result.setType("Link")->
    result.properties.add( newProperty("linkType", ls.metaType.name.simpleName()))->
    result.properties.add( newProperty("context", ls.contextRef.name))->
    (ls.getTarget() != null ? result.properties.add( newProperty("target", ls.getTarget().name)) : null)->
    result
    ;
*/
/*
Symbol toElement(LinkPath lp) :
    let result = new Symbol :
    result.setName(lp.name) ->
    result.setType("Link")->
    result.properties.add( newProperty("linkType", lp.metaType.name.simpleName()))->
    result.properties.add( newProperty("context", lp.contextRef.name))->
    (lp.getTarget() != null ? result.properties.add( newProperty("target", lp.getTarget().name)) : null)->
    result
    ;
  */  