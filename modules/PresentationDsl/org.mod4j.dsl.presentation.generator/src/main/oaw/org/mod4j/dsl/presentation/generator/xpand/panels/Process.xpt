«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

 
«DEFINE GenerateProcess FOR Process -»
«LET this.processElements.referredContentForm().select(f | f.isCollection).first() AS form»
«LET this.processElements.typeSelect(DialogueCall).select(dia | dia.contextExp != null).first() AS dialogueCallWithContext»
«LET this.processElements.referredContentForm().select(f | ! f.isCollection).first() AS nonCollectionForm»
«LET this.processElements.typeSelect(DialogueCall).first() AS dialogueCall»
	«IF (form != null) && (dialogueCallWithContext != null) && (this.type == ProcessType::CUSTOM) »
	    «EXPAND GenerateProcessWithListForm(form, dialogueCallWithContext) FOR this»
    «ELSEIF (dialogueCall == null) && (dialogueCallWithContext == null) »
        «EXPAND GenerateBatchProcess FOR this»
    «ELSE»
        «EXPAND GenerateProcessWithSingleForm(nonCollectionForm, dialogueCall) FOR this»
	«ENDIF»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»

«ENDDEFINE»

«REM» Generate code for process witrjh a diaologuecall that is a collection and has a context expression
«ENDREM»
«DEFINE GenerateProcessWithListForm(ContentForm form, DialogueCall dialogueCall) FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateProcessWithListForm in Process.xpt") FOR this»
«LET getServiceExpression(dialogueCall) AS serviceExpression»
«LET getNavigationExpression(dialogueCall) AS navigationExpression»
«LET dialogueCall.arguments.typeSelect(ServiceExpression).selectFirst(e|e.name == "update") AS updateService2»
«LET dialogueCall.arguments.typeSelect(ServiceExpression).selectFirst(e|e.name == "create") AS createService2»
«LET this.services.selectFirst(e|e.name == "update") AS updateService»
«LET this.services.selectFirst(e|e.name == "create") AS createService»
package «getPresentationRootPackage()».processes;

«IF serviceExpression != null»
	import «javaLocalServiceInterfacePath(serviceExpression.serviceName)» ;
	import «getPresentationRootPackage()».panels.«getWicketServiceDataProviderClass(form.contextRef.name)» ;
«ELSEIF navigationExpression != null»
	«LET getResultType(this.contextRef.modelName, this.contextRef.name, navigationExpression) AS resultType» 
	import «getPresentationRootPackage()».panels.«getWicketNavigationDataProviderClass(this.contextRef.name, resultType)»; 
	import «javaLocalServiceInterfacePath(updateService2.serviceName)» ;
	import «javaDtoClassPath(form.contextRef.name)»;
	«ENDLET»
«ELSE»
    // no service expression, must bne a navugation
«ENDIF»

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
«REM»«IF ! this.processElements.typeSelect(DialogueCall).isEmpty»«ENDREM»
import «getPresentationRootPackage()».pages.«this.name»«dialogueCall.name»Page;
«REM»«ENDIF»«ENDREM»
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».panels.ServiceDataProvider;

import java.util.List;
import java.util.ArrayList;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

public class «this.name»Process extends Page implements PmfProcess<«this.contextRef.name»> 
{
    «IF (serviceExpression != null) »
		@SpringBean(name = "«serviceExpression.serviceName»Service")
	    «javaLocalServiceInterface(serviceExpression.serviceName)» service;
	 «ELSEIF navigationExpression != null »
		@SpringBean(name = "«updateService2.serviceName»Service")
	    «javaLocalServiceInterface(updateService2.serviceName)» service;
	 «ELSE»
	     // TODO: this should not happen, both service and navigation expressions are empty
	 «ENDIF»

	«IF (this.type == ProcessType::SAVE)»
		@SpringBean(name = "«updateService.serviceName»Service")
	    «javaLocalServiceInterface(updateService.serviceName)» updateService;
	    
		@SpringBean(name = "«createService.serviceName»Service")
	    «javaLocalServiceInterface(createService.serviceName)» createService;
	«ENDIF»
    public Page nextPage(«this.contextRef.name» element) {
	// CUSTOM
	    «IF serviceExpression != null »
			«getWicketServiceDataProviderClass(form.contextRef.name)» provider = new «getWicketServiceDataProviderClass(form.contextRef.name)»(service);
			«this.name»«form.name»Page page = new «this.name»«form.name»Page(this, provider);
			page.setProcess(this);
			return page;
		«ELSEIF navigationExpression != null»
			«LET this.contextRef AS context»	   
			«LET getResultType(context.modelName, context.name, navigationExpression) AS resultType» 
			«LET getWicketNavigationDataProviderClass(this.contextRef.name, resultType) AS provider» 
			List<«resultType»> newElements = new ArrayList<«resultType»>();
			newElements.addAll(element.get«navigationExpression.references.first().name.toFirstUpper()»());	    

			«provider» provider = new «provider»(service, element);
			«this.name»«form.name»Page page = new «this.name»«form.name»Page(this, provider);
			page.setProcess(this);
			return page;
			«ENDLET»
			«ENDLET»
			«ENDLET»
		«ELSE»
			// TODO: this should not happen: no cotxt expressio n for dialogue of process «this.name»
			// «form.name»
			// «navigationExpression»
			// «serviceExpression»
			// «dialogueCall»
			// «dialogueCall.contextExp»
		«ENDIF»
	}
	
	«IF this.type == ProcessType::SAVE»
		public void run(«this.contextRef.name» element) {
		    saveAction(element);
		}
	
		private void saveAction(«this.contextRef.name» element) {
		try {
			if (element.getId() == null) { // new element
				createService.«createService.serviceMethod»(element);
			} else { // existing element
				updateService.«updateService.serviceMethod»(element);
			}
		} catch (Exception e) {
			error(e.getMessage());
//			log.error("", e);
		}
	}
	«ENDIF»
	
	public void done(Page page){
	}
	protected Page owningPage = null;
	
	public Page getOwningPage() {
	    return owningPage;
	}
	public void setOwningPage(Page page) {
		owningPage = page;
	}

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«REM» Generate code for process with a diaologuecall that is a not collection 
«ENDREM»
«DEFINE GenerateProcessWithSingleForm(ContentForm form, DialogueCall dialogueCall) FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateProcessWithSingleForm in Process.xpt") FOR this»
«LET getServiceExpression(dialogueCall) AS serviceExpression»
«LET getNavigationExpression(dialogueCall) AS navigationExpression»
«LET getWicketServiceDataProviderClass(form.contextRef.name) AS provider»
package «getPresentationRootPackage()».processes;

    «IF serviceExpression != null»
		import «javaLocalServiceInterfacePath(serviceExpression.serviceName)» ;
    «ELSEIF navigationExpression != null»
	 «ELSE»
	     // no service expression, must bne a navugation
	 «ENDIF»

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
«IF ! (dialogueCall == null)»
import «getPresentationRootPackage()».pages.«this.name»«dialogueCall.name»Page;
«ENDIF»
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».panels.ServiceDataProvider;
«IF serviceExpression != null»
// import «getPresentationRootPackage()».panels.«provider»;
«ELSEIF navigationExpression != null»
«ELSE»
import «getPresentationRootPackage()».panels.Mod4jDataProvider;
«ENDIF»

import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

public class «this.name»Process extends Page implements PmfProcess<«this.contextRef.name»> 
{
    «IF (serviceExpression != null) »
		@SpringBean(name = "«serviceExpression.serviceName»Service")
	    «javaLocalServiceInterface(serviceExpression.serviceName)» service;
	    
		    
	 «ELSEIF navigationExpression != null »
	 «ELSE»
	    private Mod4jDataProvider<«form.contextRef.name»> provider = null;

		public Mod4jDataProvider<«form.contextRef.name»> getProvider() {
			return provider;
		}
	
		public void setProvider(Mod4jDataProvider<«form.contextRef.name»> provider) {
			this.provider = provider;
		}
	 «ENDIF»

    public Page nextPage(«this.contextRef.name» element) {
	«IF this.type == ProcessType::NEW»
	// NEW
		«this.contextRef.name» newDto = provider.newDto();
		«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page(
				this, new CompoundPropertyModel<«this.contextRef.name»>(newDto));
		page.setProvider(provider);
		page.setProcess(this);
		page.editOn(true);
		return page;
	
	«ELSEIF this.type == ProcessType::SAVE»
	// SAVE
    	return null;
	«ELSEIF this.type == ProcessType::EDIT»
	// EDIT
	    // link to «navigationExpression.references»
	    «IF navigationExpression != null »
			«dialogueCall.referredContentForm().contextRef.name» newElement = element.get«navigationExpression.references.first().name»	    
			«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page (this,
			         new CompoundPropertyModel<«this.contextRef.name»>(newElement));
	    «ELSE»
			«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page (this,
			         new CompoundPropertyModel<«this.contextRef.name»>(element));
		«ENDIF»
		page.setProvider(provider);
		page.editOn(true);
		page.setProcess(this);
		return page;
	«ELSEIF this.type == ProcessType::REMOVE»
	// REMOVE
    	return null;
	«ELSEIF this.type == ProcessType::CANCEL»
	// CANCEL
    	return null;
	«ELSEIF this.type == ProcessType::CUSTOM»
		// CUSTOM default home page
		«getWicketHomePageClass()» page = new «getWicketHomePageClass()»();
		return page;
//    	return null;
	«ENDIF»
	}

	public void done(Page page){
	}
	protected Page owningPage = null;
	
	public Page getOwningPage() {
	    return owningPage;
	}
	public void setOwningPage(Page page) {
		owningPage = page;
	}

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«REM» Gebnerate for process w
«ENDREM»
«DEFINE GenerateBatchProcess FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateBatchProcess  in Process.xpt") FOR this»
«print("// Batch process")»
«LET this.services.selectFirst(e|e.name == "update") AS updateService»
«LET this.services.selectFirst(e|e.name == "create") AS createService»
«LET this.services.selectFirst(e|e.name == "delete") AS deleteService»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».panels.Mod4jDataProvider;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaDtoClassPath(this.contextRef.name)»;

«IF this.type == ProcessType::SAVE»
import «javaLocalServiceInterfacePath(updateService.serviceName)» ;
import «javaLocalServiceInterfacePath(createService.serviceName)» ;
«ENDIF»
«IF this.type == ProcessType::REMOVE»
import «javaLocalServiceInterfacePath(deleteService.serviceName)» ;
«ENDIF»
import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

// Batch process
public class «this.name»Process extends Page implements PmfProcess<«this.contextRef.name»> 
{
    private Mod4jDataProvider<«this.contextRef.name»> provider = null;

		public Mod4jDataProvider<«this.contextRef.name»> getProvider() {
		return provider;
	}

	public void setProvider(Mod4jDataProvider<«this.contextRef.name»> provider) {
		this.provider = provider;
	}

    public Page nextPage(«this.contextRef.name» element) {
    	return null;
	}
	
	«IF this.type == ProcessType::SAVE»
		public void run(«this.contextRef.name» element) {
		    saveAction(element);
		}
	
		private void saveAction(«this.contextRef.name» element) {
		    provider.saveDto(element);
		}
	«ELSEIF this.type == ProcessType::REMOVE »
		public void run(«this.contextRef.name» element) {
			deleteAction(element);
    	}

		private void deleteAction(«this.contextRef.name» element) {
			try {
				provider.deleteDto(element);
			} catch (Exception e) {
				error(e.getMessage());
			}
		}
	«ELSE»
		public void run(«this.contextRef.name» element) {
			// TODO: Implement run action for batch process
    	}
	«ENDIF»
	public void done(Page page){
	}
	
	protected Page owningPage = null;
	
	public Page getOwningPage() {
	    return owningPage;
	}
	public void setOwningPage(Page page) {
		owningPage = page;
	}
}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»


«DEFINE GeneratePmfProcess FOR PresentationModel -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

import org.apache.wicket.Page;

/**
 * @param <T> The context type of the process
 */
public interface PmfProcess <T> {
	
	public Page nextPage(T o);
	
	public void done(Page page);

	public Page getOwningPage();
	
	public void setOwningPage(Page page);

}
«ENDDEFINE»