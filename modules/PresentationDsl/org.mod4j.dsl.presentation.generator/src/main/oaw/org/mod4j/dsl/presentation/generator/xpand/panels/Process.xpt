«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

 
«DEFINE GenerateProcess FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: Process.xpt") FOR this»
«LET this.processElements.typeSelect(DialogueCall).first() AS dia»
«LET this.processElements.referredContentForm().select(f | f.isCollection).first() AS form»
«LET this.processElements.typeSelect(LinkedDialogueCall) AS linkedDialogueCall»
«LET getLinkService(dia) AS linkService»
«LET getLinkNavigation(dia) AS linkNavigation»
package «getPresentationRootPackage()».processes;

«IF (form != null) && (linkedDialogueCall != null) »
    «IF linkService != null»
import «javaLocalServiceInterfacePath(linkService.serviceName)» ;
	 «ELSE»
	     // linkServive == null
	 «ENDIF»
«ENDIF» 

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
«IF ! this.processElements.typeSelect(DialogueCall).isEmpty»
import «getPresentationRootPackage()».pages.«dia.name»Page;
«ENDIF»
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».panels.ServiceDataProvider;

import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

public class «this.name»Process extends Page implements PmfProcess<«this.contextRef.name»> 
{
//	@SpringBean(name = "breakfastService")
//	private BreakfastLocalService service;
	«IF (form != null) && (linkedDialogueCall != null) »
	    «IF (linkService != null) && !(linkService.name == "")»
			@SpringBean(name = "«linkService.serviceName»Service")
		    «javaLocalServiceInterface(linkService.serviceName)» service;
		 «ELSEIF linkNavigation != null »
		 «ELSE»
		     // no links to traverse
		 «ENDIF»
    «ENDIF» 
	

    public Page nextPage(«this.contextRef.name» element) {
	«IF this.type == ProcessType::NEW»
	// NEW
		«dia.name»Page page = new «dia.name»Page (
		         new CompoundPropertyModel<«this.contextRef.name»>(element));
		page.editOn(true);
		return page;
	«ELSEIF this.type == ProcessType::SAVE»
	// SAVE
    	return null;
	«ELSEIF this.type == ProcessType::EDIT»
	// EDIT
	    // link to «linkNavigation.references»
	    «IF linkNavigation != null »
			«dia.referredContentForm().contextRef.name» newElement = element.get«linkNavigation.references.first().name»	    
			«dia.name»Page page = new «dia.name»Page (
			         new CompoundPropertyModel<«this.contextRef.name»>(newElement));
	    «ELSE»
			«dia.name»Page page = new «dia.name»Page (
			         new CompoundPropertyModel<«this.contextRef.name»>(element));
		«ENDIF»
		page.editOn(true);
		return page;
	«ELSEIF this.type == ProcessType::REMOVE»
	// REMOVE
    	return null;
	«ELSEIF this.type == ProcessType::CANCEL»
	// CANCEL
    	return null;
	«ELSEIF this.type == ProcessType::CUSTOM»
	// CUSTOM
		«IF (form != null) && (linkedDialogueCall != null) »

		    «IF linkService != null »
			ServiceDataProvider<«javaLocalServiceInterface(linkService.serviceName)», «this.contextRef.name»> dataProvider =
			    new ServiceDataProvider<«javaLocalServiceInterface(linkService.serviceName)», «this.contextRef.name»>(
					service, "«linkService.serviceMethod»", "count«businessClassName(form)»s");
	
				«form.name»Page page = new «form.name»Page(dataProvider);
				return page;
			«ELSEIF linkNavigation != null»
				«LET this.contextRef AS context»	    
				List<«getResultType(context.modelName, context.name, linkNavigation)»> newElements = element.get«linkNavigation.references.first().name»();	    
				«form.name»Page page = new «form.name»Page (new ListDataProvider<«this.contextRef.name»>(newElements));
				return page;
				«ENDLET»
			«ELSE»
			// ??? «this.name»
			// «form.name»
			// «linkNavigation»
			// «dia»
			// «linkedDialogueCall.link»
			«ENDIF»
		
	    «ELSE»
			«getWicketHomePageClass()» page = new «getWicketHomePageClass()»();
			return page;
	//    	return null;
		«ENDIF»
	«ENDIF»
	}
}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«DEFINE GeneratePmfProcess FOR PresentationModel -»
package «getPresentationRootPackage()».processes;

import org.apache.wicket.Page;

public interface PmfProcess <T> {
	
	public Page nextPage(T o);

}
«ENDDEFINE»