«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

 
«DEFINE GenerateProcess FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: Process.xpt") FOR this»
«LET this.processElements.referredContentForm().select(f | f.isCollection).first() AS form»
«LET this.processElements.typeSelect(DialogueCall).select(dia | dia.context != null).first() AS dialogueCallWithContext»
«LET this.processElements.referredContentForm().select(f | ! f.isCollection).first() AS nonCollectionForm»
«LET this.processElements.typeSelect(DialogueCall).first() AS dialogueCall»
	«IF (form != null) && (dialogueCallWithContext != null) && (this.type == ProcessType::CUSTOM) »
	    «EXPAND GenerateProcessWithListForm(form, dialogueCallWithContext) FOR this»
    «ELSE»
        «EXPAND GenerateProcessWithSingleForm(nonCollectionForm, dialogueCall) FOR this»
	«ENDIF»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»

«ENDDEFINE»

«REM» Generate code for process witrjh a diaologuecall that is a collection and has a context expression
«ENDREM»
«DEFINE GenerateProcessWithListForm(ContentForm form, DialogueCall dialogueCall) FOR Process -»
«LET getServiceExpression(dialogueCall) AS serviceExpression»
«LET getNavigationExpression(dialogueCall) AS navigationExpression»
package «getPresentationRootPackage()».processes;

    «IF serviceExpression != null»
		import «javaLocalServiceInterfacePath(serviceExpression.serviceName)» ;
	 «ELSE»
	     // no service expression, must bne a navugation
	 «ENDIF»

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
«REM»«IF ! this.processElements.typeSelect(DialogueCall).isEmpty»«ENDREM»
import «getPresentationRootPackage()».pages.«this.name»«dialogueCall.name»Page;
«REM»«ENDIF»«ENDREM»
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».panels.ServiceDataProvider;

import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

public class «this.name»Process extends Page implements PmfProcess<«this.contextRef.name»> 
{
//	@SpringBean(name = "breakfastService")
//	private BreakfastLocalService service;
    «IF (serviceExpression != null) »
		@SpringBean(name = "«serviceExpression.serviceName»Service")
	    «javaLocalServiceInterface(serviceExpression.serviceName)» service;
	 «ELSEIF navigationExpression != null »
	 «ELSE»
	     // TODO: this should not happen, both service and navigation expressions are empty
	 «ENDIF»

    public Page nextPage(«this.contextRef.name» element) {
	// CUSTOM
	    «IF serviceExpression != null »
			ServiceDataProvider<«javaLocalServiceInterface(serviceExpression.serviceName)», «this.contextRef.name»> dataProvider =
		    	new ServiceDataProvider<«javaLocalServiceInterface(serviceExpression.serviceName)», «this.contextRef.name»>(
					service, "«serviceExpression.serviceMethod»", "count«businessClassName(form)»s");

			«this.name»«form.name»Page page = new «this.name»«form.name»Page(dataProvider);
			return page;
		«ELSEIF navigationExpression != null»
			«LET this.contextRef AS context»	    
			List<«getResultType(context.modelName, context.name, navigationExpression)»> newElements = element.get«navigationExpression.references.first().name»();	    
			«this.name»«form.name»Page page = new «this.name»«form.name»Page (new ListDataProvider<«this.contextRef.name»>(newElements));
			return page;
			«ENDLET»
		«ELSE»
			// TODO: this should not happen: no cotxt expressio n for dialogue of process «this.name»
			// «form.name»
			// «navigationExpression»
			// «serviceExpression»
			// «dialogueCall»
			// «dialogueCall.context»
		«ENDIF»
	}
}
«ENDLET»
«ENDLET»
«ENDDEFINE»

«REM» Generate code for process with a diaologuecall that is a not collection 
«ENDREM»
«DEFINE GenerateProcessWithSingleForm(ContentForm form, DialogueCall dialogueCall) FOR Process -»
«LET getServiceExpression(dialogueCall) AS serviceExpression»
«LET getNavigationExpression(dialogueCall) AS navigationExpression»
package «getPresentationRootPackage()».processes;

    «IF serviceExpression != null»
		import «javaLocalServiceInterfacePath(serviceExpression.serviceName)» ;
	 «ELSE»
	     // no service expression, must bne a navugation
	 «ENDIF»

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
«IF ! (dialogueCall == null)»
import «getPresentationRootPackage()».pages.«this.name»«dialogueCall.name»Page;
«ENDIF»
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».panels.ServiceDataProvider;

import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

public class «this.name»Process extends Page implements PmfProcess<«this.contextRef.name»> 
{
    «IF (serviceExpression != null) »
		@SpringBean(name = "«serviceExpression.serviceName»Service")
	    «javaLocalServiceInterface(serviceExpression.serviceName)» service;
	 «ELSEIF navigationExpression != null »
	 «ELSE»
	     // TODO: this should not happen, both service and navigation expressions are empty
	 «ENDIF»

    public Page nextPage(«this.contextRef.name» element) {
	«IF this.type == ProcessType::NEW»
	// NEW
		«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page (
		         new CompoundPropertyModel<«this.contextRef.name»>(element));
		page.editOn(true);
		return page;
	«ELSEIF this.type == ProcessType::SAVE»
	// SAVE
    	return null;
	«ELSEIF this.type == ProcessType::EDIT»
	// EDIT
	    // link to «navigationExpression.references»
	    «IF navigationExpression != null »
			«dialogueCall.referredContentForm().contextRef.name» newElement = element.get«navigationExpression.references.first().name»	    
			«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page (
			         new CompoundPropertyModel<«this.contextRef.name»>(newElement));
	    «ELSE»
			«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page (
			         new CompoundPropertyModel<«this.contextRef.name»>(element));
		«ENDIF»
		page.editOn(true);
		return page;
	«ELSEIF this.type == ProcessType::REMOVE»
	// REMOVE
    	return null;
	«ELSEIF this.type == ProcessType::CANCEL»
	// CANCEL
    	return null;
	«ELSEIF this.type == ProcessType::CUSTOM»
		// CUSTOM default home page
		«getWicketHomePageClass()» page = new «getWicketHomePageClass()»();
		return page;
//    	return null;
	«ENDIF»
	}
}
«ENDLET»
«ENDLET»
«ENDDEFINE»


«DEFINE GeneratePmfProcess FOR PresentationModel -»
package «getPresentationRootPackage()».processes;

import org.apache.wicket.Page;

public interface PmfProcess <T> {
	
	public Page nextPage(T o);

}
«ENDDEFINE»