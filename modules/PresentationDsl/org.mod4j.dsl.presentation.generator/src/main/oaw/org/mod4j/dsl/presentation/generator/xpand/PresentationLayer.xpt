«REM»
 Copyright (c) 2010 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::maven»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::panels»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::webapp»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::dataproviders» 
«IMPORT org::mod4j::dsl::presentation::generator::xpand::process» 
«IMPORT org::mod4j::dsl::presentation::generator::xpand::log4j»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»

«DEFINE Generate FOR PresentationModel»
    «print("MOD4J INFO: Running Presentation generator on model [" + this.name + "]")»
    
    «EXPAND PresentationLayerApplication::GenerateApplicationWide FOR this»
    «EXPAND DataProviders::GenerateDataProviders FOR this»
    
    «print("MOD4J INFO: Running Presentation generator panels")»
    «FOREACH this.elements.typeSelect(ContentForm).select(cf | ! cf.collectionContext) AS cf»
	    «print("MOD4J INFO: ContentForm [" + cf.name + "] isCollection [" + cf.collectionContext + "]")»
	    «EXPAND generatePanels FOR cf»
	«ENDFOREACH»
	    
    «print("MOD4J INFO: Running Presentation generator collection panels")»
	«FOREACH this.elements.typeSelect(ContentForm).select(c | c.collectionContext) AS cf»
		«REM»The CollectionPanel Java and HTML and properties file«ENDREM»
        «FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + cf.name.toFirstUpper() + "CollectionDataViewPanel"))»
            «EXPAND ObjectCollectionDataViewPanel::GenerateObjectCollectionDataViewPanel(true) FOR cf»
        «ENDFILE»
        «FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + cf.name.toFirstUpper() + "CollectionDataViewPanelOnly"))»
            «EXPAND ObjectCollectionDataViewPanel::GenerateObjectCollectionDataViewPanel(false) FOR cf»
        «ENDFILE»
        «FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + cf.name.toFirstUpper() + "CollectionDataViewPanel.html")»
            «EXPAND ObjectCollectionDataViewPanelHtml::GenerateObjectCollectionDataViewPanelHtml(true) FOR cf»
        «ENDFILE»
        «FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + cf.name.toFirstUpper() + "CollectionDataViewPanelOnly.html")»
            «EXPAND ObjectCollectionDataViewPanelHtml::GenerateObjectCollectionDataViewPanelHtml(false) FOR cf»
        «ENDFILE»
		«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + cf.name.toFirstUpper() + "CollectionDataViewPanel.properties")»
    	    «EXPAND FormProperties::GenerateProperties FOR cf»
		«ENDFILE»
	«ENDFOREACH»

    
    «print("MOD4J INFO: Running Presentation generator processes")»
    «FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".processes." + "PmfProcess"))»
        «EXPAND Process::GeneratePmfProcess FOR this»
    «ENDFILE»
    «FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationCommonPackage() + ".processes." + "ProcessType"))»
        «EXPAND ProcessType::ProcessType FOR this»
    «ENDFILE»
	«EXPAND Process::GenerateProcesses FOR this»
    
	«REM»The page containing the Dialogue referred to in the process«ENDREM»
    «print("MOD4J INFO: Running Presentation generator process pages")»
	«FOREACH this.elements.typeSelect(Process).select(e|e.isInteractive()) AS process»
        «FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".pages." + process.name.toFirstUpper() + "Page"))»
            «EXPAND ProcessPage::GeneratePage FOR process»
        «ENDFILE»
		«LET process.processElements.typeSelect(DialogueCall).first() AS dialogueCall»
		«LET dialogueCall.referredContentForm() AS form »
		«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/pages/" + process.name.toFirstUpper() + "Page.html")-»
    	    «EXPAND ProcessPageHtml::GenerateProcessPageHtml(form) FOR process-»
		«ENDFILE»
		«ENDLET»
		«ENDLET»
	«ENDFOREACH»

    «print("MOD4J INFO: Running Presentation generator Operations")»
    «FOREACH this.elements.typeSelect(Process) AS process»
	    «FOREACH process.processElements.select(call | call.condition != null).condition AS condition»
	        «LET javaPathFileName(getPresentationRootPackage() + ".operations." + "Operation" + condition.name ) AS filePath»
		    «IF shouldRegenerate(fullExtendPath(getPresentationModuleName(""),  filePath)) -»
		        «FILE extend( getPresentationModuleName(""), filePath)-»
		            «EXPAND Operation::generateOperation(process.contextRef.name) FOR condition»
		        «ENDFILE»
		    «ELSE»
		        «retain(getPresentationModuleName(""), filePath)»
	        «ENDIF» 
		    «ENDLET»
	    «ENDFOREACH»
    «ENDFOREACH»
    «LET javaPathFileName(getPresentationRootPackage() + ".operations.PmfOperation" ) AS filePath»
    «IF shouldRegenerate(fullExtendPath(getPresentationModuleName(""),  filePath)) -»
        «FILE extend( getPresentationModuleName(""), filePath)-»
            «EXPAND Operation::generatePmfOperation FOR this»
        «ENDFILE»
    «ELSE»
        «retain(getPresentationModuleName(""), filePath)»
    «ENDIF» 
    «ENDLET»
    «LET javaPathFileName(getPresentationRootPackage() + ".operations.AlwaysTrue" ) AS filePath»
    «IF shouldRegenerate(fullExtendPath(getPresentationModuleName(""),  filePath)) -»
        «FILE extend( getPresentationModuleName(""), filePath)-»
            «EXPAND Operation::generateAlwaysTrueOperation FOR this»
        «ENDFILE»
    «ELSE»
        «retain(getPresentationModuleName(""), filePath)»
    «ENDIF» 
    «ENDLET»
    	
    «print("MOD4J INFO: Running Presentation generator common")»
	«EXPAND PresentationLayerCommon::GenerateCommon FOR this»

    «print("MOD4J INFO: Running Presentation generator: log4j.properties for [" + this.name + "]")»
    «IF shouldRegenerate(fullExtendPath(getPresentationModuleName(""),  "log4j.properties")) -»
        «FILE extend( getPresentationModuleName(""), "log4j.properties" )-»
            «EXPAND Log4j::createLog4jProperties»
        «ENDFILE»
    «ELSE»
        «retain(getPresentationModuleName(""), "log4j.properties" )»
    «ENDIF»	
	
«ENDDEFINE» «REM»Generate«ENDREM»

«REM»
    Generation of Maven configuration files. 
«ENDREM»
«DEFINE generateMavenConfiguration FOR PresentationModel»
    «print("MOD4J INFO: Running Presentation Maven generator on model [" + this.name + "]")»
    «IF shouldRegenerate(getPresentationModulePath("") + "/pom.xml")»
        «FILE extend( getPresentationModuleName(""), "pom.xml" )-»
            «EXPAND PresentationModulePom::createPresentationModulePom»
        «ENDFILE»
    «ELSE»
        «retain(getPresentationModuleName(""), "pom.xml" )»
    «ENDIF»
«ENDDEFINE»

«REM»The ViewPanel Java and HTML and properties file«ENDREM»
«DEFINE generatePanels FOR ContentForm»
	«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + this.name.toFirstUpper() + "Panel"))»
	    «EXPAND ObjectPanel::GenerateObjectPanel FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name.toFirstUpper() + "Panel.html")»
	    «EXPAND ObjectPanelHtml::GenerateObjectPanelHtml FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name.toFirstUpper() + "Panel.properties")»
	    «EXPAND FormProperties::GenerateProperties FOR this»
	«ENDFILE»

		«REM»The Edit Panel Java and HTML and properties file«ENDREM»
	«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + this.name.toFirstUpper() + "EditPanel"))»
	    «EXPAND ObjectEditPanel::GenerateObjectEditPanel FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name.toFirstUpper() + "EditPanel.html")»
	    «EXPAND ObjectEditPanelHtml::GenerateObjectEditPanelHtml FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name.toFirstUpper() + "EditPanel.properties")»
	    «EXPAND FormProperties::GenerateProperties FOR this»
	«ENDFILE»
			
	«REM»The Compound Object Swap panel containing both the edit and view panels, Java and HTML«ENDREM»
	«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + this.name.toFirstUpper() + "SwapEditPanel"))»
	    «EXPAND ObjectSwapPanel::GenerateObjectSwapPanel FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name.toFirstUpper() + "SwapEditPanel.html")»
	    «EXPAND ObjectSwapPanelHtml::GenerateObjectSwapPanelHtml FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE generateListeners FOR ContentForm»

«ENDDEFINE»