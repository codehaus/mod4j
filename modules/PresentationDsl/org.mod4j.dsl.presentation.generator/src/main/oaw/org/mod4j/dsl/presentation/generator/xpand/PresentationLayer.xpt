«REM»
      Copyright (c) 2009 Ordina and committers to Mod4j
      All rights reserved. This program and the accompanying materials
      are made available under the terms of the Eclipse Public License v1.0
      which accompanies this distribution, and is available at
      http://www.eclipse.org/legal/epl-v10.html
     
      Contributors:
          Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::maven»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::panels»
«IMPORT org::mod4j::dsl::presentation::generator::xpand::webapp»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

«DEFINE Generate FOR PresentationModel»
    «print("MOD4J INFO: Running Presentation generator on model [" + this.name + "]")»
    
    «EXPAND PresentationLayerApplication::GenerateApplicationWide FOR this»
    
    «print("MOD4J INFO: Running Presentation generator panels")»
    «FOREACH this.elements.typeSelect(ContentForm).select(cf | ! cf.isCollection) AS cf»
	    «print("MOD4J INFO: ContentForm [" + cf.name + "] isCollection [" + cf.isCollection + "]")»
	    «EXPAND generatePanels FOR cf»
	«ENDFOREACH»
	    
    «print("MOD4J INFO: Running Presentation generator panallistener")»
    «FOREACH this.elements.typeSelect(ContentForm).select(cf | ! cf.isCollection) AS cf»
		«REM»ObjectPanelListener«ENDREM»	
		«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + cf.contextRef.name + "ListListener"))»
    	    «EXPAND ObjectPanelListener::GenerateObjectListener FOR cf»
		«ENDFILE»
	«ENDFOREACH»
		
    «print("MOD4J INFO: Running Presentation generator dataprovider")»
«REM»
    «FOREACH this.elements.typeSelect(ContentForm).select(cf | cf.isCollection) AS cf»
		«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + cf.contextRef.name + "DataProvider"))»
    	    «EXPAND DataProvider::GenerateDataProvider FOR cf»
		«ENDFILE»
	«ENDFOREACH»
«ENDREM»
	
    «print("MOD4J INFO: Running Presentation generator collection panels")»
	«FOREACH this.elements.typeSelect(ContentForm).select(c | c.isCollection) AS cf»
		«REM»The CollectionPanel Java and HTML and properties file«ENDREM»
		«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + cf.name + "CollectionDataViewPanel"))»
    	    «EXPAND ObjectCollectionDataViewPanel::GenerateObjectCollectionDataViewPanel FOR cf»
		«ENDFILE»
		«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + cf.name + "CollectionDataViewPanel.html")»
    	    «EXPAND ObjectCollectionDataViewPanelHtml::GenerateObjectCollectionDataViewPanelHtml FOR cf»
		«ENDFILE»
		«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + cf.name + "CollectionDataViewPanel.properties")»
    	    «EXPAND ContentFormProperties::GenerateProperties FOR cf»
		«ENDFILE»
	«ENDFOREACH»

    
    «print("MOD4J INFO: Running Presentation generator processes")»
	«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".processes." + "Pmf" + "Process"))»
	    «EXPAND Process::GeneratePmfProcess FOR this»
	«ENDFILE»
    «FOREACH this.elements.typeSelect(Process) AS p»
		«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".processes." + p.name + "Process"))»
    	    «EXPAND Process::GenerateProcess FOR p»
		«ENDFILE»
    «ENDFOREACH»
    
	«REM»The page containing the Dialogue referred to in the process«ENDREM»
    «print("MOD4J INFO: Running Presentation generator process pages")»
	«FOREACH this.elements.typeSelect(InteractiveProcess) AS process»
		«LET process.processElements.first() AS uiCall»
		«LET uiCall.referredContentForm() AS form »
		«IF form != null»
			«IF form.isCollection »
		    	«print("Collection page generated for process [" + process.name + "] form [" + form.name + "]")»
				«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".pages." + form.name + "Page"))»
		    	    «EXPAND ProcessPage::GenerateCollectionDialoguePage(form) FOR process»
				«ENDFILE»
			«ELSE»
		    	«print("Content page generated for process [" + process.name + "] form [" + form.name + "]")»
				«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".pages." + form.name + "Page"))»
		    	    «EXPAND ProcessPage::GenerateContentFormPage(form) FOR process»
				«ENDFILE»
			«ENDIF»
		«ELSE»
		    «print("No page generated for process [" + process.name + "] form [" + form.name + "]")»
        «ENDIF»
«REM»
		«IF uiCall.referredCollectionDialogue() != null»
			«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".pages." + process.name + "Page"))»
	    	    «EXPAND ProcessPage::GenerateCollectionDialoguePage FOR process»
			«ENDFILE»
		«ELSEIF uiCall.referredContentForm() != null»
			«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".pages." + process.name + "Page"))»
	    	    «EXPAND ProcessPage::GenerateContentFormPage FOR process»
			«ENDFILE»
		«ENDIF»
«ENDREM»
		«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/pages/" + form.name + "Page.html")»
    	    «EXPAND ProcessPageHtml::GenerateProcessPageHtml(form) FOR process»
		«ENDFILE»
		«ENDLET»
		«ENDLET»
	«ENDFOREACH»
	
    «print("MOD4J INFO: Running Presentation generator common")»
	«EXPAND PresentationLayerCommon::GenerateCommon FOR this»
«ENDDEFINE»

«REM»
    Generation of Maven configuration files. 
«ENDREM»
«DEFINE generateMavenConfiguration FOR PresentationModel»
    «print("MOD4J INFO: Running Presentation Maven generator on model [" + this.name + "]")»
    «IF shouldRegenerate(getPresentationModulePath("") + "/pom.xml")»
        «FILE extend( getPresentationModuleName(""), "pom.xml" )-»
            «EXPAND PresentationModulePom::createPresentationModulePom»
        «ENDFILE»
    «ELSE»
        «retain(getPresentationModuleName(""), "pom.xml" )»
    «ENDIF»
«ENDDEFINE»

«REM»The ViewPanel Java and HTML and properties file«ENDREM»
«DEFINE generatePanels FOR ContentForm»
	«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + this.name + "PanelWithListener"))»
	    «EXPAND ObjectPanel::GenerateObjectPanel FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name + "PanelWithListener.html")»
	    «EXPAND ObjectPanelHtml::GenerateObjectPanelHtml FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name + "PanelWithListener.properties")»
	    «EXPAND ContentFormProperties::GenerateProperties FOR this»
	«ENDFILE»

		«REM»The Edit Panel Java and HTML and properties file«ENDREM»
	«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + this.name + "EditPanelWithListener"))»
	    «EXPAND ObjectEditPanel::GenerateObjectEditPanel FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name + "EditPanelWithListener.html")»
	    «EXPAND ObjectEditPanelHtml::GenerateObjectEditPanelHtml FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name + "EditPanelWithListener.properties")»
	    «EXPAND ContentFormProperties::GenerateProperties FOR this»
	«ENDFILE»
			
	«REM»The Compound Object Swap panel containing both the edit and view panels, Java and HTML«ENDREM»
	«FILE generate(getPresentationModuleName(""), javaPathFileName(getPresentationRootPackage() + ".panels." + this.name + "SwapEditPanel"))»
	    «EXPAND ObjectSwapPanel::GenerateObjectSwapPanel FOR this»
	«ENDFILE»
	«FILE generate(getPresentationModuleName(""), getPresentationRootPackageAsPath() + "/panels/" + this.name + "SwapEditPanel.html")»
	    «EXPAND ObjectSwapPanelHtml::GenerateObjectSwapPanelHtml FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE generateListeners FOR ContentForm»

«ENDDEFINE»