«REM»
    Copyright (c) 2010 Ordina and committers to Mod4j
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
     
    Contributors:
        Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx»


«DEFINE ServiceDataProvider(String inContext) FOR ServiceExpression»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ServiceDataProvider.xpt") FOR this»
«LET serviceCallResultType(inContext, this) AS outContext»
«LET getWicketServiceDataProviderClass(outContext) AS classname»
«LET findServiceWithMethod(outContext, "UPDATE") AS updateServiceType»
«LET findSpecialMethodInService(outContext, "UPDATE", updateServiceType) AS updateService»
package «getPresentationRootPackage()».dataproviders;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Arrays;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.CompoundPropertyModel;
import «getPresentationServiceFacadeClassPath()»;
import «getPresentationCommonPackage()».processes.ProcessType;

import «javaLocalServiceInterfacePath(this.service.name)» ;
«IF this.service.name != updateServiceType»
import «javaLocalServiceInterfacePath(updateServiceType)» ;
«ENDIF»
import «javaDtoClassPath(inContext)»;
import «javaDtoClassPath(outContext)»;

/**
 * Dataprovider for service list which takes the list of objects from a service.
 */
@SuppressWarnings("serial")
public class «classname»
		implements
			IDataProvider<«outContext»>, Mod4jDataProvider<«outContext»> {
	private static final Log log = LogFactory.getLog(«classname».class);

    static protected Collection<ProcessType> processTypes = Arrays.asList(
        ProcessType.CUSTOM, ProcessType.EDIT, ProcessType.SAVE, ProcessType.CANCEL);

    public Collection<ProcessType> supportedProcesses() {
        return processTypes;
    }

    «javaLocalServiceInterface(this.service.name)» service;
    «javaLocalServiceInterface(updateServiceType)» updateService;
    private «inContext» context = null;
    private List<«outContext»> result = null;

	/**
	 * Create a new ServiceDataProvider 
	 * @param service The service from which the list and count is retrieved.
	 */
	public «classname»(«inContext» context) {
        this.service = «getPresentationServiceFacadeClass()».get«javaLocalServiceInterface(this.service.name)»();
        this.updateService = «getPresentationServiceFacadeClass()».get«javaLocalServiceInterface(updateServiceType)»();
		this.context = context;
	}

    private void getResult(){
        if( result == null ){
            result = service.«this.serviceMethod»(context);
            if( result == null ) {      // no result
                result = new ArrayList<«outContext»>();
            }
        }
    }

	@SuppressWarnings("unchecked")
	synchronized public Iterator iterator(int first, int count) {
        getResult();
        return result.subList(first, count).iterator();
	}

	public IModel<«outContext»> model(«outContext» object) {
		return new CompoundPropertyModel<«outContext»>(object);
	}

	synchronized public int size() {
        getResult();
        return result.size();
	}

	public void detach() {
	}

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»