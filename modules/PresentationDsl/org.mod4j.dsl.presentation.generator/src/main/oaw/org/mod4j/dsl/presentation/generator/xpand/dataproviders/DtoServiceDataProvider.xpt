«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx»


«DEFINE DtoServiceDataProvider FOR DialogueCall»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: DtoServiveProvider.xpt") FOR this»
«LET this.referredContentForm() AS form»
«LET arguments.typeSelect(ServiceExpression) AS serviceExpressions»
«LET serviceExpressions.selectFirst(e|e.name == "update") AS updateService»
«LET serviceExpressions.selectFirst(e|e.name == "create") AS createService»
«LET serviceExpressions.selectFirst(e|e.name == "delete") AS deleteService»
«LET serviceExpressions.selectFirst(e|e.name == "listall") AS listallService»
package «getPresentationRootPackage()».panels;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.CompoundPropertyModel;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;

import «javaLocalServiceInterfacePath(updateService.serviceName)» ;
import «javaDtoClassPath(form.contextRef.name)»;

/**
 * Dataprovider for service list which takes the list of objects from a service.
 */
@SuppressWarnings("serial")
public class «getWicketServiceDataProviderClass(form.contextRef.name)»
		implements
			IDataProvider<«form.contextRef.name»>, Mod4jDataProvider<«form.contextRef.name»> {
	private static final Log log = LogFactory.getLog(«getWicketServiceDataProviderClass(form.contextRef.name)».class);

    «javaLocalServiceInterface(updateService.serviceName)» service;

	/**
	 * Create a new ServiceDataProvider 
	 * @param service The service from which the list and count is retrieved.
	 */
	public «getWicketServiceDataProviderClass(form.contextRef.name)»() {
		this.service = «getWicketHomePageClass()».get«javaLocalServiceInterface(updateService.serviceName)»();
	}

	@SuppressWarnings("unchecked")
	synchronized public Iterator iterator(int first, int count) {
		List<«form.contextRef.name»> result = null;
		
		return service.«listallService.serviceMethod»(first, count).iterator();
	}

	public IModel<«form.contextRef.name»> model(«form.contextRef.name» object) {
		return new CompoundPropertyModel<«form.contextRef.name»>(object);
	}

	synchronized public int size() {
		Long result = service.count«businessClassName(form)»s();
		return result.intValue();
	}

	public void detach() {
	}

	public void deleteDto(«form.contextRef.name» toBeRemoved) {
		if (toBeRemoved.getId() == null) { // new element
			// nothing to do, does not exist in the datastore
		} else { // existing element
			service.«deleteService.serviceMethod»(toBeRemoved);
		}
	}

	public «form.contextRef.name» newDto() {
		return new «form.contextRef.name»();
	}

	public void saveDto(«form.contextRef.name» tobesaved) {
		try {
			if (tobesaved.getId() == null) { // new element
				service.«createService.serviceMethod»(tobesaved);
			} else { // existing element
				service.«updateService.serviceMethod»(tobesaved);
			}
		} catch (Exception e) {
		}
	}

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»