«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx»


«DEFINE DtoServiceDataProvider FOR DialogueCall»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: DtoServiveProvider.xpt") FOR this»
«LET this.referredContentForm() AS form»
«LET this.referredDialogue().contextRef.name AS context»
«LET findServiceWithMethod(context, "LISTALL") AS serviceType»
«LET findSpecialMethodInService(context, "UPDATE", serviceType) AS updateService»
«LET findSpecialMethodInService(context, "Create", serviceType) AS createService»
«LET findSpecialMethodInService(context, "DELETE", serviceType) AS deleteService»
«LET findSpecialMethodInService(context, "LISTALL", serviceType) AS listallService»
package «getPresentationRootPackage()».panels;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.CompoundPropertyModel;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;

import «javaLocalServiceInterfacePath(serviceType)» ;
import «javaDtoClassPath(context)»;

/**
 * Dataprovider for service list which takes the list of objects from a service.
 */
@SuppressWarnings("serial")
public class «getWicketServiceDataProviderClass(context)»
		implements
			IDataProvider<«context»>, Mod4jDataProvider<«context»> {
	private static final Log log = LogFactory.getLog(«getWicketServiceDataProviderClass(context)».class);

    «javaLocalServiceInterface(serviceType)» service;

	/**
	 * Create a new ServiceDataProvider 
	 * @param service The service from which the list and count is retrieved.
	 */
	public «getWicketServiceDataProviderClass(context)»() {
		this.service = «getWicketHomePageClass()».get«javaLocalServiceInterface(serviceType)»();
	}

	@SuppressWarnings("unchecked")
	synchronized public Iterator iterator(int first, int count) {
		List<«context»> result = null;
		
		return service.«listallService»(first, count).iterator();
	}

	public IModel<«context»> model(«context» object) {
		return new CompoundPropertyModel<«context»>(object);
	}

	synchronized public int size() {
		Long result = service.count«businessClassName(form)»s();
		return result.intValue();
	}

	public void detach() {
	}

	public void deleteDto(«context» toBeRemoved) {
		if (toBeRemoved.getId() == null) { // new element
			// nothing to do, does not exist in the datastore
		} else { // existing element
			service.«deleteService»(toBeRemoved);
		}
	}

	public «context» newDto() {
		return new «context»();
	}

	public void saveDto(«context» tobesaved) {
		try {
			if (tobesaved.getId() == null) { // new element
				service.«createService»(tobesaved);
			} else { // existing element
				service.«updateService»(tobesaved);
			}
		} catch (Exception e) {
		}
	}

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»