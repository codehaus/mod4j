«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

«DEFINE CompositeDataProvider FOR DialogueCall»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: CompositionDataProvider.xpt") FOR this»
«LET this.referredContentForm() AS form»
«LET form.contextRef.name AS context»
«LET this.process.contextRef.name AS ownerContext»
«LET getWicketCompositeDataProviderClass(this.process.contextRef.name,form.contextRef.name) AS className»
«LET findServiceWithMethod(ownerContext, "UPDATE") AS service»
«LET findSpecialMethodInService(ownerContext, "UPDATE", service) AS updateService»
«LET (NavigationExpression)contextExp AS navigationExpression»
«LET navigationExpression.references.first().name.toFirstUpper() AS navigationName»
«LET javaLocalServiceInterface(service) AS serviceType»
package «getPresentationRootPackage()».dataproviders;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Collection;
import java.util.Arrays;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;

import «getPresentationRootPackage()».processes.ProcessType;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaLocalServiceInterfacePath(service)»;
import «javaDtoClassPath(context)»;
import «javaDtoClassPath(ownerContext)»;

/**
 * Dataprovider for a list which is part of another object
 * 
 */
@SuppressWarnings("serial")
public class «className»
		extends ModelDataProvider<«context»>
		implements Mod4jDataProvider<«context»>
{
	private static final Log log = LogFactory.getLog(«className».class);

    static protected Collection<ProcessType> processTypes = Arrays.asList(
        ProcessType.CUSTOM, ProcessType.NEW, ProcessType.EDIT, ProcessType.DELETE, ProcessType.SAVE, ProcessType.CANCEL);

    public Collection<ProcessType> supportedProcesses() {
        return processTypes;
    }

    public «ownerContext»  getOwner() { return owner; }

	private «serviceType» service;
	private «ownerContext» owner = null;
	/**
	 * Create a new ServiceDataProvider 
	 * @param service The service from which the list and count is retrieved.
	 */
	public «className»(«ownerContext» owner) {
		super( new PropertyModel(new Model(owner), "«navigationName»")  );
		this.service = «getWicketHomePageClass()».get«serviceType»();
		this.owner = owner;
	}

	public «context» newDto(){
		«context» result = new «context»();
		return result;
	}
	
	public void deleteDto(«context» toBeRemoved){
		owner.removeFrom«navigationName»(toBeRemoved);
		owner = service.«updateService»(owner);
        this.setList( new PropertyModel(new Model(owner), "«navigationName»") );
	}
	
	public void saveDto(«context» tobesaved){
		owner.addTo«navigationName»(tobesaved);
		«ownerContext» result = service.«updateService»(owner);
		owner = result;
		this.setList( new PropertyModel(new Model(owner), "«navigationName»") );
	}
    
    public void addToDtoList(List<«context»> tobeadded) {
        throw new RuntimeException("Listprovider: no addToDtoList possible");
    }
    
    public void removeFromDtoList(List<«context»> toberemoved) {
        throw new RuntimeException("Listprovider: no removeFromDtoList possible");
    }    

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»