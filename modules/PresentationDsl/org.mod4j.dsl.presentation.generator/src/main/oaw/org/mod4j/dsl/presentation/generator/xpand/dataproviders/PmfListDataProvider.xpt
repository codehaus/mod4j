«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

«DEFINE PmfListDataProvider FOR PresentationModel»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: PmfListDataProvider .xpt") FOR this»
package «getPresentationRootPackage()».dataproviders;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Collection;
import java.util.Arrays;

import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import «getPresentationRootPackage()».processes.ProcessType;

@SuppressWarnings("serial")
public class PmfListDataProvider<T extends Serializable> extends ListDataProvider<T> implements Mod4jDataProvider<T>  {

    static protected Collection<ProcessType> processTypes = Arrays.asList(
        ProcessType.CUSTOM, ProcessType.EDIT, ProcessType.SAVE, ProcessType.CANCEL);

    public Collection<ProcessType> supportedProcesses() {
        return processTypes;
    }

    boolean all = false;
    public boolean isAll() {
        return all;
    }

    public void setAll(boolean all) {
        this.all = all;
    }

    private List<T> myList = null;
    
    public Object getOwner() { return null; }

    public PmfListDataProvider(List<T> list) {
        super(list);
        myList = list;
    }

    public void deleteDto(T toBeRemoved) {
        throw new RuntimeException("Listprovider: no delete possible");
    }

    public T newDto() {
        throw new RuntimeException("Listprovider: no new possible");
    }

    public void saveDto(T tobesaved) {
        throw new RuntimeException("Listprovider: no saveDto possible");
    }
    
    public void addToDtoList(List<T> tobeadded) {
        throw new RuntimeException("Listprovider: no addToDtoList possible");
    }
    
    public void removeFromDtoList(List<T> toberemoved) {
        throw new RuntimeException("Listprovider: no removeFromDtoList possible");
    }    
}


«ENDDEFINE»