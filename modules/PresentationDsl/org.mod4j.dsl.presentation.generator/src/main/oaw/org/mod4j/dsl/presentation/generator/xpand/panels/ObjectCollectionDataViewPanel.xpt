«REM»
 Copyright (c) 2010 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
 
«DEFINE GenerateObjectCollectionDataViewPanel(boolean withProcesses) FOR ContentForm -»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateObjectCollectionDataViewPanel.xpt") FOR this-»
«REM»«LET (ContentForm)(this.dialogues.first().referredElement) AS cf»«ENDREM»
«LET this.name.toFirstUpper() + "CollectionDataViewPanel"  +(withProcesses ? "" : "Only") AS className»
package «getPresentationRootPackage()».panels;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Collection;

import «javaDtoClassPath(this.contextRef.name)»;
«FOREACH this.formElements.dataProperty AS dp»
	«IF dp.isEnumeration»
	import «javaDtoClassPath(dp.dataType)»;
	«ENDIF»
«ENDFOREACH»

import «getPresentationRootPackage()».processes.PmfProcess;
«FOREACH this.processes.referredProcess() AS process»
import «getPresentationRootPackage()».processes.«process.javaClass()»;
«ENDFOREACH»
import «getPresentationCommonPackage()».processes.ProcessType;
«IF this.processes.referredProcess().exists(e|e.type == ProcessType::ADDTO)»
import «getPresentationRootPackage()».dataproviders.«getWicketListAllDataProviderClass(this.contextRef.name)»;
«ENDIF»
import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationCommonPackage()».ext.components.CheckBoxDtoModel;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationCommonPackage()».ext.components.ModalWindow;
import «getPresentationCommonPackage()».dataproviders.ModelBasedListDataProvider;
import «getPresentationCommonPackage()».ext.components.ListElementModel;

import org.apache.wicket.Page;
import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;
import org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator;
import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow.WindowClosedCallback;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Button;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.link.BookmarkablePageLink;
import org.apache.wicket.markup.html.link.Link;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.repeater.Item;
import org.apache.wicket.markup.repeater.OddEvenItem;
import org.apache.wicket.markup.repeater.data.DataView;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.model.ResourceModel;
import org.apache.wicket.util.convert.IConverter;

/**
 * A panel that shows a list of «this.contextRef.name», not editable.
 */
@SuppressWarnings("serial")
public class «className» extends Panel 
{
    «EXPAND dataView(withProcesses) FOR this»
    
    public List<«this.contextRef.name»> selectedElements = new ArrayList<«this.contextRef.name»>();
    
    protected «getWicketMasterPageClass()» page = null;

    protected «className» myself;
        
	protected DataView<«this.contextRef.name»> collection;

    public «className»(String id, IModel<«this.contextRef.name»> context, 
              Integer maxItemsPerPage, «getWicketMasterPageClass()» owner, boolean multiple)
    {
        this(id, context, maxItemsPerPage, owner, ProcessType.all(), multiple);
    }

    protected Mod4jDataProvider<«this.contextRef.name»> dataProvider;
    protected IModel model;
    protected WebMarkupContainer container ;
    protected boolean multiple = true;
    
    public «className»(String id, IModel<«this.contextRef.name»> context, 
              Integer maxItemsPerPage, «getWicketMasterPageClass()» owner, Collection<ProcessType> visibleProcesses , boolean multiple )
	{
	    super(id);
	    myself = this;
	    this.multiple = multiple;
	    this.model = context;
	    
        // Find the dataprovider
        Object object = model.getObject();
        if( object instanceof Mod4jDataProvider<?>){
            dataProvider = (Mod4jDataProvider<«this.contextRef.name»>)object;
        } else if( object instanceof Set<?> ) {
            dataProvider = new ModelBasedListDataProvider<«this.contextRef.name»>(model);
        }
	    
	    this.page = owner;
		container = (WebMarkupContainer)new WebMarkupContainer("container");
		container.setOutputMarkupId(true);
		collection = new «this.contextRef.name»DataView("breakfasts", dataProvider, visibleProcesses);
		collection.setItemsPerPage(maxItemsPerPage);
		container.add(collection);

        «IF withProcesses»
	        «FOREACH this.processes.select(pp| (pp.referredProcess() != null) && pp.referredProcess().type==ProcessType::NEW) AS pp»
	            «LET pp.referredProcess() AS process»
                    // New process 
					Link «process.name»Link = new Link<Object>("«process.name»") {
						@Override
						public void onClick() {
			                «process.javaClass()» process = new «process.javaClass()»(model);
			                process.setOwningPage((«getWicketMasterPageClass()»)this.getPage());
			                Page next = process.nextPage(null);
			                if (next != null) {
			                    setResponsePage(next);
			                }
						}
					};
	                add(«process.name»Link);
	                if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
	                    «process.name»Link.setEnabled(false);
	                }
				«ENDLET»
			«ENDFOREACH»
			
	        «FOREACH this.processes.select(pp| pp.referredProcess() != null) AS pp»
	            «LET pp.referredProcess() AS process»
	            «IF process.collectionContext »
	                «IF process.type == ProcessType::ADDTO»
	                    «LET process.processElements.typeSelect(DialogueCall).first().referredDialogue() AS dialogue»
                        // AddTo process 
                        Link «process.name»Link = new Link<Object>("«process.name»") {
                            @Override
                            public void onClick() {
	                            «process.javaClass()» process = new «process.javaClass()»(model);
	                            process.setOwningPage((«getWicketMasterPageClass()»)this.getPage());
	                            Page next = process.nextPage(null);
	                            if (next != null) {
	                                setResponsePage(next);
	                            }
/*
                                List<«this.contextRef.name»> dtoList = new ArrayList<«this.contextRef.name»>();
                                for (IModel<«this.contextRef.name»> dtoModel : selectedElements) {
                                    «this.contextRef.name» elem = dtoModel.getObject();
                                    dtoList .add(elem);
                                }
                                «process.javaClass()» process = new «process.javaClass()»(model);
                                process.setOwningPage((«getWicketMasterPageClass()») this.getPage());
                                process.run(dtoList);
                                selectedElements.clear();
*/
                            }
                        };
                        add(«process.name»Link);
                        if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
                            «process.name»Link.setEnabled(false);
                        }
/*
	                    final ModalWindow «process.name»Modal = new ModalWindow("«process.name»Modal");
				        «process.name»Modal.setTitle("«process.label»");
				        «process.name»Modal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
				        «process.name»Modal.setUseInitialHeight(true);
				        «process.name»Modal.setInitialHeight(400);
				        «process.name»Modal.setInitialWidth(600);
				        Close close = new Close(this.page);
                        «process.name»Modal.setWindowClosedCallback(close);
				        
				        «getWicketListAllDataProviderClass(this.contextRef.name)» all = new «getWicketListAllDataProviderClass(this.contextRef.name)»();
				        IModel newModel = new Model(all);
				        modalPanel = new «dialogue.name»CollectionDataViewPanelOnly("content", newModel, maxItemsPerPage, owner);
				        «process.name»Modal.setContent(modalPanel );
				        
					    AjaxFallbackLink «process.name»Link = new AjaxFallbackLink<Object>("«process.name»") {
					            @Override
					            public boolean isEnabled() {
					                return true;
					            }
					
					            @Override
					            public void onClick(AjaxRequestTarget target) {
					                «process.name»Modal.show(target);
					            }
					       };
	                        add(«process.name»Link);
	                        if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
                                «process.name»Link.setEnabled(false);
                                «process.name»Link.setVisible(false);
	                        }
    					    add(«process.name»Modal);
*/						        
	                    «ENDLET»
                    «ELSEIF ((process.type == ProcessType::REMOVEFROM) || (process.type == ProcessType::DELETE)) »
                        // RemoveFrom or Delete process on single instance
                        Link «process.name»Link = new Link<Object>("«process.name»") {
                            @Override
                            public void onClick() {
//				                List<«this.contextRef.name»> dtoList = new ArrayList<«this.contextRef.name»>();
//				                for (IModel<«this.contextRef.name»> dtoModel : selectedElements) {
//				                    «this.contextRef.name» elem = dtoModel.getObject();
//				                    dtoList.add(elem);
//				                }
				                «process.javaClass()» process = new «process.javaClass()»(model);
				                process.setOwningPage((«getWicketMasterPageClass()») this.getPage());
				                process.run(selectedElements);
				                selectedElements.clear();
				            }
				        };
                        add(«process.name»Link);
                        if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
                            «process.name»Link.setEnabled(false);
                        }
                    «ELSEIF process.isInteractive()»
	                    // Interactive process 
	                    Link «process.name»Link = new Link<Object>("«process.name»") {
	                        @Override
	                        public void onClick() {
	                            «process.javaClass()» process = new «process.javaClass()»(model);
	                            process.setOwningPage((«getWicketMasterPageClass()»)this.getPage());
	                            Page next = process.nextPage(null);
	                            if (next != null) {
	                                setResponsePage(next);
	                            }
	                        }
	                    };
	                    add(«process.name»Link);
	                    if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
	                        «process.name»Link.setEnabled(false);
	                    }
                    «ELSEIF ! process.isInteractive()»
                        // Not Interactive
		                Link «process.name»Link = new Link<Object>("«process.name»") {
		                    @Override
		                    public void onClick() {
//			                    List<«this.contextRef.name»> dtoList = new ArrayList<«this.contextRef.name»>();
//			                    for (IModel<«this.contextRef.name»> dtoModel : selectedElements) {
//			                        «this.contextRef.name» elem = dtoModel.getObject();
//			                        dtoList .add(elem);
//			                    }
                                «process.javaClass()» process = new «process.javaClass()»(model);
                                process.setOwningPage((«getWicketMasterPageClass()») this.getPage());
                                process.run(selectedElements);
                                selectedElements.clear();
		                    }
		                };
		                add(«process.name»Link);
		                if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
		                    «process.name»Link.setEnabled(false);
		                }
		            «ENDIF» 
	            «ENDIF»
	            «ENDLET»
	        «ENDFOREACH»
	    «ELSE» «REM» not withProcesses «ENDREM»
«REM»	    
            «FOREACH this.processes.select(pp| (pp.referredProcess() != null) && pp.referredProcess().type==ProcessType::ADDTO) AS pp»
                «LET pp.referredProcess() AS process»
«ENDREM»
                    Link addLink = new Link<Object>("addLink") {
                        @Override
                        public void onClick() {
//			                List<«this.contextRef.name»> dtoList = new ArrayList<«this.contextRef.name»>();
//			                for (IModel<«this.contextRef.name»> dtoModel : selectedElements) {
//			                    «this.contextRef.name» elem = dtoModel.getObject();
//			                    dtoList.add(elem);
//			                }
			                PmfProcess process = myself.page.getProcess();
			                process.add(selectedElements);
			                selectedElements.clear();
                        }
                    };
                    add(addLink);
«REM»
                «ENDLET»
            «ENDFOREACH»
«ENDREM»	        
        «ENDIF»		
		add(container);
		add(new AjaxPagingNavigator("navigator",collection));
//		add(new BookmarkablePageLink<Object>("edit",BreakfastsEditPage.class));
	}
	
	«IF withProcesses»
	    «FOREACH this.processes.select(pp| pp.referredProcess() != null) AS pp»
	        «LET pp.referredProcess() AS process»
	        «IF process.collectionContext »
	            «IF (process.type == ProcessType::ADDTO) || (process.type == ProcessType::LINK) »
	                «LET process.processElements.typeSelect(DialogueCall).first().referredDialogue() AS dialogue»
	                	«dialogue.name»CollectionDataViewPanelOnly modalPanel = null ;
	                «EXPAND closeClass(process) FOR this»    
	                «ENDLET»
	            «ENDIF»
	        «ENDIF»
	        «ENDLET»
	    «ENDFOREACH»
	«ENDIF»
}
«ENDLET»
«ENDDEFINE»

«DEFINE closeClass(Process process) FOR ContentForm»
/*
class Close implements WindowClosedCallback  {

    «getWicketMasterPageClass()» page ;
    public Close(«getWicketMasterPageClass()» owner){
        page = owner;
    }
    
    public void onClose(AjaxRequestTarget target) {
        List<«this.contextRef.name»> dtoList = new ArrayList<«this.contextRef.name»>();
        for (IModel<«this.contextRef.name»> dtoModel : modalPanel.selectedElements) {
            «this.contextRef.name» elem = dtoModel.getObject();
            dtoList.add(elem);
        }
        «process.javaClass()» process = new «process.javaClass()»(model);
        process.setOwningPage( page);
        process.run(dtoList);
        target.addComponent(container);
    }
}
*/
«ENDDEFINE»

«DEFINE dataView(boolean withProcesses) FOR ContentForm»
	private class «this.contextRef.name»DataView extends	DataView<«this.contextRef.name»> {
		private «this.contextRef.name»DataView(String id, Mod4jDataProvider<«this.contextRef.name»> dataProvider, Collection<ProcessType> visibleProcesses) {
			super(id, dataProvider);
			this.visibleProcesses = visibleProcesses;
		}

        protected Collection<ProcessType> visibleProcesses;
        
		@Override
		protected void populateItem(final Item<«this.contextRef.name»> item)
		{
			item.setModel(new CompoundPropertyModel<«this.contextRef.name»>(item.getModelObject()));
			
			 CheckBoxDtoModel checkBoxModel =  new CheckBoxDtoModel<«this.contextRef.name»>(selectedElements, item.getModel().getObject() );
			 checkBoxModel.setMultiple(multiple);
	         AjaxCheckBox selected = new AjaxCheckBox("selected", checkBoxModel) {
                @Override
                protected void onUpdate(AjaxRequestTarget target) {
                  target.addComponent(myself);
 //                 target.addComponent(delete);
                }
            };
           item.add(selected);
			
			Link<«this.contextRef.name»> link = 
				new Link<«this.contextRef.name»>("view",item.getModel())
				{
					@Override
					public void onClick()
					{
//						setResponsePage(new BreakfastPage(getModel()));
					}
				}
			;
			
			item.add(link);
    
	«LET this.formElements.toList() AS list»
	«LET list.first() AS first»
	    «EXPAND firstCell FOR first »
		«FOREACH list AS fe»
		    «EXPAND cell(first) FOR fe»
		«ENDFOREACH»
	«ENDLET»
	«ENDLET»

    «IF withProcesses»    
	    «FOREACH this.processes.select(pp| pp.referredProcess() != null) AS pp»
		   «LET pp.referredProcess() AS process»
		   «IF ! process.collectionContext && (process.type==ProcessType::CUSTOM) »
                // Custom process on single instance
				Link «process.name»Link = new Link("«process.name»") {
					public void onClick() {
// TODO	                page.startProcess("«process.name»Process", item.getModel().getObject());
                    «process.javaClass()» process = new «process.javaClass()»(item.getModel());
                    process.setOwningPage((«getWicketMasterPageClass()»)this.getPage());
                    Page next = process.nextPage(item.getModel().getObject());
                    if (next != null) {
                        setResponsePage(next);
                    }
					}
		        };
	            item.add(«process.name»Link);
	            if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
	                «process.name»Link.setEnabled(false);
	            }
			«ENDIF»
			«ENDLET»
	    «ENDFOREACH»
		«FOREACH this.processes.referredProcess().select(e|e.type==ProcessType::EDIT) AS process»
            // Edit process 
			Link «process.name»Link = new Link("«process.name»") {
				public void onClick() {
                    «process.contextRef.name» dto = item.getModel().getObject();
                    IModel elementModel = null ;
                    Object o = model.getObject();
                    if (o instanceof Mod4jDataProvider<?>) {
                        elementModel = new Model(dto);
                    } else if (o instanceof Set<?>) {
                        elementModel = new ListElementModel("id", dto.getId(), model);
                    }
					
                    «process.javaClass()» process = new «process.javaClass()»(elementModel);
                    process.setOwningPage((«getWicketMasterPageClass()»)this.getPage());
                    Page next = process.nextPage(null);
                    if (next != null) {
                        setResponsePage(next);
                    }
					}
				};
	            item.add(«process.name»Link);
	            if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
	                «process.name»Link.setEnabled(false);
	            }
	    «ENDFOREACH»
        «FOREACH this.processes.referredProcess().select(e|  (e.type==ProcessType::DELETE) && (! e.collectionContext)) AS process»
            «IF ! process.collectionContext»
                // Delete process on collection
                Link «process.name»Link = new Link("«process.name»") {
                    public void onClick() {
                        IModel elementModel = new Model(item.getModel().getObject());
                        «process.javaClass()» process = new «process.javaClass()»(elementModel);
                        process.setOwningPage((«getWicketMasterPageClass()») this.getPage());
                        process.run(item.getModel().getObject());
                    }
                };
                item.add(«process.name»Link);
                if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
                    «process.name»Link.setEnabled(false);
                }
           «ENDIF»
        «ENDFOREACH»
        «FOREACH this.processes.referredProcess().select(e|  (e.type==ProcessType::REMOVEFROM) && (! e.collectionContext)) AS process»
            // Remove from process on collection
            Link «process.name»Link = new Link("«process.name»") {
                public void onClick() {
                    «process.javaClass()» process = new «process.javaClass()»(model);
                    process.setOwningPage((«getWicketMasterPageClass()») this.getPage());
                    process.run(item.getModel().getObject());
                }
            };
            item.add(«process.name»Link);
            if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
                «process.name»Link.setEnabled(false);
            }
        «ENDFOREACH»
	«ENDIF»
		}

		@Override
		protected Item<«this.contextRef.name»> newItem(String id, int index, IModel<«this.contextRef.name»> model)
		{
			return new OddEvenItem<«this.contextRef.name»>(id,index,model);
		}
	}
«ENDDEFINE»

«DEFINE firstCell FOR FormElement»
		link.add(new Label("«this.dataProperty.name»"));
«ENDDEFINE»

«DEFINE cell(FormElement first) FOR FormElement»
	«IF this != first»
		item.add(new Label("«this.dataProperty.name»"));
	«ENDIF»
«REM» Should Float6 beb handled as: (and why?)
		item.add(new Label("price", new PropertyModel<Float>(item.getModel().getObject(), "price")) );
«ENDREM»

«ENDDEFINE»
