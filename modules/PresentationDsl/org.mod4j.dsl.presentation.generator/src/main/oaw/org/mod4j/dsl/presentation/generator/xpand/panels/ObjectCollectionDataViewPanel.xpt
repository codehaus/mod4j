«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
 
«DEFINE GenerateObjectCollectionDataViewPanel(boolean withProcesses) FOR ContentForm -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateObjectCollectionDataViewPanel.xpt") FOR this-»
«REM»«LET (ContentForm)(this.dialogues.first().referredElement) AS cf»«ENDREM»
«LET this.name + "CollectionDataViewPanel"  +(withProcesses ? "" : "Only") AS className»
package «getPresentationRootPackage()».panels;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Collection;

import «javaDtoClassPath(this.contextRef.name)»;
«FOREACH this.formElements.dataProperty AS dp»
	«IF dp.isEnumeration»
	import «javaDtoClassPath(dp.dataType)»;
	«ENDIF»
«ENDFOREACH»


import «getPresentationRootPackage()».processes.ProcessType;
«IF this.processes.referredProcess().exists(e|e.type == ProcessType::ADDTO)»
import «getPresentationRootPackage()».dataproviders.«getWicketListAllDataProviderClass(this.contextRef.name)»;
«ENDIF»
import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationCommonPackage()».ext.components.CheckBoxBaseModel;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import org.mod4j.common.wicket.ext.components.ModalWindow;

import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.form.AjaxCheckBox;
import org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Button;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.IChoiceRenderer;
import org.apache.wicket.markup.html.link.BookmarkablePageLink;
import org.apache.wicket.markup.html.link.Link;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.repeater.Item;
import org.apache.wicket.markup.repeater.OddEvenItem;
import org.apache.wicket.markup.repeater.data.DataView;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.model.ResourceModel;
import org.apache.wicket.util.convert.IConverter;

/**
 * A panel that shows a list of «this.contextRef.name», not editable.
 */
@SuppressWarnings("serial")
public class «className» extends Panel 
{
    «EXPAND dataView(withProcesses) FOR this»
    
    protected List<IModel<«this.contextRef.name»>> selectedElements = new ArrayList<IModel<«this.contextRef.name»>>();
    
    protected RosasMasterPage page = null;
    
	protected DataView<«this.contextRef.name»> collection;

    public «className»(String id, Mod4jDataProvider<«this.contextRef.name»> dataProvider, 
              Integer maxItemsPerPage, RosasMasterPage owner)
    {
        this(id, dataProvider, maxItemsPerPage, owner, ProcessType.all());
    }

    protected Mod4jDataProvider<«this.contextRef.name»> dataProvider;
    
    public «className»(String id, Mod4jDataProvider<«this.contextRef.name»> dataProvider, 
              Integer maxItemsPerPage, RosasMasterPage owner, Collection<ProcessType> visibleProcesses )
	{
	    super(id);
	    this.dataProvider = dataProvider;
	    this.page = owner;
		WebMarkupContainer container = (WebMarkupContainer)new WebMarkupContainer("container");
		container.setOutputMarkupId(true);
		collection = new «this.contextRef.name»DataView("breakfasts", dataProvider, visibleProcesses);
		collection.setItemsPerPage(maxItemsPerPage);
		container.add(collection);

        «IF withProcesses»
	        «FOREACH this.processes.select(pp| (pp.referredProcess() != null) && pp.referredProcess().type==ProcessType::NEW) AS pp»
	            «LET pp.referredProcess() AS process»
					Link «process.name»Link = new Link<Object>("«process.name»") {
						@Override
						public void onClick() {
	                        page.startProcess("«process.name»Process", («this.contextRef.name»)null);
						}
					};
	                add(«process.name»Link);
	                if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
	                    «process.name»Link.setEnabled(false);
	                }
				«ENDLET»
			«ENDFOREACH»
			
	        «FOREACH this.processes.select(pp| pp.referredProcess() != null) AS pp»
	            «LET pp.referredProcess() AS process»
	            «IF process.collectionContext »
	                «IF process.type == ProcessType::ADDTO»
	                    «LET process.processElements.typeSelect(DialogueCall).first().referredDialogue() AS dialogue»
	                    final ModalWindow «process.name»Modal = new ModalWindow("«process.name»Modal");
				        «process.name»Modal.setTitle("«process.label»");
				        «process.name»Modal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
				        «process.name»Modal.setUseInitialHeight(true);
				        «process.name»Modal.setInitialHeight(400);
				        «process.name»Modal.setInitialWidth(600);
				        «process.name»Modal.setCloseButtonCallback(null);
				        
				        «getWicketListAllDataProviderClass(this.contextRef.name)» all = new «getWicketListAllDataProviderClass(this.contextRef.name)»();
				        final «dialogue.name»CollectionDataViewPanelOnly modalPanel = new «dialogue.name»CollectionDataViewPanelOnly("content", all, maxItemsPerPage, owner);
				        «process.name»Modal.setContent(modalPanel );
				        
					    add(new AjaxFallbackLink<Object>("«process.name»") {
					            @Override
					            public boolean isEnabled() {
					                return true;
					            }
					
					            @Override
					            public void onClick(AjaxRequestTarget target) {
					                «process.name»Modal.show(target);
					            }
					
					            
					            public void XonClick(AjaxRequestTarget target) {
					                List<«this.contextRef.name»> dtoList = new ArrayList<«this.contextRef.name»>();
					                for (IModel<«this.contextRef.name»> dtoModel : selectedElements) {
					                    «this.contextRef.name» elem = dtoModel.getObject();
					                    dtoList.add(elem);
					                }
					                page.startProcess("«process.name»Process", dtoList);
					                selectedElements.clear();
					            }
					        });
						    add(«process.name»Modal);
						        
	                    «ENDLET»
	                «ELSE»
		                Link «process.name»Link = new Link<Object>("«process.name»") {
		                    @Override
		                    public void onClick() {
			                    List<«this.contextRef.name»> dtoList = new ArrayList<«this.contextRef.name»>();
			                    for (IModel<«this.contextRef.name»> dtoModel : selectedElements) {
			                        «this.contextRef.name» elem = dtoModel.getObject();
			                        dtoList .add(elem);
			                    }
			                    page.startProcess("«process.name»Process", dtoList);
			                    selectedElements.clear();
		                    }
		                };
		                add(«process.name»Link);
		                if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
		                    «process.name»Link.setEnabled(false);
		                }
		            «ENDIF» 
	            «ENDIF»
	            «ENDLET»
	        «ENDFOREACH»
	    «ELSE» «REM» not withProcesses «ENDREM»
            «FOREACH this.processes.select(pp| (pp.referredProcess() != null) && pp.referredProcess().type==ProcessType::ADDTO) AS pp»
                «LET pp.referredProcess() AS process»
                    Link «process.name»Link = new Link<Object>("«process.name»") {
                        @Override
                        public void onClick() {
                                List<«this.contextRef.name»> dtoList = new ArrayList<«this.contextRef.name»>();
                                for (IModel<«this.contextRef.name»> dtoModel : selectedElements) {
                                    «this.contextRef.name» elem = dtoModel.getObject();
                                    dtoList .add(elem);
                                }
                                page.startProcess("«process.name»Process", dtoList);
                                selectedElements.clear();
                        }
                    };
                    add(«process.name»Link);
                «ENDLET»
            «ENDFOREACH»
	        
        «ENDIF»		
		add(container);
		add(new AjaxPagingNavigator("navigator",collection));
//		add(new BookmarkablePageLink<Object>("edit",BreakfastsEditPage.class));
	}
}
«ENDLET»
«ENDDEFINE»

«DEFINE dataView(boolean withProcesses) FOR ContentForm»
	private class «this.contextRef.name»DataView extends	DataView<«this.contextRef.name»> {
		private «this.contextRef.name»DataView(String id, Mod4jDataProvider<«this.contextRef.name»> dataProvider, Collection<ProcessType> visibleProcesses) {
			super(id, dataProvider);
			this.visibleProcesses = visibleProcesses;
		}

        protected Collection<ProcessType> visibleProcesses;
        
		@Override
		protected void populateItem(final Item<«this.contextRef.name»> item)
		{
			item.setModel(new CompoundPropertyModel<«this.contextRef.name»>(item.getModelObject()));
			
	         AjaxCheckBox selected = new AjaxCheckBox("selected",
             new CheckBoxBaseModel<«this.contextRef.name»>(selectedElements, item.getModel())) {
                @Override
                protected void onUpdate(AjaxRequestTarget target) {
 //                 target.addComponent(resetAll);
 //                 target.addComponent(delete);
                }
            };
           item.add(selected);
			
			Link<«this.contextRef.name»> link = 
				new Link<«this.contextRef.name»>("view",item.getModel())
				{
					@Override
					public void onClick()
					{
//						setResponsePage(new BreakfastPage(getModel()));
					}
				}
			;
			
			item.add(link);
    
	«LET this.formElements.toList() AS list»
	«LET list.first() AS first»
	    «EXPAND firstCell FOR first »
		«FOREACH list AS fe»
		    «EXPAND cell(first) FOR fe»
		«ENDFOREACH»
	«ENDLET»
	«ENDLET»

    «IF withProcesses»    
	    «FOREACH this.processes.select(pp| pp.referredProcess() != null) AS pp»
		   «LET pp.referredProcess() AS process»
		   «IF ! process.collectionContext && (process.type==ProcessType::CUSTOM) »
				Link «process.name»Link = new Link("«process.name»") {
					public void onClick() {
		                page.startProcess("«process.name»Process", item.getModel().getObject());
					}
		        };
	            item.add(«process.name»Link);
	            if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
	                «process.name»Link.setEnabled(false);
	            }
			«ENDIF»
			«ENDLET»
	    «ENDFOREACH»
		«FOREACH this.processes.referredProcess().select(e|e.type==ProcessType::EDIT) AS process»
				Link «process.name»Link = new Link("«process.name»") {
					public void onClick() {
	                    page.startProcess("«process.name»Process", item.getModel().getObject());
					}
				};
	            item.add(«process.name»Link);
	            if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
	                «process.name»Link.setEnabled(false);
	            }
	    «ENDFOREACH»
		«FOREACH this.processes.referredProcess().select(e|e.type==ProcessType::DELETE) AS process»
		    «IF ! process.collectionContext»
		        Link «process.name»Link = new Link("«process.name»") {
					public void onClick() {
	                    page.startProcess("«process.name»Process", item.getModel().getObject());
					}
				};
				item.add(«process.name»Link);
	            if( ! dataProvider.supportedProcesses().contains(ProcessType.«process.type.toString()») ){
	                «process.name»Link.setEnabled(false);
	            }
		   «ENDIF»
	    «ENDFOREACH»
	«ENDIF»
		}

		@Override
		protected Item<«this.contextRef.name»> newItem(String id, int index, IModel<«this.contextRef.name»> model)
		{
			return new OddEvenItem<«this.contextRef.name»>(id,index,model);
		}
	}
«ENDDEFINE»

«DEFINE firstCell FOR FormElement»
		link.add(new Label("«this.dataProperty.name»"));
«ENDDEFINE»

«DEFINE cell(FormElement first) FOR FormElement»
	«IF this != first»
		item.add(new Label("«this.dataProperty.name»"));
	«ENDIF»
«REM» Should Float6 beb handled as: (and why?)
		item.add(new Label("price", new PropertyModel<Float>(item.getModel().getObject(), "price")) );
«ENDREM»

«ENDDEFINE»
