«REM»
 Copyright (c) 2010 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE GeneratePage FOR Process-»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ProcessPage.xpt") FOR this-»
«LET this.processElements.referredContentForm().first().getProcessOfType(ProcessType::EDIT) AS editProcess-»
«LET this.processElements.referredContentForm().first().getProcessOfType(ProcessType::NEW) AS newProcess-»
package «getPresentationRootPackage()».pages;

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
«FOREACH this.processElements.referredDialogue().select(e|e != null) AS dialogue -»
import «javaDtoClassPath(dialogue.contextRef.name)»;
«ENDFOREACH»
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».processes.PmfProcess;
import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;

«FOREACH this.processElements.select(e|(e.getStandardExpression() != null) && ((e.getStandardExpression().type== ExpressionType::ALL || 
     e.getStandardExpression().type== ExpressionType::FIND))) AS e -»
import «getPresentationRootPackage()».dataproviders.«getWicketDataProviderClass(e.referredUIModelElement().contextRef.name)» ;
«ENDFOREACH»

«FOREACH this.processElements.select(e|e.getServiceExpression() != null ) AS e -»
import «getPresentationRootPackage()».dataproviders.«getWicketServiceDataProviderClass(e.referredUIModelElement().contextRef.name)» ;
«ENDFOREACH»

«FOREACH this.processElements AS uiCall -»
    «IF uiCall.referredDialogue() != null»
        «IF uiCall.referredDialogue().collectionContext»
            import «getPresentationRootPackage()».panels.«uiCall.referredDialogue().name.toFirstUpper()»DataTablePanel;
            import «getPresentationRootPackage()».panels.«uiCall.referredDialogue().name.toFirstUpper()»DataTablePanelOnly;
        «ELSE »
            import «getPresentationRootPackage()».panels.«uiCall.referredDialogue().name.toFirstUpper()»SwapEditPanel;
        «ENDIF»
    «ENDIF»
«ENDFOREACH»
import java.util.ArrayList;
import java.util.List;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.Page;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.markup.html.link.Link;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.mod4j.common.wicket.ext.components.ComponentsFeedbackMessageFilter;

public class «this.name.toFirstUpper()»Page extends «getWicketMasterPageClass()» 
{
    private Integer maxItemsPerPage = 8;

    protected IModel model;
    
    «FOREACH this.processElements AS uiCall»
        «IF uiCall.referredDialogue() != null»
            Panel «uiCall.referredDialogue().name.toFirstLower()»Panel ;
        «ENDIF»
    «ENDFOREACH»        
    protected List<Panel> panels = new ArrayList<Panel>();
    protected int currentPanel = 0;
    protected List<String> stepNames = new ArrayList<String>();
    protected IModel stepModel ;

    public «this.name.toFirstUpper()»Page (final PmfProcess owner, IModel<«this.contextRef.name»> context)
    {
        super(owner);
        this.model = context;
        
        stepModel = new Model("label of process step");
        Label label = new Label("processStep", stepModel);
        add(label);

        // Add an error panel to display errors from called processes
        ComponentsFeedbackMessageFilter filter = new ComponentsFeedbackMessageFilter();
        FeedbackPanel errorMessages = new FeedbackPanel("errorMessages", filter);
        filter.addComponent(this);
        errorMessages.setOutputMarkupId(true);
        add(errorMessages);

//        IModel panelModel = null ;
        «FOREACH this.processElements AS uiCall -»
            «IF uiCall.referredDialogue() != null -»
                «EXPAND createPanel(this) FOR uiCall -»
            «ENDIF»
        «ENDFOREACH»     
        add(panels.get(currentPanel));
        showSteps();

        // Create previous Link
        Link previousLink = new Link<Object>("previous") {
            @Override
            public void onClick() {
                getProcess().previousStep(null);
            }
        };
        add(previousLink);

        // Create model for text of previous link
        IModel previousModel = new IModel() {
            public Object getObject() {
                if ((currentPanel + 1) > 1) {
                    return "Previous";
                } else {
                    return "";
                }
            }
            public void setObject(Object object) {
            }
            public void detach() {
            }
        };
        Label previousLabel = new Label("label.previous", previousModel);
        previousLink.add(previousLabel);
    
        // Create Next link
        Link nextLink = new Link <Object>("next") {
            @Override
            public void onClick() {
                getProcess().nextStep(null);
            }

        };
        add(nextLink);
        
        //  Create Model for text on Next link
        IModel model = new IModel(){
            public Object getObject() {
                if ((currentPanel  + 1)< panels.size()) {
                    return "Next";
                } else {
                    return "Done";
                }
            }
            public void setObject(Object object) { }
            public void detach() { }
        };
        Label l = new Label("label.next", model);
        nextLink.add(l);
        
           
    }

    public void nextPanel(){
        currentPanel++;
        if (currentPanel < panels.size()) {
            Panel nextPanel = panels.get(currentPanel);
            panels.get(currentPanel - 1).replaceWith(nextPanel);
            showSteps();
        } else {
            this.getProcess().done(null);
        }
    }
    public void previousPanel(){
        currentPanel--;
        if (currentPanel >= 0) {
            Panel nextPanel = panels.get(currentPanel);
            panels.get(currentPanel + 1).replaceWith(nextPanel);
            showSteps();
        } else {
            this.getProcess().done(null);
        }
    }

    private void showSteps() {
        String result = "";
        for (int i = 0; i < stepNames.size(); i++) {
            if( i == currentPanel){
                result += "==> ";
            }
            result += stepNames.get(i) + "\n";
            if( i == currentPanel){
                result += " <== ";
            }
        }
        stepModel.setObject(result);
    }

    @Override
    public String getPageTitle()
    {
        return "«this.name»";
//      return getLocalizer().getString("lbl.breakfast",this);
    }

}
«ENDLET»
«ENDLET»
«ENDDEFINE» 


«REM»
    Generate the creation of the panel ConmtentForm
«ENDREM»
«DEFINE createPanel(Process process) FOR UICall»
    IModel «this.referredDialogue().name»Model = null;
    «EXPAND Process::createModel FOR this -»
    «IF this.referredDialogue().collectionContext»
        «IF (process.type == ProcessType::ADDTO) || (process.type == ProcessType::LINK) -»
            «this.referredDialogue().name.toFirstLower()»Panel = new «this.referredDialogue().name.toFirstUpper()»DataTablePanelOnly("panel", 
            «this.referredDialogue().name»Model, maxItemsPerPage, this, «((process.type == ProcessType::ADDTO) ? "true" : "false")»);
        «ELSE»
            «this.referredDialogue().name.toFirstLower()»Panel = new «this.referredDialogue().name.toFirstUpper()»DataTablePanel("panel", «this.referredDialogue().name»Model, maxItemsPerPage, this, true);
        «ENDIF»
    «ELSE»
        «this.referredDialogue().name.toFirstLower()»Panel = new «this.referredDialogue().name.toFirstUpper()»SwapEditPanel("panel", «this.referredDialogue().name»Model);
    «ENDIF»
    «this.referredDialogue().name.toFirstLower()»Panel .setOutputMarkupPlaceholderTag(true);
    panels.add(«this.referredDialogue().name.toFirstLower()»Panel );
    stepNames.add("«this.label»");
«ENDDEFINE»

«REM»
    Create the model that is needed for the referred panel, based on the context expression
«ENDREM»
«DEFINE createModel2 FOR UICall»
    «IF this.getNavigationExpression() != null»
        panelModel = new PropertyModel(model, "«this.getNavigationExpression().references.get(0).name»");
    «ELSEIF this.getStandardExpression() != null»
        «IF ((this.getStandardExpression().type == ExpressionType::ALL) || (this.getStandardExpression().type == ExpressionType::FIND))»
            «LET getWicketDataProviderClass(this.referredDialogue().contextRef.name) AS providerType»
	        «providerType» provider = new «providerType»();
	        panelModel = new Model(provider);
	        «ENDLET»
        «ENDIF»
    «ELSEIF this.getServiceExpression() != null»
        «getWicketServiceDataProviderClass(this.referredDialogue().contextRef.name)» p = new «getWicketServiceDataProviderClass(this.referredDialogue().contextRef.name)»(context.getObject());
        panelModel = new Model(p);
        // TODO add Service providder IModel
    «ELSE»    
        panelModel = model;
    «ENDIF»
«ENDDEFINE»