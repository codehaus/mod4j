«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE GeneratePage FOR Process»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: ProcessPage.xpt") FOR this-»
«LET this.processElements.referredContentForm().first().getProcessOfType(ProcessType::EDIT) AS editProcess»
«LET this.processElements.referredContentForm().first().getProcessOfType(ProcessType::NEW) AS newProcess»
package «getPresentationRootPackage()».pages;

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
«FOREACH this.processElements.referredDialogue().select(e|e != null) AS dialogue»
import «javaDtoClassPath(dialogue.contextRef.name)»;
«ENDFOREACH»
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».processes.PmfProcess;
import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;

«FOREACH this.processElements.select(e|(e.getStandardExpression() != null) && (e.getStandardExpression().type== ExpressionType::ALL )) AS e»
import «getPresentationRootPackage()».dataproviders.«getWicketListAllDataProviderClass(e.referredDialogue().contextRef.name)» ;
«ENDFOREACH»

«FOREACH this.processElements.select(e|e.getServiceExpression() != null ) AS e»
import «getPresentationRootPackage()».dataproviders.«getWicketServiceDataProviderClass(e.referredDialogue().contextRef.name)» ;
«ENDFOREACH»

«FOREACH this.processElements AS uiCall»
    «IF uiCall.referredDialogue() != null»
        «IF uiCall.referredDialogue().collectionContext»
            import «getPresentationRootPackage()».panels.«uiCall.name»CollectionDataViewPanel;
        «ELSE »
            import «getPresentationRootPackage()».panels.«uiCall.name»SwapEditPanel;
        «ENDIF»
    «ENDIF»
«ENDFOREACH»


import java.util.ArrayList;
import java.util.List;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.Page;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.markup.html.link.Link;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.mod4j.common.wicket.ext.components.ComponentsFeedbackMessageFilter;

public class «this.name»Page extends «getWicketMasterPageClass()»<«this.contextRef.name»> 
{
    private Integer maxItemsPerPage = 5;

    protected IModel model;
    
    «FOREACH this.processElements AS uiCall»
        «IF uiCall.referredDialogue() != null»
            Panel «uiCall.referredDialogue().name.toFirstLower()»Panel ;
        «ENDIF»
    «ENDFOREACH»        
    protected List<Panel> panels = new ArrayList<Panel>();
    protected int currentPanel = 0;

    public «this.name»Page (final PmfProcess owner, IModel<«this.contextRef.name»> context)
    {
        super(owner);
        this.model = context;
        
        // Add an error panel to display errors from called processes
        ComponentsFeedbackMessageFilter filter = new ComponentsFeedbackMessageFilter();
        FeedbackPanel errorMessages = new FeedbackPanel("errorMessages", filter);
        filter.addComponent(this);
        errorMessages.setOutputMarkupId(true);
        add(errorMessages);

        IModel panelModel = null ;
        «FOREACH this.processElements AS uiCall»
            «IF uiCall.referredDialogue() != null»
                «EXPAND createPanel(this, uiCall) FOR uiCall.referredDialogue()»
            «ENDIF»
        «ENDFOREACH»     
        add(panels.get(currentPanel));
    
        Link nextLink = new Link <Object>("next") {
            @Override
            public void onClick() {
                getProcess().nextStep(null);
            }

        };
        add(nextLink);
        
        IModel model = new IModel(){
            public Object getObject() {
                if ((currentPanel  + 1)< panels.size()) {
                    return "Next";
                } else {
                    return "Done";
                }
            }
            public void setObject(Object object) { }
            public void detach() { }
        };
        Label l = new Label("label", model);
        nextLink.add(l);
        
           
    }

    public void nextPanel(){
        currentPanel++;
        if (currentPanel < panels.size()) {
            Panel nextPanel = panels.get(currentPanel);
            panels.get(currentPanel - 1).replaceWith(nextPanel);
        } else {
            this.getProcess().done(null);
        }
    }
    public void previousPanel(){
        currentPanel--;
        if (currentPanel >= 0) {
            Panel nextPanel = panels.get(currentPanel);
            panels.get(currentPanel + 1).replaceWith(nextPanel);
        } else {
            this.getProcess().done(null);
        }
    }

    @Override
    public String getPageTitle()
    {
        return "«this.name»Page";
//      return getLocalizer().getString("lbl.breakfast",this);
    }

}
«ENDLET»
«ENDLET»
«ENDDEFINE» 


«DEFINE createPanel(Process process, UICall call) FOR Dialogue»
«REM»Abstract super method, should never be called«ENDREM»
ERROR
«ENDDEFINE»

«REM»
    Generate the creation of the panel ConmtentForm
«ENDREM»
«DEFINE createPanel(Process process, UICall call) FOR ContentForm»
    «EXPAND createModel(process, call) FOR this»
    «IF this.collectionContext»
        «call.referredDialogue().name.toFirstLower()»Panel = new «this.name»CollectionDataViewPanel("panel", panelModel, maxItemsPerPage, this);
    «ELSE»
        «call.referredDialogue().name.toFirstLower()»Panel = new «this.name»SwapEditPanel("panel", panelModel);
    «ENDIF»
    «call.referredDialogue().name.toFirstLower()»Panel .setOutputMarkupPlaceholderTag(true);
    panels.add(«call.referredDialogue().name.toFirstLower()»Panel );
«ENDDEFINE»

«REM»
    Create the model that is needed for the referred panel, based on the context expression
«ENDREM»
«DEFINE createModel(Process process, UICall call) FOR ContentForm»
    «IF call.getNavigationExpression() != null»
        panelModel = new PropertyModel(model, "«call.getNavigationExpression().references.get(0).name»");
    «ELSEIF call.getStandardExpression() != null»
        «IF call.getStandardExpression().type == ExpressionType::ALL»
            «LET getWicketListAllDataProviderClass(this.contextRef.name) AS providerType»
	        «providerType» provider = new «providerType»();
	        panelModel = new Model(provider);
	        «ENDLET»
        «ELSEIF call.getStandardExpression().type == ExpressionType::FIND»
            // TODO add Find providder IModel
        «ENDIF»
    «ELSEIF call.getServiceExpression() != null»
        «getWicketServiceDataProviderClass(this.contextRef.name)» p = new «getWicketServiceDataProviderClass(this.contextRef.name)»(context.getObject());
        panelModel = new Model(p);
        // TODO add Service providder IModel
    «ELSE»    
        panelModel = model;
    «ENDIF»
«ENDDEFINE»