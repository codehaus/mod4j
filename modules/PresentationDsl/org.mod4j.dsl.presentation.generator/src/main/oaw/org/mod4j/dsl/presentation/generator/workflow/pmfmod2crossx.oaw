<?xml version="1.0"?>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 - Copyright (c) 2009 Ordina and committers to Mod4j
 - All rights reserved. This program and the accompanying materials
 - are made available under the terms of the Eclipse Public License v1.0
 - which accompanies this distribution, and is available at
 - http://www.eclipse.org/legal/epl-v10.html
 -
 - Contributors:
 -     Ordina - initial implementation
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<workflow>
    <!--  
        This workflow takes a PresentationDsl model and extracts the Crossx model from it.
        Arguments / properties expected:
          - modelfile : the file containing the PresentationDsl model
          - crossxfile : the file to which the crossx model will be written
          - project: the name of the project in which tyhe model resides
    -->

    <component class="org.openarchitectureware.util.stdlib.ExtIssueReporter"/>

    <property name="nsUriPrefix" value="appelmoes"/>

    <!-- set up EMF for standalone execution -->
    <bean class="org.eclipse.mwe.emf.StandaloneSetup" >
        <platformUri value=".."/>
    </bean>

    <!-- added beans for the PresentationDsl and the Crossx metamodels
         Don't use the filenames of the ecore files, because they won't work when the
         plugins are exported and installed.
    -->
    <bean class="org.mod4j.dsl.presentation.xtext.MetaModelRegistration"/>
    <bean id="PresentationDsl" class="oaw.type.emf.EmfMetaModel">
        <metaModelPackage value="org.mod4j.dsl.presentation.mm.PresentationDsl.PresentationDslPackage" />   
    </bean>
    <bean id="crossx" class="oaw.type.emf.EmfMetaModel">
        <metaModelPackage value="org.mod4j.crossx.mm.crossx.CrossxPackage" />   
    </bean>

    <!-- Load the Dsl modelfile and store it in slot 'model' -->
    <if cond="${isEclipseSetup}">
        <component class="org.eclipse.mwe.emf.Reader">
            <uri value="${modelfile}" />
            <modelSlot value="model" />
        </component>
    </if>
    <if cond="${isStandaloneSetup}">
        <component id="PresentationDsl-parser" class="org.mod4j.dsl.presentation.xtext.parser.ParserComponent">
            <modelFile value="${modelfile}"/>
            <outputSlot value="model"/>
        </component>
    </if>
    
    <component id="Presentation-XtextChecks" class="org.openarchitectureware.check.CheckComponent">
        <metaModel idRef="PresentationDsl" />
        <checkFile value="org::mod4j::dsl::presentation::xtext::GenChecks" />
        <emfAllChildrenSlot value="model" />
    </component>
    <component id="Presentation-ModelChecks" class="org.openarchitectureware.check.CheckComponent">
        <metaModel idRef="PresentationDsl" />
        <metaModel idRef="crossx"/>
        <checkFile value="org::mod4j::dsl::presentation::validation::checks::PresentationChecks" />
        <emfAllChildrenSlot value="model" />
    </component>
    <component id="Presentation-CrossxChecks" class="org.openarchitectureware.check.CheckComponent">
        <metaModel idRef="PresentationDsl" />
        <metaModel idRef="crossx"/>
        <checkFile value="org::mod4j::dsl::presentation::validation::checks::CrossxChecks" />
        <emfAllChildrenSlot value="model" />
    </component>
 
    <!-- Call the Xtend model-to-model transformation to complete the Presentation model.
    <component id="compltePmf" class="oaw.xtend.XtendComponent">
       <metaModel idRef="PresentationDsl"/>
       <metaModel idRef="crossx"/>
       <invoke value="org::mod4j::dsl::presentation::generator::xtend::CompletePmf::completeModel(model)"/>
    </component>
    -->

    <!-- Call the Xtend model-to-model transformation that takes a Presentation Model as its input
         and returns a Crossx model in the outputSlot
    -->
    <component id="XtendComponent.presentationmodel2crossx" class="oaw.xtend.XtendComponent">
       <!-- again, we need the two meta models introduced above; we reference them using XML's idRef mechanism -->
       <metaModel idRef="PresentationDsl"/>
       <metaModel idRef="crossx"/>
       <globalVarDef name="nsUriPrefix" value="'${nsUriPrefix}'"/>
       <invoke value="org::mod4j::dsl::presentation::generator::xtend::pmfmod2crossx::exportModel(model, '${modelfile}' )"/>
       <outputSlot value="crossxModel"/>
    </component>

    <!-- Put the model in the environment. The model is put in the modelSlot 'model' -->
    <component class="org.mod4j.dslcommon.openarchitectureware.CrossxWorkflowComponent">
        <modelSlot value="crossxModel"/>
        <project value="${project}"/>
    </component>

    <!-- Last but not least, we write the Ecore model file. We specify the workflow
         slot where we expect the model as well as the file name of the to-be-written file.
         This stel isn't neccesary, but migtb be helpfulkl for debugging purposes to check what
         the Crosssx model looks like.
    -->
    <if cond="${isEclipseSetup}">
	    <component class="org.eclipse.mwe.emf.Writer">
	        <uri value="${crossxfile}" />
	        <modelSlot value="crossxModel" />
	    </component>
    </if>
    
</workflow>

