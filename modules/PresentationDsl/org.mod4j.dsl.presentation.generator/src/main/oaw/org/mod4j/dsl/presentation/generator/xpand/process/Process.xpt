«REM»
 Copyright (c) 2010 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»

«DEFINE GenerateProcesses FOR PresentationModel-»
    «FOREACH this.elements.typeSelect(Process) AS p»
        «LET javaPathFileName(getPresentationRootPackage() + ".processes." + p.name.toFirstUpper() + "Process") AS filePath»
        «LET javaPathFileName(getPresentationRootPackage() + ".processes." + p.name.toFirstUpper() + "ProcessImplBase") AS filePathImplBase»
 
        «FILE generate(getPresentationModuleName(""), filePathImplBase)»
	        «IF p.isInteractive() »
	            «EXPAND GenerateInteractiveProcessImplBase FOR p»
	        «ELSE»
	            «EXPAND GenerateBatchProcessImplBase FOR p»
	        «ENDIF»        
	    «ENDFILE»

        «IF shouldRegenerate(fullExtendPath(getPresentationModuleName(""), filePath ))»
            «print("MOD4J REGENERATE: [" + fullExtendPath(getPresentationModuleName(""), filePath) + "]")»
            «FILE extend(getPresentationModuleName(""), filePath)»
                «IF p.isInteractive() && (p.type != ProcessType::ADDTO) »
	                «EXPAND GenerateInteractiveProcess FOR p»
	            «ELSE»
	                «EXPAND GenerateBatchProcess FOR p»
	            «ENDIF»        
            «ENDFILE»
        «ENDIF»
        
        «ENDLET»
        «ENDLET»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE GenerateInteractiveProcess FOR Process-»
«EXPAND JavaComments::extensionPointHeader ("Mod4j PresentationDsl generator: GenerateInteractiveProcess in Process.xpt") FOR this-»
package «getPresentationRootPackage()».processes;

import org.apache.wicket.model.IModel;

public class «this.javaClass()» extends «this.javaBaseClass()» 
{
   public «this.javaClass()»(IModel context){
        super(context);
    }
}
«ENDDEFINE»
 
«DEFINE GenerateInteractiveProcessImplBase FOR Process-»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateInteractiveProcessImplBase in Process.xpt") FOR this-»
«LET (this.collectionContext ? ("List<" + this.contextRef.name + ">") : this.contextRef.name) AS context»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «getPresentationRootPackage()».pages.«this.name.toFirstUpper()»Page;
// import «javaDtoClassPath(this.contextRef.name)»;
«FOREACH this.processElements.referredUIModelElement().contextRef.name.add(this.contextRef.name).toSet() AS c»
import «javaDtoClassPath(c)»;
«ENDFOREACH»
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationCommonPackage()».dataproviders.ModelBasedListDataProvider;
import «getPresentationCommonPackage()».ext.components.ListElementModel;
import «getPresentationCommonPackage()».ext.components.Helpers;
import org.mod4j.runtime.dto.AbstractDto;

import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.wicket.Page;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;
import «getPresentationCommonPackage()».processes.ProcessType;
import «getPresentationRootPackage()».operations.PmfOperation;
import «getPresentationRootPackage()».operations.AlwaysTrue;
«FOREACH this.processElements AS uiCall-»
    «IF uiCall.condition != null-»
import «getPresentationPackage()».operations.Operation«uiCall.condition.name»;
   «ENDIF»
«ENDFOREACH»

public class «this.javaBaseClass()» extends PmfProcess<«context»> 
{
    «this.name.toFirstUpper()»Page page = null;

    public «this.javaBaseClass()»(IModel context){
        model = context;
        
    «IF this.type == ProcessType::NEW»
        // New process, so create the new object and create the model for it
        «this.contextRef.name» newDto = new «this.contextRef.name»();
        Object object = model.getObject();
        if( object instanceof IDataProvider ){   
            // new standalone object   
            model = new Model(newDto);
        } else if ( object instanceof Collection){
            // add new object to existing list
            Collection<«this.contextRef.name»> list = (Collection<«this.contextRef.name»>)object;
            list.add(newDto);
            ListElementModel<«this.contextRef.name»> pageModel = new ListElementModel<«this.contextRef.name»>("id",null, model);
            model = pageModel;
        } else {
            model = new Model(newDto);
//            throw new RuntimeException("MOD$J Error: GGGGGGGGGGGGGGGGGGGGGGGGGGGGG");
        }
    «ENDIF»

    }
    
    «EXPAND GetProcessType FOR this»

    int currentStep = 0;
    ArrayList<Object> steps = new ArrayList<Object>();
    ArrayList<PmfOperation> checks = new ArrayList<PmfOperation>();
    
    private void prepareSteps() {
    «FOREACH this.processElements AS uiCall-»
        «IF uiCall.metaType == DialogueCall -»
            steps.add(page);
        «ELSEIF uiCall.metaType == ProcessCall -»
            IModel «uiCall.name»Model;
            «EXPAND createModel FOR uiCall.asProcessCall()»
            steps.add(new «uiCall.asProcessCall().referredProcess().javaClass()»(«uiCall.name»Model));
        «ENDIF-»
        «IF uiCall.condition != null-»
            checks.add(new Operation«uiCall.condition.name»() );
        «ELSE-»
            checks.add(AlwaysTrue.getInstance());
        «ENDIF»
    «ENDFOREACH»     
    }

    @Override
    public void nextStep(«context» o){
        currentStep++;
        if( currentStep >= steps.size() ){
            this.done(page);
        } else {
            Object step = steps.get(currentStep);
            PmfOperation operation = checks.get(currentStep);
            if( step == page ){
    «IF this.collectionContext»
                if( operation.checkCollection(o) ){
    «ELSE»
                if( operation.check(model.getObject()) ){
    «ENDIF»
                    page.nextPanel();
                } else {
                    nextStep(null);
                }
           } else if( step instanceof PmfProcess) {
    «IF this.collectionContext»
                if( operation.checkCollection(o) ){
    «ELSE»
                if( operation.check(model.getObject()) ){
    «ENDIF»
                    PmfProcess process = (PmfProcess) step;
                    process.run(null);
                }
                nextStep(o);
            }
        }
    }

    @Override
    public void previousStep(«context» o){
        currentStep--;
        if( currentStep < 0 ){
            this.done(page);
        } else {
            Object step = steps.get(currentStep);
            PmfOperation operation = checks.get(currentStep);
            if( step == page ){
    «IF this.collectionContext»
                if( operation.checkCollection(o) ){
    «ELSE»
                if( operation.check(model.getObject()) ){
    «ENDIF»
                    page.previousPanel();
                } else {
                    previousStep(null);
                }
           } else if( step instanceof PmfProcess) {
    «IF this.collectionContext»
                if( operation.checkCollection(o) ){
    «ELSE»
                if( operation.check(model.getObject()) ){
    «ENDIF»
                    PmfProcess process = (PmfProcess) step;
                    process.run(null);
                }
                previousStep(o);
            }
        }
    }

        @Override
        public void run(«context» o){
        }
    «IF (this.type == ProcessType::ADDTO) || (this.type == ProcessType::LINK)»
        «LET (this.link == null) ? context : this.link.name AS link»
            «EXPAND runAddTo(link) FOR this»
        «ENDLET»
    «ELSE»
        public void add(Object o){}
    «ENDIF»

    public «getWicketMasterPageClass()» nextPage(«context» element) {
    «IF this.type == ProcessType::NEW»
        page = new «this.name.toFirstUpper()»Page(this, model);
        page.setProcess(this);
        prepareSteps();
        return page;
    «ELSEIF this.type == ProcessType::SAVE»
        return null;
    «ELSEIF this.type == ProcessType::EDIT»
        page = new «this.name.toFirstUpper()»Page (this, model);
        page.setProcess(this);
        prepareSteps();
        return page;
    «ELSEIF this.type == ProcessType::DELETE»
        return null;
    «ELSEIF this.type == ProcessType::ADDTO»
        page = new «this.name.toFirstUpper()»Page (this, model);
        page.setProcess(this);
        prepareSteps();
        return page;
//        return null;
    «ELSEIF this.type == ProcessType::CANCEL»
        return null;
    «ELSEIF this.type == ProcessType::CUSTOM»
        page = new «this.name.toFirstUpper()»Page (this, model);
        page.setProcess(this);
        prepareSteps();
        return page;
    «ELSEIF this.type == ProcessType::LINK»
        page = new «this.name.toFirstUpper()»Page (this, model);
        page.setProcess(this);
        prepareSteps();
        return page;
    «ENDIF»
    }
    
    public void done(«getWicketMasterPageClass()» page){
        getOwningPage().setResponsePage(getOwningPage());
    }
	
	@Override
    public void cancel(){
       IModel innerModel = Helpers.findInnerMostModel(model);
        Object object = innerModel.getObject();
        if (object instanceof AbstractDto) {
            AbstractDto root = (AbstractDto) innerModel.getObject();
            if (root.getId() == null) {
//                root = «getWicketHomePageClass()».create(root);
            } else {
                root = «getWicketHomePageClass()».read(root);
                innerModel.setObject(root);
            }
        }
        owningPage.modelChanged();
        getOwningPage().setResponsePage(getOwningPage());
    }
}
«ENDLET»
«ENDDEFINE»
 


«REM» Gebnerate for process w
«ENDREM»
«DEFINE GenerateBatchProcess FOR Process -»
    «EXPAND JavaComments::extensionPointHeader ("Mod4j PresentationDsl generator: GenerateBatchProcess  in Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaDtoClassPath(this.contextRef.name)»;

import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

/** Automated process
 */
public class «this.javaClass()» extends «this.javaBaseClass()» 
{
    public «this.javaClass()»(IModel context){
        super(context);
    }
    
	«IF this.type == ProcessType::CUSTOM»
	   «IF this.collectionContext»
            public void run(List<«this.contextRef.name»> elements) {
                // TODO: Implement run action for Custom batch process
                throw new RuntimeException("Process «this.label» is not iomplemented yet ");
            }
	   «ELSE»
			public void run(«this.contextRef.name» element) {
				// TODO: Implement run action for Custom batch process
				throw new RuntimeException("Process «this.label» is not iomplemented yet");
	    	}
        «ENDIF»
    «ENDIF»
}
«ENDDEFINE»

«DEFINE GenerateBatchProcessImplBase FOR Process -»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateBatchProcessBase in Process.xpt") FOR this-»
«LET (this.collectionContext ? ("List<" + this.contextRef.name + ">") : this.contextRef.name) AS context-»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationCommonPackage()».ext.components.Helpers;
import org.mod4j.runtime.dto.AbstractDto;

import java.util.Collection;
import java.util.List;
import java.util.ArrayList;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;
import «getPresentationCommonPackage()».processes.ProcessType;
import «getPresentationRootPackage()».operations.PmfOperation;
import «getPresentationRootPackage()».operations.AlwaysTrue;
«FOREACH this.processElements AS uiCall-»
    «IF uiCall.condition != null-»
import «getPresentationPackage()».operations.Operation«uiCall.condition.name»;
   «ENDIF»
«ENDFOREACH»

/** Automated process
 */
public class «this.javaBaseClass()» extends PmfProcess<«context»> 
{
    «EXPAND GetProcessType FOR this»

    public «this.javaBaseClass()»(IModel context){
        this.model = context;
        prepareSteps();
    }
    
    int currentStep = 0;
    ArrayList<Object> steps = new ArrayList<Object>();
    ArrayList<PmfOperation> checks = new ArrayList<PmfOperation>();
    
    private void prepareSteps() {
    «IF this.type != ProcessType::ADDTO»
	    «FOREACH this.processElements AS uiCall-»
	        «IF uiCall.metaType == DialogueCall -»
	            steps.add(page);
	        «ELSEIF uiCall.metaType == ProcessCall -»
	            steps.add(new «uiCall.asProcessCall().referredProcess().javaClass()»(null));
	        «ENDIF-»
	        «IF uiCall.condition != null-»
	            checks.add(new Operation«uiCall.condition.name»() );
	        «ELSE-»
	            checks.add(AlwaysTrue.getInstance());
	        «ENDIF-»
	    «ENDFOREACH»     
	«ENDIF»
    }
    
    @Override
    public void nextStep(«context» o){
        currentStep++;
        if( currentStep >= steps.size() ){
            this.done(null);
        } else {
            Object step = steps.get(currentStep);
            PmfOperation operation = checks.get(currentStep);
    «IF this.collectionContext»
            if( operation.checkCollection(o) ){
    «ELSE»
            if( operation.check(model.getObject()) ){
    «ENDIF»
                PmfProcess process = (PmfProcess) step;
                process.setModel(model);
                process.run(o);
            }
            nextStep(o);
        }
    }

    @Override
    public void previousStep(«context» o){
    }

    public «getWicketMasterPageClass()» nextPage(«context» element) {
    	return null;
	}
	
	«IF this.type == ProcessType::SAVE»
	   «EXPAND runSave(context) FOR this»
	«ELSEIF this.type == ProcessType::DELETE»
	   «IF this.collectionContext»
	       «EXPAND runDeleteCollection(context) FOR this»
	   «ELSE»
           «EXPAND runDeleteSingle(context) FOR this»
		«ENDIF»
	«ELSEIF this.type == ProcessType::CANCEL »
		public void run(«this.contextRef.name» element) {
			// do nothing, will return to previous page
    	}
    «ELSEIF this.type == ProcessType::REMOVEFROM »
        «IF this.collectionContext»
          «EXPAND runRemoveFromCollection(context) FOR this»
	    «ELSE»
          «EXPAND runRemoveFromSingle(context) FOR this»
	    «ENDIF»
    «ELSEIF this.type == ProcessType::ADDTO»
        public void run(«this.contextRef.name» element) {
            // do nothing, will return to previous page
        }
	«ELSE»
		public void run(«context» element) {
			// TODO: Implement run action for batch process
			throw new RuntimeException("Process «this.label» is not iomplemented yet");
    	}
	«ENDIF»
	
	«IF (this.type == ProcessType::ADDTO) || (this.type == ProcessType::LINK) » 
        «EXPAND runAddTo(context) FOR this»
    «ELSE»
        public void add(Object o){}
    «ENDIF»	
	public void done(«getWicketMasterPageClass()» page){
	    getOwningPage().setResponsePage(getOwningPage());
	}
	
    @Override
    public void cancel(){
        getOwningPage().setResponsePage(getOwningPage());
    }
	
}
«ENDLET»
«ENDDEFINE»

«DEFINE runSave(String context) FOR Process»
public void run(«context» element) {
        saveAction(element);
    }

    private void saveAction(«context» element) {
    IModel innerModel = Helpers.findInnerMostModel(model);
    Object object = innerModel.getObject();
    if( object instanceof AbstractDto ){
        AbstractDto root = (AbstractDto)innerModel.getObject();
        if( root.getId() == null ){
            root  = «getWicketHomePageClass()».create(root);
        } else {
            root  = «getWicketHomePageClass()».update(root);
        }
        innerModel.setObject(root);
    }
}
«ENDDEFINE»

«DEFINE runDeleteCollection(String context) FOR Process»
@Override
public void run(List<«this.contextRef.name»> elements) {
    deleteAction(elements);
}

private void deleteAction(List<«this.contextRef.name»> elements) {
    for(«this.contextRef.name» dto : elements){
        if( dto.getId() == null ){
            System.out.println("DELETE NON EXISTING OBJECT DELETE NON EXISTING OBJECT DELETE NON EXISTING OBJECT ");
        } else {
            «getWicketHomePageClass()».delete(dto);
        }
    }
    owningPage.modelChanged();
}
«ENDDEFINE»

«DEFINE runDeleteSingle(String context)  FOR Process»
public void run(«this.contextRef.name» element) {
    deleteAction(element);
}

private void deleteAction(«this.contextRef.name» element) {
    IModel innerModel = Helpers.findInnerMostModel(model);
    Object object = innerModel.getObject();
    if( object instanceof «this.contextRef.name»){
        «this.contextRef.name» root = («this.contextRef.name»)innerModel.getObject();
        if( root.getId() == null ){
            System.out.println("DELETE NON EXISTING OBJECT DELETE NON EXISTING OBJECT DELETE NON EXISTING OBJECT ");
        } else {
            «getWicketHomePageClass()».delete(root);
        }
        innerModel.setObject(null);
    }
    owningPage.modelChanged();
}
«ENDDEFINE»

«DEFINE runRemoveFromCollection(String context) FOR Process»
@Override
public void run(List<«this.contextRef.name»> elements) {
    Collection<«this.contextRef.name»> list = (Collection<«this.contextRef.name»>)model.getObject();
    list.removeAll(elements);
        
    IModel innerModel = Helpers.findInnerMostModel(model);
    Object object = innerModel.getObject();
    if (object instanceof AbstractDto) {
        AbstractDto root = (AbstractDto) innerModel.getObject();
        if (root.getId() == null) {
           System.out.println("CREATE CREATE CREATE CREATE CREATE CREATE CREATE CREATE ");
            root = «getWicketHomePageClass()».create(root);
        } else {
            System.out.println("UPDATE UPDATE UPDATE UPDATE UPDATE UPDATE UPDATE UPDATE ");
            root = «getWicketHomePageClass()».update(root);
        }
        innerModel.setObject(root);
    }
     owningPage.modelChanged();
}
«ENDDEFINE»

«DEFINE runRemoveFromSingle(String context) FOR Process»  
public void run(«context» element) {
    Collection<«context»> list = (Collection<«context»>)model.getObject();
    list.remove(element);
    
    IModel innerModel = Helpers.findInnerMostModel(model);
    Object object = innerModel.getObject();
    if (object instanceof AbstractDto) {
        AbstractDto root = (AbstractDto) innerModel.getObject();
        if (root.getId() == null) {
            root = «getWicketHomePageClass()».create(root);
        } else {
            root = «getWicketHomePageClass()».update(root);
        }
        innerModel.setObject(root);
    }
    owningPage.modelChanged();
}
«ENDDEFINE»

«DEFINE GeneratePmfProcess FOR PresentationModel -»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GeneratePmfProcess in Process.xpt") FOR this-»
package «getPresentationRootPackage()».processes;

import java.io.Serializable;

import org.apache.wicket.MarkupContainer;
import org.apache.wicket.model.IModel;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationCommonPackage()».processes.ProcessType;

/**
 * A process definition as defined the the presentation DSL.S
 * @param <T> The context type of the process
 */
abstract public class PmfProcess <T> implements Serializable {
	
	abstract public ProcessType getProcessType() ;
	/**
	 * Rturns the next Page, will return null if there is no next page, e.g. when this is an Automated process.
	 */
    abstract public «getWicketMasterPageClass()» nextPage(T o);

    abstract public void nextStep(T o);

    abstract public void previousStep(T o);
	
    /** Run this process, only applicable to batch processes
     */
    abstract public void run(T o);

    /** Add : only for addto and link processes
     */
    abstract public void add(Object o);
	
	/**
	 * Is called by the Page that is started from this process to denote that the page (and its subprocesses)
	 * is ready.  Usually this means that the previous page (the owning page of this process must be restored.
	 */
	abstract public void done(«getWicketMasterPageClass()» page);

	public void cancel() {
	}

    protected «getWicketMasterPageClass()» owningPage = null;

    public «getWicketMasterPageClass()» getOwningPage() {
        return owningPage;
    }
    public void setOwningPage(«getWicketMasterPageClass()» page) {
        owningPage = page;
    }

    protected IModel model;
    
    public IModel getModel() {
        return model;
    }

    public void setModel(IModel model) {
        this.model = model;
    }

}
«ENDDEFINE»

«DEFINE runAddTo(String context) FOR Process»
@Override
public void add(Object o) {
    «IF this.type == ProcessType::ADDTO»
	    Collection<«this.contextRef.name»> list = (Collection<«this.contextRef.name»>)model.getObject();
	    Collection<«this.contextRef.name»> elements = (Collection<«this.contextRef.name»>) o;
	    list.addAll(elements);
	«ELSEIF this.type == ProcessType::LINK»
        «this.contextRef.name» dto = («this.contextRef.name»)model.getObject();
        List<«findType(this , this.link)»> elements = (List<«findType(this , this.link)»>) o;
        dto.set«context.toFirstUpper()»( elements.get(0) );
	«ENDIF»
    
    IModel innerModel = Helpers.findInnerMostModel(model);
    Object object = innerModel.getObject();
    if (object instanceof AbstractDto) {
        AbstractDto root = (AbstractDto) innerModel.getObject();
        if (root.getId() == null) {
            root = «getWicketHomePageClass()».create(root);
        } else {
            root = «getWicketHomePageClass()».update(root);
        }
        innerModel.setObject(root);
    }
    
    owningPage.modelChanged();
}
«ENDDEFINE»

«DEFINE GetProcessType FOR Process»
public ProcessType getProcessType() {
    return ProcessType.«this.type.toString()»;
}
«ENDDEFINE»

«DEFINE createModel FOR UICall »
    «IF this.getNavigationExpression() != null»
        «this.name»Model = new PropertyModel(model, "«this.getNavigationExpression().references.get(0).name»");
    «ELSEIF this.getStandardExpression() != null»
        «IF this.getStandardExpression().type == ExpressionType::ALL»
            «LET getWicketListAllDataProviderClass(this.referredUIModelElement().contextRef.name) AS providerType»
            «providerType» «this.name»provider = new «providerType»();
            «this.name»Model = new Model(«this.name»provider);
            «ENDLET»
        «ELSEIF this.getStandardExpression().type == ExpressionType::FIND»
            // TODO add Find providder IModel
        «ENDIF»
    «ELSEIF this.getServiceExpression() != null»
        «getWicketServiceDataProviderClass(this.referredUIModelElement().contextRef.name)» p = new «getWicketServiceDataProviderClass(this.referredUIModelElement().contextRef.name)»(context.getObject());
        «this.name»Model = new Model(p);
        // TODO add Service providder IModel
    «ELSE»    
        «this.name»Model = model;
    «ENDIF»
«ENDDEFINE»

