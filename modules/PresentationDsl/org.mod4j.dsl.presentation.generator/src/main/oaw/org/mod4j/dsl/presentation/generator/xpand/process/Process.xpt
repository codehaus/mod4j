«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»

«DEFINE GenerateProcesses FOR PresentationModel-»
    «FOREACH this.elements.typeSelect(Process) AS p»
        «LET javaPathFileName(getPresentationRootPackage() + ".processes." + p.name + "Process") AS filePath»
        «LET javaPathFileName(getPresentationRootPackage() + ".processes." + p.name + "ProcessImplBase") AS filePathImplBase»
 
        «FILE generate(getPresentationModuleName(""), filePathImplBase)»
	        «IF p.isInteractive() && (p.type != ProcessType::ADDTO) »
	            «EXPAND GenerateInteractiveProcessImplBase FOR p»
	        «ELSE»
	            «EXPAND GenerateBatchProcessImplBase FOR p»
	        «ENDIF»        
	    «ENDFILE»

        «IF shouldRegenerate(fullExtendPath(getPresentationModuleName(""), filePath ))»
            «print("MOD4J REGENERATE: [" + fullExtendPath(getPresentationModuleName(""), filePath) + "]")»
            «FILE extend(getPresentationModuleName(""), filePath)»
                «IF p.isInteractive() && (p.type != ProcessType::ADDTO) »
	                «EXPAND GenerateInteractiveProcess FOR p»
	            «ELSE»
	                «EXPAND GenerateBatchProcess FOR p»
	            «ENDIF»        
            «ENDFILE»
        «ENDIF»
        
        «ENDLET»
        «ENDLET»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE GenerateInteractiveProcess FOR Process -»
    «EXPAND JavaComments::extensionPointHeader ("Mod4j PresentationDsl generator: GenerateInteractiveProcess in Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

import org.apache.wicket.model.IModel;

public class «this.name»Process extends «this.name»ProcessImplBase 
{
   public «this.name»Process(IModel context){
        super(context);
    }
}
«ENDDEFINE»
 
 «DEFINE GenerateInteractiveProcessImplBase FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateInteractiveProcessImplBase in Process.xpt") FOR this»
«REM»
«LET getServiceExpression(dialogueCall) AS serviceExpression»
«LET getNavigationExpression(dialogueCall) AS navigationExpression»
«LET dialogueCall.referredContentForm().contextRef.name AS formContext»
«ENDREM»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «getPresentationRootPackage()».pages.«this.name»Page;
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationCommonPackage()».dataproviders.ModelBasedListDataProvider;
import «getPresentationCommonPackage()».ext.components.ListElementModel;

import java.util.Set;
import java.util.List;
import java.util.Collection;
import org.apache.wicket.Page;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.Model;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;
import «getPresentationCommonPackage()».processes.ProcessType;

public class «this.name»ProcessImplBase extends PmfProcess<«this.contextRef.name»> 
{
    public «this.name»ProcessImplBase(IModel context){
        model = context;
    }
    
    «EXPAND GetProcessType FOR this»

    public «getWicketMasterPageClass()» nextPage(«this.contextRef.name» element) {
    «IF this.type == ProcessType::NEW»
        «this.contextRef.name» newDto = new «this.contextRef.name»();
        Object object = model.getObject();
        if( object instanceof IDataProvider ){      
            model = new Model(newDto);
        } else if ( object instanceof Collection){
            Collection<«this.contextRef.name»> list = (Collection<«this.contextRef.name»>)object;
            list.add(newDto);
            ListElementModel<«this.contextRef.name»> pageModel = new ListElementModel<«this.contextRef.name»>("id",null, model);
            model = pageModel;
        } else {
            throw new RuntimeException("MOD$J Error: GGGGGGGGGGGGGGGGGGGGGGGGGGGGG");
        }
        «this.name»Page page = new «this.name»Page(this, model);
        page.setProcess(this);
        return page;
    
    «ELSEIF this.type == ProcessType::SAVE»
        return null;
    «ELSEIF this.type == ProcessType::EDIT»
        «this.name»Page page = new «this.name»Page (this, model);
        page.setProcess(this);
        return page;
    «ELSEIF this.type == ProcessType::DELETE»
        return null;
    «ELSEIF this.type == ProcessType::ADDTO»
        return null;
    «ELSEIF this.type == ProcessType::CANCEL»
        return null;
    «ELSEIF this.type == ProcessType::CUSTOM»
        «this.name»Page page = new «this.name»Page (this, model);
        page.setProcess(this);
        return page;
    «ENDIF»
    }
    
    «IF this.type == ProcessType::ADDTO»
    
    «ENDIF»

    public void done(«getWicketMasterPageClass()» page){
        getOwningPage().setResponsePage(getOwningPage());
    }
}
«ENDDEFINE»
 


«REM» Gebnerate for process w
«ENDREM»
«DEFINE GenerateBatchProcess FOR Process -»
    «EXPAND JavaComments::extensionPointHeader ("Mod4j PresentationDsl generator: GenerateBatchProcess  in Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaDtoClassPath(this.contextRef.name)»;

import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

/** Automated process
 */
public class «this.name»Process extends «this.name»ProcessImplBase 
{
    public «this.name»Process(IModel context){
        super(context);
    }
    
	«IF this.type == ProcessType::CUSTOM»
	   «IF this.collectionContext»
            public void run(List<«this.contextRef.name»> elements) {
                // TODO: Implement run action for Custom batch process
                throw new RuntimeException("Process «this.label» is not iomplemented yet [" + elements.toString() + "]");
            }
	   «ELSE»
			public void run(«this.contextRef.name» element) {
				// TODO: Implement run action for Custom batch process
				throw new RuntimeException("Process «this.label» is not iomplemented yet");
	    	}
        «ENDIF»
    «ENDIF»
}
«ENDDEFINE»

«DEFINE GenerateBatchProcessImplBase FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateBatchProcessBase in Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationCommonPackage()».ext.components.Helpers;
import org.mod4j.runtime.dto.AbstractDto;

import java.util.Collection;
import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;
import «getPresentationCommonPackage()».processes.ProcessType;
/** Automated process
 */
public class «this.name»ProcessImplBase extends PmfProcess<«this.contextRef.name»> 
{
    «EXPAND GetProcessType FOR this»

    public «this.name»ProcessImplBase (IModel context){
        this.model = context;
    }
    
    public «getWicketMasterPageClass()» nextPage(«this.contextRef.name» element) {
    	return null;
	}
	
	«IF this.type == ProcessType::SAVE»
		public void run(«this.contextRef.name» element) {
		    saveAction(element);
		}
	
		private void saveAction(«this.contextRef.name» element) {
	        IModel innerModel = Helpers.findInnerMostModel(model);
	        Object object = innerModel.getObject();
	        if( object instanceof AbstractDto ){
	            AbstractDto root = (AbstractDto)innerModel.getObject();
	            if( root.getId() == null ){
                    root  = «getWicketHomePageClass()».create(root);
	            } else {
                    root  = «getWicketHomePageClass()».update(root);
	            }
	            innerModel.setObject(root);
	        }
		}
	«ELSEIF this.type == ProcessType::DELETE»
	   «IF this.collectionContext»
	        public void run(List<«this.contextRef.name»> elements) {
	            deleteAction(elements);
	        }
	
	        private void deleteAction(List<«this.contextRef.name»> elements) {
	            for(«this.contextRef.name» dto : elements){
	                if( dto.getId() == null ){
	                    System.out.println("DELETE NON EXISTING OBJECT DELETE NON EXISTING OBJECT DELETE NON EXISTING OBJECT ");
	                } else {
	                    «getWicketHomePageClass()».delete(dto);
	                }
		        }
	            owningPage.modelChanged();
	        }
	   «ELSE»
			public void run(«this.contextRef.name» element) {
				deleteAction(element);
	    	}
	
			private void deleteAction(«this.contextRef.name» element) {
		        IModel innerModel = Helpers.findInnerMostModel(model);
		        Object object = innerModel.getObject();
		        if( object instanceof «this.contextRef.name»){
		            «this.contextRef.name» root = («this.contextRef.name»)innerModel.getObject();
		            if( root.getId() == null ){
		                System.out.println("DELETE NON EXISTING OBJECT DELETE NON EXISTING OBJECT DELETE NON EXISTING OBJECT ");
		            } else {
	                    «getWicketHomePageClass()».delete(root);
		            }
		            innerModel.setObject(null);
		        }
		        owningPage.modelChanged();
			}
		«ENDIF»
	«ELSEIF this.type == ProcessType::CANCEL »
		public void run(«this.contextRef.name» element) {
			// do nothing, will return to previous page
    	}
    «ELSEIF this.type == ProcessType::REMOVEFROM»
        «IF this.collectionContext»
	        public void run(List<«this.contextRef.name»> elements) {
		        Collection<«this.contextRef.name»> list = (Collection<«this.contextRef.name»>)model.getObject();
		        list.removeAll(elements);
		        
		        IModel innerModel = Helpers.findInnerMostModel(model);
		        Object object = innerModel.getObject();
		        if (object instanceof AbstractDto) {
		            AbstractDto root = (AbstractDto) innerModel.getObject();
		            if (root.getId() == null) {
		                System.out
		                        .println("CREATE CREATE CREATE CREATE CREATE CREATE CREATE CREATE ");
		
		                root = «getWicketHomePageClass()».create(root);
		            } else {
		                System.out
		                        .println("UPDATE UPDATE UPDATE UPDATE UPDATE UPDATE UPDATE UPDATE ");
		
		                root = «getWicketHomePageClass()».update(root);
		            }
		            innerModel.setObject(root);
		        }
		
	            owningPage.modelChanged();
	        }
	    «ELSE»
            public void run(«this.contextRef.name» element) {
                Collection<«this.contextRef.name»> list = (Collection<«this.contextRef.name»>)model.getObject();
                list.remove(element);
                
                IModel innerModel = Helpers.findInnerMostModel(model);
                Object object = innerModel.getObject();
                if (object instanceof AbstractDto) {
                    AbstractDto root = (AbstractDto) innerModel.getObject();
                    if (root.getId() == null) {
                        root = «getWicketHomePageClass()».create(root);
                    } else {
                        root = «getWicketHomePageClass()».update(root);
                    }
                    innerModel.setObject(root);
                }
                owningPage.modelChanged();
            }
	    «ENDIF»
    «ELSEIF this.type == ProcessType::ADDTO»
        public void run(List<«this.contextRef.name»> elements) {
            Collection<«this.contextRef.name»> list = (Collection<«this.contextRef.name»>)model.getObject();
            list.addAll(elements);
            
            IModel innerModel = Helpers.findInnerMostModel(model);
            Object object = innerModel.getObject();
            if (object instanceof AbstractDto) {
                AbstractDto root = (AbstractDto) innerModel.getObject();
                if (root.getId() == null) {
                    root = «getWicketHomePageClass()».create(root);
                } else {
                    root = «getWicketHomePageClass()».update(root);
                }
                innerModel.setObject(root);
            }
    
            owningPage.modelChanged();
        }
	«ELSE»
		public void run(«this.contextRef.name» element) {
			// TODO: Implement run action for batch process
			throw new RuntimeException("Process «this.label» is not iomplemented yet");
    	}
	«ENDIF»
	public void done(«getWicketMasterPageClass()» page){
	    getOwningPage().setResponsePage(getOwningPage());
	}
	
}
«REM»«ENDLET»«ENDLET»«ENDLET»«ENDLET»«ENDLET»«ENDREM»
«ENDDEFINE»


«DEFINE GeneratePmfProcess FOR PresentationModel -»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GeneratePmfProcess in Process.xpt") FOR this-»
package «getPresentationRootPackage()».processes;

import org.apache.wicket.MarkupContainer;
import org.apache.wicket.model.IModel;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationCommonPackage()».processes.ProcessType;

/**
 * A process definition as defined the the presentation DSL.S
 * @param <T> The context type of the process
 */
abstract public class PmfProcess <T> {
	
	abstract public ProcessType getProcessType() ;
	/**
	 * Rturns the next Page, will return null if there is no next page, e.g. when this is an Automated process.
	 */
	abstract public «getWicketMasterPageClass()» nextPage(T o);
	
	/**
	 * Is called by the Page that is started from this process to denote that the page (and its subprocesses)
	 * is ready.  Usually this means that the previous page (the owning page of this process must be restored.
	 */
	abstract public void done(«getWicketMasterPageClass()» page);

    protected MarkupContainer initiator = null;

    public MarkupContainer getInitator() {
        return initiator;
    }
    public void setInitator(MarkupContainer container) {
        initiator = container;
    }
    
    protected «getWicketMasterPageClass()» owningPage = null;

    public «getWicketMasterPageClass()» getOwningPage() {
        return owningPage;
    }
    public void setOwningPage(«getWicketMasterPageClass()» page) {
        owningPage = page;
    }

    protected IModel model;
    
    public IModel getModel() {
        return model;
    }

    public void setModel(IModel model) {
        this.model = model;
    }

}
«ENDDEFINE»

«DEFINE GetProcessType FOR Process»
public ProcessType getProcessType() {
    return ProcessType.«this.type.toString()»;
}
«ENDDEFINE»