«IMPORT PresentationDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dsl::presentation::mm::helpers::PresentationHelpers»
«EXTENSION org::mod4j::dsl::presentation::generator::xtend::helpers»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»

«DEFINE GenerateProcesses FOR PresentationModel-»
    «FOREACH this.elements.typeSelect(Process) AS p»
		«LET p.processElements.referredContentForm().select(f | f.collectionContext).first() AS form»
		«LET p.processElements.typeSelect(DialogueCall).select(dia | dia.contextExp != null).first() AS dialogueCallWithContext»
		«LET p.processElements.referredContentForm().select(f | ! f.collectionContext).first() AS nonCollectionForm»
		«LET p.processElements.typeSelect(DialogueCall).first() AS dialogueCall»

		«LET javaPathFileName(getPresentationRootPackage() + ".processes." + p.name + "Process") AS filePath»
		«LET javaPathFileName(getPresentationRootPackage() + ".processes." + p.name + "ProcessImplBase") AS filePathImplBase»

		«REM»Generate implementation file «ENDREM»
		«FILE generate(getPresentationModuleName(""), filePathImplBase)»
			«IF (form != null) && (dialogueCallWithContext != null) && (p.type == ProcessType::CUSTOM) »
			    «EXPAND GenerateProcessWithListFormImplBase(form, dialogueCallWithContext) FOR p»
		    «ELSEIF ! p.isInteractive() »
		        «EXPAND GenerateBatchProcessImplBase FOR p»
		    «ELSEIF (form != null) && (dialogueCallWithContext == null) && (p.type == ProcessType::CUSTOM)»
		        «EXPAND GenerateProcessWithListFormImplBase(form, dialogueCall) FOR p»
            «ELSEIF (form != null) && (dialogueCallWithContext == null) && (p.type == ProcessType::ADDTO)»
                «EXPAND GenerateProcessWithListFormImplBase(form, dialogueCall) FOR p»
		    «ELSE»
		        «EXPAND GenerateProcessWithSingleFormImplBase(nonCollectionForm, dialogueCall) FOR p»
			«ENDIF»
		«ENDFILE»

		«IF shouldRegenerate(fullExtendPath(getPresentationModuleName(""), filePath ))»
			«print("MOD4J REGENERATE: [" + fullExtendPath(getPresentationModuleName(""), filePath) + "]")»
			«FILE extend(getPresentationModuleName(""), filePath)»
				«IF (form != null) && (dialogueCallWithContext != null) && (p.type == ProcessType::CUSTOM) »
				    «EXPAND GenerateProcessWithListForm(form, dialogueCallWithContext) FOR p»
			    «ELSEIF ! p.isInteractive() »
			        «EXPAND GenerateBatchProcess FOR p»
			    «ELSEIF (form != null) && (dialogueCallWithContext == null) && (p.type == ProcessType::CUSTOM)»
			        «EXPAND GenerateProcessWithListForm(form, dialogueCall) FOR p»
			    «ELSE»
			        «EXPAND GenerateProcessWithSingleForm(nonCollectionForm, dialogueCall) FOR p»
				«ENDIF»
	        «ENDFILE»
		«ELSE»
			«print("MOD4J RETAIN    : [" + fullExtendPath(getPresentationModuleName(""), filePath)+ "]")»
			«retain(getPresentationModuleName(""), filePath)»
	    «ENDIF»
		«ENDLET»
		«ENDLET»
		«ENDLET»
		«ENDLET»
		«ENDLET»
		«ENDLET»

    «ENDFOREACH»
«ENDDEFINE»
 

«REM» Generate code for process witrjh a diaologuecall that is a collection and has a context expression
«ENDREM»
«DEFINE GenerateProcessWithListForm(ContentForm form, DialogueCall dialogueCall) FOR Process -»
    «EXPAND JavaComments::extensionPointHeader ("Mod4j PresentationDsl generator: GenerateProcessWithListForm in Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

public class «this.name»Process extends «this.name»ProcessImplBase 
{
}
«ENDDEFINE»

«REM» Generate code for process witrjh a diaologuecall that is a collection and has a context expression
«ENDREM»
«DEFINE GenerateProcessWithListFormImplBase(ContentForm form, DialogueCall dialogueCall) FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateProcessWithListFormImplBase in Process.xpt") FOR this»
«LET getServiceExpression(dialogueCall) AS serviceExpression»
«LET getNavigationExpression(dialogueCall) AS navigationExpression»
«LET getStandardExpression(dialogueCall) AS standardExpression»
«LET findServiceWithMethod(this.contextRef.name, "UPDATE") AS service»
«LET findSpecialMethodInService(this.contextRef.name, "UPDATE", service) AS updateService»
package «getPresentationRootPackage()».processes;

«IF serviceExpression != null»
	import «javaLocalServiceInterfacePath(serviceExpression.serviceName)» ;
	import «getPresentationRootPackage()».dataproviders.«getWicketServiceDataProviderClass(form.contextRef.name)» ;
«ELSEIF (standardExpression != null) »
    «IF (standardExpression.type == ExpressionType::ALL) »
		import «javaLocalServiceInterfacePath(service)» ;
		import «getPresentationRootPackage()».dataproviders.«getWicketListAllDataProviderClass(form.contextRef.name)» ;
    «ELSEIF (standardExpression.type == ExpressionType::FIND) »
		import «javaLocalServiceInterfacePath(service)» ;
		import «getPresentationRootPackage()».dataproviders.«getWicketFinderDataProviderClass(form.contextRef.name)» ;
	«ENDIF»
«ELSEIF navigationExpression != null»
	«LET getResultType(this.contextRef.modelName, this.contextRef.name, navigationExpression) AS resultType» 
	«IF navigationExpression.composition»
        import «getPresentationRootPackage()».dataproviders.«getWicketCompositeDataProviderClass(this.contextRef.name, resultType)»; 
    «ELSE»
        import «getPresentationRootPackage()».dataproviders.«getWicketReferenceDataProviderClass(this.contextRef.name, resultType)»; 
    «ENDIF»
	import «javaLocalServiceInterfacePath(service)» ;
	import «javaDtoClassPath(form.contextRef.name)»;
	«ENDLET»
«ELSE»
«REM»no service expression, must be a navugation or no expression«ENDREM»
«ENDIF»

import «getPresentationRootPackage()».dataproviders.PmfListDataProvider;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «getPresentationRootPackage()».pages.«this.name»«dialogueCall.name»Page;
import «javaDtoClassPath(this.contextRef.name)»;

import java.util.List;
import java.util.ArrayList;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

public class «this.name»ProcessImplBase extends Page implements PmfProcess<«this.contextRef.name»> 
{
    «EXPAND GetProcessType FOR this»
    «IF (serviceExpression != null) »
	    «javaLocalServiceInterface(service)» service;
	 «ELSEIF navigationExpression != null »
	    «javaLocalServiceInterface(service)» service;
	 «ELSEIF standardExpression != null »
	    «javaLocalServiceInterface(service)» service;
	 «ELSE»
	     «REM»No ecxpression«ENDREM»
	 «ENDIF»

    public «getWicketMasterPageClass()» nextPage(«this.contextRef.name» element) {
		«IF navigationExpression != null»
			«LET this.contextRef AS context»	   
			«LET getResultType(context.modelName, context.name, navigationExpression) AS resultType» 
            «IF navigationExpression.composition»
				«LET getWicketCompositeDataProviderClass(context.name, resultType) AS provider» 
				«provider» provider = new «provider»(element);
				«ENDLET»
			«ELSE»
                «LET getWicketReferenceDataProviderClass(context.name, resultType) AS provider» 
                «provider» provider = new «provider»(element);
                «ENDLET»
			«ENDIF»
			«this.name»«form.name»Page page = new «this.name»«form.name»Page(this, provider);
			page.setProcess(this);
			return page;
			«ENDLET»
			«ENDLET»
	    «ELSEIF (standardExpression != null)» 
	        «IF (standardExpression.type == ExpressionType::ALL) »
				«getWicketListAllDataProviderClass(form.contextRef.name)» provider = new «getWicketListAllDataProviderClass(form.contextRef.name)»();
				«this.name»«form.name»Page page = new «this.name»«form.name»Page(this, provider);
				page.setProcess(this);
				return page;
		    «ELSEIF (standardExpression.type == ExpressionType::FIND) »
				«getWicketFinderDataProviderClass(form.contextRef.name)» provider = new «getWicketFinderDataProviderClass(form.contextRef.name)»(element);
				«this.name»«form.name»Page page = new «this.name»«form.name»Page(this, provider);
				page.setProcess(this);
				return page;
			«ENDIF»
	    «ELSEIF serviceExpression != null »
	        «LET serviceCallResultType(this.contextRef.name, serviceExpression) AS resultType»
                «getWicketServiceDataProviderClass(form.contextRef.name)» provider = new «getWicketServiceDataProviderClass(form.contextRef.name)»(element);
                «this.name»«form.name»Page page = new «this.name»«form.name»Page(this, provider);
                page.setProcess(this);
                return page;
	    	«ENDLET»
		«ELSE»
			«this.name»«form.name»Page page = new «this.name»«form.name»Page(this, getOwningPage().getProvider());
			page.setProcess(this);
			return page;
			// TODO: this should not happen: no cotxt expressio n for dialogue of process «this.name»
		«ENDIF»
	}
	
    public «getWicketMasterPageClass()» nextPage(List<«this.contextRef.name»> selectedElements) {
    «IF dialogueCall.contextExp == null»
        PmfListDataProvider<«this.contextRef.name»> provider =
            new PmfListDataProvider<«this.contextRef.name»>(selectedElements);

        «this.name»«form.name»Page page = new «this.name»«form.name»Page (this, provider);
        page.setProcess(this);
        return page;
    «ELSE»
        return null;
    «ENDIF»
	}

	public void done(«getWicketMasterPageClass()» page){
	}
	protected «getWicketMasterPageClass()» owningPage = null;
	
	public «getWicketMasterPageClass()» getOwningPage() {
	    return owningPage;
	}
	public void setOwningPage(«getWicketMasterPageClass()» page) {
		owningPage = page;
	}

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«DEFINE GenerateProcessWithSingleForm(ContentForm form, DialogueCall dialogueCall) FOR Process -»
    «EXPAND JavaComments::extensionPointHeader ("Mod4j PresentationDsl generator: GenerateProcessWithSingleForm in Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

public class «this.name»Process extends «this.name»ProcessImplBase 
{
}
«ENDDEFINE»

«REM» Generate code for process with a diaologuecall that is a not collection 
«ENDREM»
«DEFINE GenerateProcessWithSingleFormImplBase(ContentForm form, DialogueCall dialogueCall) FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateProcessWithSingleFormImplBase in Process.xpt") FOR this»
«LET getServiceExpression(dialogueCall) AS serviceExpression»
«LET getNavigationExpression(dialogueCall) AS navigationExpression»
«LET getWicketServiceDataProviderClass(form.contextRef.name) AS provider»
«LET dialogueCall.referredContentForm().contextRef.name AS formContext»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
«IF ! (dialogueCall == null)»
import «getPresentationRootPackage()».pages.«this.name»«dialogueCall.name»Page;
«ENDIF»
import «javaDtoClassPath(formContext)»;
import «javaDtoClassPath(this.contextRef.name)»;
import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;

import java.util.List;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

public class «this.name»ProcessImplBase extends Page implements PmfProcess<«this.contextRef.name»> 
{
    «EXPAND GetProcessType FOR this»
    «IF (serviceExpression != null) »
	 «ELSEIF navigationExpression != null »
	 «ELSE»
	 «ENDIF»
	 «REM»PROVIDER ALWAYS NECCESARY ? «ENDREM»
        private Mod4jDataProvider<«form.contextRef.name»> provider = null;

        public Mod4jDataProvider<«form.contextRef.name»> getProvider() {
            return provider;
        }
    
        public void setProvider(Mod4jDataProvider<«form.contextRef.name»> provider) {
            this.provider = provider;
        }

    public «getWicketMasterPageClass()» nextPage(«this.contextRef.name» element) {
	«IF this.type == ProcessType::NEW»
	// NEW
		«this.contextRef.name» newDto = provider.newDto();
		«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page(
				this, new CompoundPropertyModel<«this.contextRef.name»>(newDto));
		page.setProvider(provider);
		page.setProcess(this);
		page.editOn(true);
		return page;
	
	«ELSEIF this.type == ProcessType::SAVE»
	// SAVE
    	return null;
	«ELSEIF this.type == ProcessType::EDIT»
	// EDIT
	    «IF navigationExpression != null »
			«formContext» newElement = element.get«navigationExpression.references.first().name.toFirstUpper()»	();   
			«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page (this,
			         new CompoundPropertyModel<«formContext»>(newElement));
	    «ELSE»
			«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page (this,
			         new CompoundPropertyModel<«this.contextRef.name»>(element));
		«ENDIF»
		page.setProvider(provider);
		page.editOn(true);
		page.setProcess(this);
		return page;
	«ELSEIF this.type == ProcessType::DELETE»
	// REMOVE
    	return null;
	«ELSEIF this.type == ProcessType::CANCEL»
	// CANCEL
    	return null;
	«ELSEIF this.type == ProcessType::CUSTOM»
		«this.name»«dialogueCall.name»Page page = new «this.name»«dialogueCall.name»Page (this,
			         new CompoundPropertyModel<«this.contextRef.name»>(element));
		page.setProvider(provider);
		page.editOn(false);
		page.setProcess(this);
		return page;
	«ENDIF»
	}

	public void done(«getWicketMasterPageClass()» page){
	    getOwningPage().setResponsePage(getOwningPage());
	}
	protected «getWicketMasterPageClass()» owningPage = null;
	
	public «getWicketMasterPageClass()» getOwningPage() {
	    return owningPage;
	}
	public void setOwningPage(«getWicketMasterPageClass()» page) {
		owningPage = page;
	}

}
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«REM» Gebnerate for process w
«ENDREM»
«DEFINE GenerateBatchProcess FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateBatchProcess  in Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaDtoClassPath(this.contextRef.name)»;

import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

/** Automated process
 */
public class «this.name»Process extends «this.name»ProcessImplBase 
{
	«IF this.type == ProcessType::CUSTOM»
	   «IF this.collectionContext»
            public void run(List<«this.contextRef.name»> elements) {
                // TODO: Implement run action for Custom batch process
                throw new RuntimeException("Process «this.label» is not iomplemented yet [" + elements.toString() + "]");
            }
	   «ELSE»
			public void run(«this.contextRef.name» element) {
				// TODO: Implement run action for Custom batch process
				throw new RuntimeException("Process «this.label» is not iomplemented yet");
	    	}
        «ENDIF»
    «ENDIF»
}
«ENDDEFINE»

«DEFINE GenerateBatchProcessImplBase FOR Process -»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GenerateBatchProcessBase in Process.xpt") FOR this»
package «getPresentationRootPackage()».processes;

import «getPresentationRootPackage()».dataproviders.Mod4jDataProvider;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;
import «getPresentationRootPackage()».pages.«getWicketHomePageClass()»;
import «javaDtoClassPath(this.contextRef.name)»;

import java.util.List;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.apache.wicket.Page;
import org.apache.wicket.model.CompoundPropertyModel;
import org.apache.wicket.model.IModel;
import org.apache.wicket.markup.repeater.data.IDataProvider;
import org.apache.wicket.markup.repeater.data.ListDataProvider;

/** Automated process
 */
public class «this.name»ProcessImplBase implements PmfProcess<«this.contextRef.name»> 
{
    «EXPAND GetProcessType FOR this»
    private Mod4jDataProvider<«this.contextRef.name»> provider = null;

		public Mod4jDataProvider<«this.contextRef.name»> getProvider() {
		return provider;
	}

	public void setProvider(Mod4jDataProvider<«this.contextRef.name»> provider) {
		this.provider = provider;
	}

    public «getWicketMasterPageClass()» nextPage(«this.contextRef.name» element) {
    	return null;
	}
	
	«IF this.type == ProcessType::SAVE»
		public void run(«this.contextRef.name» element) {
		    saveAction(element);
		}
	
		private void saveAction(«this.contextRef.name» element) {
		    provider.saveDto(element);
		}
	«ELSEIF this.type == ProcessType::DELETE»
		public void run(«this.contextRef.name» element) {
			deleteAction(element);
    	}

		private void deleteAction(«this.contextRef.name» element) {
			provider.deleteDto(element);
			owningPage.modelChanged();
		}
	«ELSEIF this.type == ProcessType::CANCEL »
		public void run(«this.contextRef.name» element) {
			// do nothing, will return to previous page
    	}
    «ELSEIF this.type == ProcessType::REMOVEFROM»
        public void run(List<«this.contextRef.name»> elements) {
            provider.removeFromDtoList(elements);
            owningPage.modelChanged();
        }
	«ELSE»
		public void run(«this.contextRef.name» element) {
			// TODO: Implement run action for batch process
			throw new RuntimeException("Process «this.label» is not iomplemented yet");
    	}
	«ENDIF»
	public void done(«getWicketMasterPageClass()» page){
	    getOwningPage().setResponsePage(getOwningPage());
	}
	
	protected «getWicketMasterPageClass()» owningPage = null;
	
	public «getWicketMasterPageClass()» getOwningPage() {
	    return owningPage;
	}
	public void setOwningPage(«getWicketMasterPageClass()» page) {
		owningPage = page;
	}
}
«ENDDEFINE»


«DEFINE GeneratePmfProcess FOR PresentationModel -»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j PresentationDsl generator: GeneratePmfProcess in Process.xpt") FOR this-»
package «getPresentationRootPackage()».processes;

import org.apache.wicket.Page;
import «getPresentationRootPackage()».pages.«getWicketMasterPageClass()»;

/**
 * A process definition as defined the the presentation DSL.S
 * @param <T> The context type of the process
 */
public interface PmfProcess <T> {
	
	public ProcessType getProcessType() ;
	/**
	 * Rturns the next Page, will return null if there is no next page, e.g. when this is an Automated process.
	 */
	public «getWicketMasterPageClass()» nextPage(T o);
	
	/**
	 * Is called by the Page that is started from this process to denote that the page (and its subprocesses)
	 * is ready.  Usually this means that the previous page (the owning page of this process must be restored.
	 */
	public void done(«getWicketMasterPageClass()» page);

    /**
     * returns the page from which this process was started.
     */
	public «getWicketMasterPageClass()» getOwningPage();
	
	/**
	 * Set the page from which this process was started.
     */
	public void setOwningPage(«getWicketMasterPageClass()» page);

}
«ENDDEFINE»

«DEFINE GetProcessType FOR Process»
public ProcessType getProcessType() {
    return ProcessType.«this.type.toString()»;
}
«ENDDEFINE»