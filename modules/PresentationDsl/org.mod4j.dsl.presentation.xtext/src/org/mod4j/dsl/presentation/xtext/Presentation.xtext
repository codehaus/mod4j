grammar org.mod4j.dsl.presentation.xtext.Presentation with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.mod4j.dsl.presentation.mm/model/PresentationDsl.ecore"

//IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation

PresentationModel :
	(description=STRING )?
	"presentation" name = ID ";"
	(externalReferences += ExternalReference)*
	(elements += ModelElementWithContext)*
	;

ExternalReference :
    "from" modelName = ID "import" name = ID ";"
	;
	
ModelElementWithContext :
	UIModelElement //| Link
	;
	
UIModelElement :
	Dialogue | Process
	;
		
Dialogue :
	ContentForm | CompoundDialogue
	;
	
ContentForm :
	(description=STRING )?
    "form"
	
	 name = ID "context" (collectionContext ?= "list")? contextRef = [ExternalReference]
	"["
		("readonly" ((readonly?="true") | "false") ";")?
		(formElements += FormElement)*
		("actions" "[" (actions += Action ";" )* "]" )?
		("processes" "[" (processes += ProcessCallFromForm ";")* "]" )?
	"]"
	;

Action  returns Process:
	(description=STRING )? 
    (type=ProcessType)? 
    name=ID 
	(processElements += ActionDialogueCall ) ?
    ;
  	
enum ProcessType :
    NEW = "new" | SAVE = "save" | EDIT = "edit" | DELETE = "delete" | CANCEL = "cancel" |
    REMOVEFROM = "removefrom" | ADDTO = "addto"
;

CompoundDialogue :
	(description=STRING )?
	"CompoundDialogue" name = ID "context" contextRef = [ExternalReference]
	("readonly" ((readonly?="true") | "false") ";")?
	
		("dialogues" "[" (dialogues += DialogueCall ";")* "]" )?
		("processes" "[" (processes += ProcessCall ";")* "]" )?  
		| CollectionDialogue
		| MasterDetail
	
	;
		
CollectionDialogue :
	(description=STRING )?
	"CollectionDialogue" name = ID "context" contextRef = [ExternalReference]
	"["
		("readonly" ((readonly?="true") | "false") ";")?
		("dialogues" "[" (dialogues += DialogueCall ";")* "]" )?
		("processes" "[" (processes += ProcessCall ";")* "]" )?
	"]"
	;
	
MasterDetail :
	(description=STRING )?
	"MasterDetail" name = ID "context" contextRef = [ExternalReference]
	("readonly" ((readonly?="true") | "false") ";")?
	"master" master = DialogueCall ";"
	"detail" detail = DialogueCall ";"
	("processes" "[" (processes += ProcessCall ";")* "]" )?
	;

Process :
	(description=STRING )?
	"process" name = ID "context" (collectionContext ?= "list")? contextRef = [ExternalReference] "["
	(root ?= "start")?
	(type=ProcessType)?
    ( processElements += UICall ";")* 
	"]"
	;
	
FormElement :
	(description=STRING )?
	"element" 
//	("navigate" LinkRef "to")? 
	references = DtoPropertyReference 
	("label" label = STRING )?
	("readonly" ((readonly?="true") | "false") )?
	";"
	;
	
ActionDialogueCall returns DialogueCall:
    (contextExp = Expression)? "to" name = ID
    ("alias" alias = ID)? 
//    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
    ;

DialogueCall :
    ("if" "("  condition = OperationExpression ")")?
    (contextExp = Expression )? "dialogue" name = ID
    ("alias" alias = ID)? 
//    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
    ;

Expression :
    ServiceExpression | NavigationExpression | StandardExpression | OperationExpression
    ;
   	
ProcessCall :
    ("if" "("  condition = OperationExpression ")")?
    (contextExp = Expression)? 
     "process" name = ID
    ("alias" alias = ID)? 
//    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
    ;
    
OperationExpression :
    "call" name = ID;
    
ProcessCallFromForm returns ProcessCall :
//    (contextExp = ContextExpression)? 
     name = ID
    ("alias" alias = ID)? 
//    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
    ;

//ContextExpression returns StandardExpression :
//    type = ContextType ;
    
//enum ContextType returns ExpressionType :
//    SELECTION = "selection";

StandardExpression :
    type = ExpressionType;
    
enum ExpressionType :
    ALL = "all" | FIND = "find";

ServiceExpression :
    "service"  serviceName = ID "." serviceMethod = ID
    ;

NavigationExpression :
    (composition ?= "composite")? "navigate" references += AssociationRoleReference  
// TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
    ;

DtoPropertyReference :
	name = ID
	;

AssociationRoleReference :
	name = ID
	;
	
UICall :
	UIModelElementCall
	;
	
UIModelElementCall :
	DialogueCall |  ProcessCall
	;
	