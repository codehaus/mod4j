/*
* generated by Xtext
*/

package org.mod4j.dsl.presentation.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PresentationGrammarAccess implements IGrammarAccess {
	
	
	public class PresentationModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PresentationModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cApplicationModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormsAndProcessesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PresentationModel:
		//  ApplicationModel|FormsAndProcesses; 
		//
		////IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
		public ParserRule getRule() { return rule; }

		//ApplicationModel|FormsAndProcesses 
		//
		////IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
		public Alternatives getAlternatives() { return cAlternatives; }

		//ApplicationModel
		public RuleCall getApplicationModelParserRuleCall_0() { return cApplicationModelParserRuleCall_0; }

		//FormsAndProcesses
		public RuleCall getFormsAndProcessesParserRuleCall_1() { return cFormsAndProcessesParserRuleCall_1; }
	}

	public class ApplicationModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplicationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cApplicationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExternalReferencesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExternalReferencesExternalReferenceParserRuleCall_4_0 = (RuleCall)cExternalReferencesAssignment_4.eContents().get(0);
		private final Assignment cMainMenuAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMainMenuMenuParserRuleCall_5_0 = (RuleCall)cMainMenuAssignment_5.eContents().get(0);
		
		//ApplicationModel returns PresentationModel:
		//  description=STRING? "application" name=ID ";" externalReferences+=ExternalReference*
		//  mainMenu=Menu; 
		//   
		//
		//      
		//      
		//            
		//    
		//        
		//        
		//
		//
		////ProcessReference : 
		////    "from" modelName = ID "process" name = ID ";"
		////    ;
		public ParserRule getRule() { return rule; }

		//description=STRING? "application" name=ID ";" externalReferences+=ExternalReference*
		//mainMenu=Menu
		public Group getGroup() { return cGroup; }

		//description=STRING?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }

		//"application"
		public Keyword getApplicationKeyword_1() { return cApplicationKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//externalReferences+=ExternalReference*
		public Assignment getExternalReferencesAssignment_4() { return cExternalReferencesAssignment_4; }

		//ExternalReference
		public RuleCall getExternalReferencesExternalReferenceParserRuleCall_4_0() { return cExternalReferencesExternalReferenceParserRuleCall_4_0; }

		//mainMenu=Menu
		public Assignment getMainMenuAssignment_5() { return cMainMenuAssignment_5; }

		//Menu
		public RuleCall getMainMenuMenuParserRuleCall_5_0() { return cMainMenuMenuParserRuleCall_5_0; }
	}

	public class FormsAndProcessesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormsAndProcesses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cPresentationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExternalReferencesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExternalReferencesExternalReferenceParserRuleCall_4_0 = (RuleCall)cExternalReferencesAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsModelElementWithContextParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		
		//FormsAndProcesses returns PresentationModel:
		//  description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
		//  * elements+=ModelElementWithContext*; 
		//
		////ProcessReference : 
		////    "from" modelName = ID "process" name = ID ";"
		////    ;
		//
		//      
		//	  
		//	        
		//	
		//	    
		////    (mainMenu = Menu)
		public ParserRule getRule() { return rule; }

		//description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
		// * elements+=ModelElementWithContext* 
		//	  
		//	        
		//	
		//	    
		////    (mainMenu = Menu)
		public Group getGroup() { return cGroup; }

		//description=STRING?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }

		//"presentation"
		public Keyword getPresentationKeyword_1() { return cPresentationKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//externalReferences+=ExternalReference*
		public Assignment getExternalReferencesAssignment_4() { return cExternalReferencesAssignment_4; }

		//ExternalReference
		public RuleCall getExternalReferencesExternalReferenceParserRuleCall_4_0() { return cExternalReferencesExternalReferenceParserRuleCall_4_0; }

		//elements+=ModelElementWithContext*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }

		//ModelElementWithContext
		public RuleCall getElementsModelElementWithContextParserRuleCall_5_0() { return cElementsModelElementWithContextParserRuleCall_5_0; }
	}

	public class MenuElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Menu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMenuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartActionsMenuActionParserRuleCall_2_0 = (RuleCall)cStartActionsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Menu:
		//  "menu" "[" startActions+=MenuAction* "]";
		public ParserRule getRule() { return rule; }

		//"menu" "[" startActions+=MenuAction* "]"
		public Group getGroup() { return cGroup; }

		//"menu"
		public Keyword getMenuKeyword_0() { return cMenuKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//startActions+=MenuAction*
		public Assignment getStartActionsAssignment_2() { return cStartActionsAssignment_2; }

		//MenuAction
		public RuleCall getStartActionsMenuActionParserRuleCall_2_0() { return cStartActionsMenuActionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ExternalReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDtoReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPageReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cServiceReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExternalReference:
		//  DtoReference|PageReference|ServiceReference; 
		//
		//  
		//       
		//      
		////    ProcessReference | 
		////    DialogueReference |
		public ParserRule getRule() { return rule; }

		//DtoReference|PageReference|ServiceReference 
		//
		//  
		//       
		//      
		////    ProcessReference | 
		////    DialogueReference |
		public Alternatives getAlternatives() { return cAlternatives; }

		//DtoReference
		public RuleCall getDtoReferenceParserRuleCall_0() { return cDtoReferenceParserRuleCall_0; }

		//PageReference
		public RuleCall getPageReferenceParserRuleCall_1() { return cPageReferenceParserRuleCall_1; }

		//ServiceReference 
		////    ProcessReference | 
		////    DialogueReference |
		public RuleCall getServiceReferenceParserRuleCall_2() { return cServiceReferenceParserRuleCall_2; }
	}

	public class DtoReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DtoReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelNameIDTerminalRuleCall_1_0 = (RuleCall)cModelNameAssignment_1.eContents().get(0);
		private final Keyword cDtoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DtoReference:
		//  "from" modelName=ID "dto" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"from" modelName=ID "dto" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//modelName=ID
		public Assignment getModelNameAssignment_1() { return cModelNameAssignment_1; }

		//ID
		public RuleCall getModelNameIDTerminalRuleCall_1_0() { return cModelNameIDTerminalRuleCall_1_0; }

		//"dto"
		public Keyword getDtoKeyword_2() { return cDtoKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class PageReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelNameIDTerminalRuleCall_1_0 = (RuleCall)cModelNameAssignment_1.eContents().get(0);
		private final Keyword cPageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PageReference:
		//  "from" modelName=ID "page" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"from" modelName=ID "page" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//modelName=ID
		public Assignment getModelNameAssignment_1() { return cModelNameAssignment_1; }

		//ID
		public RuleCall getModelNameIDTerminalRuleCall_1_0() { return cModelNameIDTerminalRuleCall_1_0; }

		//"page"
		public Keyword getPageKeyword_2() { return cPageKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ServiceReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelNameIDTerminalRuleCall_1_0 = (RuleCall)cModelNameAssignment_1.eContents().get(0);
		private final Keyword cServiceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ServiceReference:
		//  "from" modelName=ID "service" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"from" modelName=ID "service" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//modelName=ID
		public Assignment getModelNameAssignment_1() { return cModelNameAssignment_1; }

		//ID
		public RuleCall getModelNameIDTerminalRuleCall_1_0() { return cModelNameIDTerminalRuleCall_1_0; }

		//"service"
		public Keyword getServiceKeyword_2() { return cServiceKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ModelElementWithContextElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElementWithContext");
		private final RuleCall cUIModelElementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ModelElementWithContext:
		//  UIModelElement; 
		//    
		//  
		//	  //| Link
		public ParserRule getRule() { return rule; }

		//UIModelElement 
		//	  //| Link
		public RuleCall getUIModelElementParserRuleCall() { return cUIModelElementParserRuleCall; }
	}

	public class UIModelElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIModelElement");
		private final RuleCall cAbstractDialogueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UIModelElement:
		//  AbstractDialogue;
		public ParserRule getRule() { return rule; }

		//AbstractDialogue
		public RuleCall getAbstractDialogueParserRuleCall() { return cAbstractDialogueParserRuleCall; }
	}

	public class AbstractDialogueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDialogue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cViewParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDialogue:
		//  View|Page;
		public ParserRule getRule() { return rule; }

		//View|Page
		public Alternatives getAlternatives() { return cAlternatives; }

		//View
		public RuleCall getViewParserRuleCall_0() { return cViewParserRuleCall_0; }

		//Page
		public RuleCall getPageParserRuleCall_1() { return cPageParserRuleCall_1; }
	}

	public class ViewElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cPanelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cExtendsKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cBaseViewAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cBaseViewViewCrossReference_3_0_1_0 = (CrossReference)cBaseViewAssignment_3_0_1.eContents().get(0);
		private final RuleCall cBaseViewViewIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cBaseViewViewCrossReference_3_0_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_0_3 = (Group)cGroup_3_0.eContents().get(3);
		private final Keyword cActionsKeyword_3_0_3_0 = (Keyword)cGroup_3_0_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_0_3_1 = (Keyword)cGroup_3_0_3.eContents().get(1);
		private final Assignment cActionsAssignment_3_0_3_2 = (Assignment)cGroup_3_0_3.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_3_0_3_2_0 = (RuleCall)cActionsAssignment_3_0_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_0_3_3 = (Keyword)cGroup_3_0_3.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_3_0_4 = (Keyword)cGroup_3_0.eContents().get(4);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cContextKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCollectionContextAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final Keyword cCollectionContextListKeyword_3_1_1_0 = (Keyword)cCollectionContextAssignment_3_1_1.eContents().get(0);
		private final Assignment cContextRefAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cContextRefDtoReferenceCrossReference_3_1_2_0 = (CrossReference)cContextRefAssignment_3_1_2.eContents().get(0);
		private final RuleCall cContextRefDtoReferenceIDTerminalRuleCall_3_1_2_0_1 = (RuleCall)cContextRefDtoReferenceCrossReference_3_1_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Assignment cFormElementsAssignment_3_1_4 = (Assignment)cGroup_3_1.eContents().get(4);
		private final RuleCall cFormElementsFormElementParserRuleCall_3_1_4_0 = (RuleCall)cFormElementsAssignment_3_1_4.eContents().get(0);
		private final Group cGroup_3_1_5 = (Group)cGroup_3_1.eContents().get(5);
		private final Keyword cActionsKeyword_3_1_5_0 = (Keyword)cGroup_3_1_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_5_1 = (Keyword)cGroup_3_1_5.eContents().get(1);
		private final Assignment cActionsAssignment_3_1_5_2 = (Assignment)cGroup_3_1_5.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_3_1_5_2_0 = (RuleCall)cActionsAssignment_3_1_5_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_5_3 = (Keyword)cGroup_3_1_5.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_3_1_6 = (Keyword)cGroup_3_1.eContents().get(6);
		
		//View:
		//  description=STRING? "panel" name=ID ("extends" baseView=[View] "[" ("actions" "["
		//  actions+=Action* "]")? "]"|"context" collectionContext?="list"? contextRef=[
		//  DtoReference] "[" formElements+=FormElement* ("actions" "[" actions+=Action* "]")? "]")
		//;
		public ParserRule getRule() { return rule; }

		//description=STRING? "panel" name=ID ("extends" baseView=[View] "[" ("actions" "["
		//actions+=Action* "]")? "]"|"context" collectionContext?="list"? contextRef=[
		//DtoReference] "[" formElements+=FormElement* ("actions" "[" actions+=Action* "]")? "]")
		public Group getGroup() { return cGroup; }

		//description=STRING?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }

		//"panel"
		public Keyword getPanelKeyword_1() { return cPanelKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"extends" baseView=[View] "[" ("actions" "[" actions+=Action* "]")? "]"|"context"
		//collectionContext?="list"? contextRef=[DtoReference] "[" formElements+=FormElement*
		//("actions" "[" actions+=Action* "]")? "]"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"extends" baseView=[View] "[" ("actions" "[" actions+=Action* "]")? "]"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"extends"
		public Keyword getExtendsKeyword_3_0_0() { return cExtendsKeyword_3_0_0; }

		//baseView=[View]
		public Assignment getBaseViewAssignment_3_0_1() { return cBaseViewAssignment_3_0_1; }

		//[View]
		public CrossReference getBaseViewViewCrossReference_3_0_1_0() { return cBaseViewViewCrossReference_3_0_1_0; }

		//ID
		public RuleCall getBaseViewViewIDTerminalRuleCall_3_0_1_0_1() { return cBaseViewViewIDTerminalRuleCall_3_0_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0_2() { return cLeftSquareBracketKeyword_3_0_2; }

		//("actions" "[" actions+=Action* "]")?
		public Group getGroup_3_0_3() { return cGroup_3_0_3; }

		//"actions"
		public Keyword getActionsKeyword_3_0_3_0() { return cActionsKeyword_3_0_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0_3_1() { return cLeftSquareBracketKeyword_3_0_3_1; }

		//actions+=Action*
		public Assignment getActionsAssignment_3_0_3_2() { return cActionsAssignment_3_0_3_2; }

		//Action
		public RuleCall getActionsActionParserRuleCall_3_0_3_2_0() { return cActionsActionParserRuleCall_3_0_3_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_0_3_3() { return cRightSquareBracketKeyword_3_0_3_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_0_4() { return cRightSquareBracketKeyword_3_0_4; }

		//"context" collectionContext?="list"? contextRef=[DtoReference] "[" formElements+=
		//FormElement* ("actions" "[" actions+=Action* "]")? "]"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"context"
		public Keyword getContextKeyword_3_1_0() { return cContextKeyword_3_1_0; }

		//collectionContext?="list"?
		public Assignment getCollectionContextAssignment_3_1_1() { return cCollectionContextAssignment_3_1_1; }

		//"list"
		public Keyword getCollectionContextListKeyword_3_1_1_0() { return cCollectionContextListKeyword_3_1_1_0; }

		//contextRef=[DtoReference]
		public Assignment getContextRefAssignment_3_1_2() { return cContextRefAssignment_3_1_2; }

		//[DtoReference]
		public CrossReference getContextRefDtoReferenceCrossReference_3_1_2_0() { return cContextRefDtoReferenceCrossReference_3_1_2_0; }

		//ID
		public RuleCall getContextRefDtoReferenceIDTerminalRuleCall_3_1_2_0_1() { return cContextRefDtoReferenceIDTerminalRuleCall_3_1_2_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_3() { return cLeftSquareBracketKeyword_3_1_3; }

		//formElements+=FormElement*
		public Assignment getFormElementsAssignment_3_1_4() { return cFormElementsAssignment_3_1_4; }

		//FormElement
		public RuleCall getFormElementsFormElementParserRuleCall_3_1_4_0() { return cFormElementsFormElementParserRuleCall_3_1_4_0; }

		//("actions" "[" actions+=Action* "]")?
		public Group getGroup_3_1_5() { return cGroup_3_1_5; }

		//"actions"
		public Keyword getActionsKeyword_3_1_5_0() { return cActionsKeyword_3_1_5_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_5_1() { return cLeftSquareBracketKeyword_3_1_5_1; }

		//actions+=Action*
		public Assignment getActionsAssignment_3_1_5_2() { return cActionsAssignment_3_1_5_2; }

		//Action
		public RuleCall getActionsActionParserRuleCall_3_1_5_2_0() { return cActionsActionParserRuleCall_3_1_5_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_5_3() { return cRightSquareBracketKeyword_3_1_5_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_6() { return cRightSquareBracketKeyword_3_1_6; }
	}

	public class MenuActionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MenuAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cAlternatives_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cTypeProcessTypeEnumRuleCall_4_0_0_0 = (RuleCall)cTypeAssignment_4_0_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cAlternatives_4_0.eContents().get(1);
		private final Assignment cTypeAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cTypeProcessTypeLinkEnumRuleCall_4_0_1_0_0 = (RuleCall)cTypeAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cContextExpAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cContextExpNavigationExpressionParserRuleCall_4_0_1_1_0 = (RuleCall)cContextExpAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cContextExpAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cContextExpExpressionParserRuleCall_4_1_0 = (RuleCall)cContextExpAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cPageKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cNextPageAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cNextPagePageCrossReference_5_2_0 = (CrossReference)cNextPageAssignment_5_2.eContents().get(0);
		private final RuleCall cNextPagePageIDTerminalRuleCall_5_2_0_1 = (RuleCall)cNextPagePageCrossReference_5_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MenuAction returns Action:
		//  description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
		//  ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
		//  "page" nextPage=[Page])? ";";
		public ParserRule getRule() { return rule; }

		//description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
		//ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
		//"page" nextPage=[Page])? ";"
		public Group getGroup() { return cGroup; }

		//description=STRING?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("label" label=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"label"
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_0() { return cLabelSTRINGTerminalRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(type=ProcessType|type=ProcessTypeLink contextExp=NavigationExpression)|
		//contextExp=Expression
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//type=ProcessType|type=ProcessTypeLink contextExp=NavigationExpression
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//type=ProcessType
		public Assignment getTypeAssignment_4_0_0() { return cTypeAssignment_4_0_0; }

		//ProcessType
		public RuleCall getTypeProcessTypeEnumRuleCall_4_0_0_0() { return cTypeProcessTypeEnumRuleCall_4_0_0_0; }

		//type=ProcessTypeLink contextExp=NavigationExpression
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//type=ProcessTypeLink
		public Assignment getTypeAssignment_4_0_1_0() { return cTypeAssignment_4_0_1_0; }

		//ProcessTypeLink
		public RuleCall getTypeProcessTypeLinkEnumRuleCall_4_0_1_0_0() { return cTypeProcessTypeLinkEnumRuleCall_4_0_1_0_0; }

		//contextExp=NavigationExpression
		public Assignment getContextExpAssignment_4_0_1_1() { return cContextExpAssignment_4_0_1_1; }

		//NavigationExpression
		public RuleCall getContextExpNavigationExpressionParserRuleCall_4_0_1_1_0() { return cContextExpNavigationExpressionParserRuleCall_4_0_1_1_0; }

		//contextExp=Expression
		public Assignment getContextExpAssignment_4_1() { return cContextExpAssignment_4_1; }

		//Expression
		public RuleCall getContextExpExpressionParserRuleCall_4_1_0() { return cContextExpExpressionParserRuleCall_4_1_0; }

		//("-->" "page" nextPage=[Page])?
		public Group getGroup_5() { return cGroup_5; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0; }

		//"page"
		public Keyword getPageKeyword_5_1() { return cPageKeyword_5_1; }

		//nextPage=[Page]
		public Assignment getNextPageAssignment_5_2() { return cNextPageAssignment_5_2; }

		//[Page]
		public CrossReference getNextPagePageCrossReference_5_2_0() { return cNextPagePageCrossReference_5_2_0; }

		//ID
		public RuleCall getNextPagePageIDTerminalRuleCall_5_2_0_1() { return cNextPagePageIDTerminalRuleCall_5_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ActionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cAlternatives_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cTypeProcessTypeEnumRuleCall_4_0_0_0 = (RuleCall)cTypeAssignment_4_0_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cAlternatives_4_0.eContents().get(1);
		private final Assignment cTypeAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cTypeProcessTypeLinkEnumRuleCall_4_0_1_0_0 = (RuleCall)cTypeAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cContextExpAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cContextExpNavigationExpressionParserRuleCall_4_0_1_1_0 = (RuleCall)cContextExpAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cContextExpAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cContextExpExpressionParserRuleCall_4_1_0 = (RuleCall)cContextExpAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cPageKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cNextPageAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cNextPagePageCrossReference_5_2_0 = (CrossReference)cNextPageAssignment_5_2.eContents().get(0);
		private final RuleCall cNextPagePageIDTerminalRuleCall_5_2_0_1 = (RuleCall)cNextPagePageCrossReference_5_2_0.eContents().get(1);
		private final Assignment cCollectionContextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cCollectionContextCollectionKeyword_6_0 = (Keyword)cCollectionContextAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Action:
		//  description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
		//  ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
		//  "page" nextPage=[Page])? collectionContext?="collection"? ";";
		public ParserRule getRule() { return rule; }

		//description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
		//ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
		//"page" nextPage=[Page])? collectionContext?="collection"? ";"
		public Group getGroup() { return cGroup; }

		//description=STRING?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("label" label=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"label"
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_0() { return cLabelSTRINGTerminalRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(type=ProcessType|type=ProcessTypeLink contextExp=NavigationExpression)|
		//contextExp=Expression
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//type=ProcessType|type=ProcessTypeLink contextExp=NavigationExpression
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//type=ProcessType
		public Assignment getTypeAssignment_4_0_0() { return cTypeAssignment_4_0_0; }

		//ProcessType
		public RuleCall getTypeProcessTypeEnumRuleCall_4_0_0_0() { return cTypeProcessTypeEnumRuleCall_4_0_0_0; }

		//type=ProcessTypeLink contextExp=NavigationExpression
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//type=ProcessTypeLink
		public Assignment getTypeAssignment_4_0_1_0() { return cTypeAssignment_4_0_1_0; }

		//ProcessTypeLink
		public RuleCall getTypeProcessTypeLinkEnumRuleCall_4_0_1_0_0() { return cTypeProcessTypeLinkEnumRuleCall_4_0_1_0_0; }

		//contextExp=NavigationExpression
		public Assignment getContextExpAssignment_4_0_1_1() { return cContextExpAssignment_4_0_1_1; }

		//NavigationExpression
		public RuleCall getContextExpNavigationExpressionParserRuleCall_4_0_1_1_0() { return cContextExpNavigationExpressionParserRuleCall_4_0_1_1_0; }

		//contextExp=Expression
		public Assignment getContextExpAssignment_4_1() { return cContextExpAssignment_4_1; }

		//Expression
		public RuleCall getContextExpExpressionParserRuleCall_4_1_0() { return cContextExpExpressionParserRuleCall_4_1_0; }

		//("-->" "page" nextPage=[Page])?
		public Group getGroup_5() { return cGroup_5; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0; }

		//"page"
		public Keyword getPageKeyword_5_1() { return cPageKeyword_5_1; }

		//nextPage=[Page]
		public Assignment getNextPageAssignment_5_2() { return cNextPageAssignment_5_2; }

		//[Page]
		public CrossReference getNextPagePageCrossReference_5_2_0() { return cNextPagePageCrossReference_5_2_0; }

		//ID
		public RuleCall getNextPagePageIDTerminalRuleCall_5_2_0_1() { return cNextPagePageIDTerminalRuleCall_5_2_0_1; }

		//collectionContext?="collection"?
		public Assignment getCollectionContextAssignment_6() { return cCollectionContextAssignment_6; }

		//"collection"
		public Keyword getCollectionContextCollectionKeyword_6_0() { return cCollectionContextCollectionKeyword_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class PageElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cShowsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDialogueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDialogueViewCrossReference_3_0 = (CrossReference)cDialogueAssignment_3.eContents().get(0);
		private final RuleCall cDialogueViewIDTerminalRuleCall_3_0_1 = (RuleCall)cDialogueViewCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Page:
		//  "page" name=ID "shows" dialogue=[View] ";";
		public ParserRule getRule() { return rule; }

		//"page" name=ID "shows" dialogue=[View] ";"
		public Group getGroup() { return cGroup; }

		//"page"
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"shows"
		public Keyword getShowsKeyword_2() { return cShowsKeyword_2; }

		//dialogue=[View]
		public Assignment getDialogueAssignment_3() { return cDialogueAssignment_3; }

		//[View]
		public CrossReference getDialogueViewCrossReference_3_0() { return cDialogueViewCrossReference_3_0; }

		//ID
		public RuleCall getDialogueViewIDTerminalRuleCall_3_0_1() { return cDialogueViewIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FormElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesDtoPropertyReferenceParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cReadonlyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cReadonlyAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final Keyword cReadonlyTrueKeyword_3_1_0_0 = (Keyword)cReadonlyAssignment_3_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FormElement:
		//  description=STRING? references=DtoPropertyReference ("label" label=STRING)? (
		//  "readonly" (readonly?="true"|"false"))? ";"; 
		//
		//  
		//	  
		////	("navigate" LinkRef "to")?
		public ParserRule getRule() { return rule; }

		//description=STRING? references=DtoPropertyReference ("label" label=STRING)? (
		//"readonly" (readonly?="true"|"false"))? ";" 
		//	  
		////	("navigate" LinkRef "to")?
		public Group getGroup() { return cGroup; }

		//description=STRING?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }

		//references=DtoPropertyReference 
		////	("navigate" LinkRef "to")?
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }

		//DtoPropertyReference
		public RuleCall getReferencesDtoPropertyReferenceParserRuleCall_1_0() { return cReferencesDtoPropertyReferenceParserRuleCall_1_0; }

		//("label" label=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"label"
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_0() { return cLabelSTRINGTerminalRuleCall_2_1_0; }

		//("readonly" (readonly?="true"|"false"))?
		public Group getGroup_3() { return cGroup_3; }

		//"readonly"
		public Keyword getReadonlyKeyword_3_0() { return cReadonlyKeyword_3_0; }

		//readonly?="true"|"false"
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//readonly?="true"
		public Assignment getReadonlyAssignment_3_1_0() { return cReadonlyAssignment_3_1_0; }

		//"true"
		public Keyword getReadonlyTrueKeyword_3_1_0_0() { return cReadonlyTrueKeyword_3_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_3_1_1() { return cFalseKeyword_3_1_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class MenuExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MenuExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cServiceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStandardExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MenuExpression returns Expression:
		//  ServiceExpression|StandardExpression|OperationExpression;
		public ParserRule getRule() { return rule; }

		//ServiceExpression|StandardExpression|OperationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ServiceExpression
		public RuleCall getServiceExpressionParserRuleCall_0() { return cServiceExpressionParserRuleCall_0; }

		//StandardExpression
		public RuleCall getStandardExpressionParserRuleCall_1() { return cStandardExpressionParserRuleCall_1; }

		//OperationExpression
		public RuleCall getOperationExpressionParserRuleCall_2() { return cOperationExpressionParserRuleCall_2; }
	}

	public class ExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cServiceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStandardExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperationExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//  ServiceExpression|NavigationExpression|StandardExpression|OperationExpression;
		public ParserRule getRule() { return rule; }

		//ServiceExpression|NavigationExpression|StandardExpression|OperationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ServiceExpression
		public RuleCall getServiceExpressionParserRuleCall_0() { return cServiceExpressionParserRuleCall_0; }

		//NavigationExpression
		public RuleCall getNavigationExpressionParserRuleCall_1() { return cNavigationExpressionParserRuleCall_1; }

		//StandardExpression
		public RuleCall getStandardExpressionParserRuleCall_2() { return cStandardExpressionParserRuleCall_2; }

		//OperationExpression
		public RuleCall getOperationExpressionParserRuleCall_3() { return cOperationExpressionParserRuleCall_3; }
	}

	public class OperationExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OperationExpression:
		//  "call" name=ID;
		public ParserRule getRule() { return rule; }

		//"call" name=ID
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class StandardExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StandardExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeExpressionTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cContextRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextRefDtoReferenceCrossReference_1_0 = (CrossReference)cContextRefAssignment_1.eContents().get(0);
		private final RuleCall cContextRefDtoReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cContextRefDtoReferenceCrossReference_1_0.eContents().get(1);
		
		//StandardExpression:
		//  type=ExpressionType contextRef=[DtoReference];
		public ParserRule getRule() { return rule; }

		//type=ExpressionType contextRef=[DtoReference]
		public Group getGroup() { return cGroup; }

		//type=ExpressionType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ExpressionType
		public RuleCall getTypeExpressionTypeEnumRuleCall_0_0() { return cTypeExpressionTypeEnumRuleCall_0_0; }

		//contextRef=[DtoReference]
		public Assignment getContextRefAssignment_1() { return cContextRefAssignment_1; }

		//[DtoReference]
		public CrossReference getContextRefDtoReferenceCrossReference_1_0() { return cContextRefDtoReferenceCrossReference_1_0; }

		//ID
		public RuleCall getContextRefDtoReferenceIDTerminalRuleCall_1_0_1() { return cContextRefDtoReferenceIDTerminalRuleCall_1_0_1; }
	}

	public class ServiceExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServiceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cServiceServiceReferenceCrossReference_1_0 = (CrossReference)cServiceAssignment_1.eContents().get(0);
		private final RuleCall cServiceServiceReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cServiceServiceReferenceCrossReference_1_0.eContents().get(1);
		
		//ServiceExpression:
		//  "service" service=[ServiceReference];
		public ParserRule getRule() { return rule; }

		//"service" service=[ServiceReference]
		public Group getGroup() { return cGroup; }

		//"service"
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }

		//service=[ServiceReference]
		public Assignment getServiceAssignment_1() { return cServiceAssignment_1; }

		//[ServiceReference]
		public CrossReference getServiceServiceReferenceCrossReference_1_0() { return cServiceServiceReferenceCrossReference_1_0; }

		//ID
		public RuleCall getServiceServiceReferenceIDTerminalRuleCall_1_0_1() { return cServiceServiceReferenceIDTerminalRuleCall_1_0_1; }
	}

	public class NavigationExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NavigationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesAssociationRoleReferenceParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		
		//NavigationExpression:
		//  "navigate" references+=AssociationRoleReference; 
		//
		//  
		//            
		//// TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
		public ParserRule getRule() { return rule; }

		//"navigate" references+=AssociationRoleReference 
		//            
		//// TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
		public Group getGroup() { return cGroup; }

		//"navigate"
		public Keyword getNavigateKeyword_0() { return cNavigateKeyword_0; }

		//references+=AssociationRoleReference         
		//// TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }

		//AssociationRoleReference     
		//// TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
		public RuleCall getReferencesAssociationRoleReferenceParserRuleCall_1_0() { return cReferencesAssociationRoleReferenceParserRuleCall_1_0; }
	}

	public class DtoPropertyReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DtoPropertyReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubnameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubnameIDTerminalRuleCall_1_1_0 = (RuleCall)cSubnameAssignment_1_1.eContents().get(0);
		
		//DtoPropertyReference:
		//  name=ID ("." subname=ID)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("." subname=ID)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("." subname=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//subname=ID
		public Assignment getSubnameAssignment_1_1() { return cSubnameAssignment_1_1; }

		//ID
		public RuleCall getSubnameIDTerminalRuleCall_1_1_0() { return cSubnameIDTerminalRuleCall_1_1_0; }
	}

	public class AssociationRoleReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssociationRoleReference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AssociationRoleReference:
		//  name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	public class ProcessTypeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEWNewKeyword_0_0 = (Keyword)cNEWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSAVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSAVESaveKeyword_1_0 = (Keyword)cSAVEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEDITEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEDITEditKeyword_2_0 = (Keyword)cEDITEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDELETEDeleteKeyword_3_0 = (Keyword)cDELETEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCANCELEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCANCELCancelKeyword_4_0 = (Keyword)cCANCELEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cREMOVEFROMEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cREMOVEFROMRemovefromKeyword_5_0 = (Keyword)cREMOVEFROMEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cADDTOEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cADDTOAddtoKeyword_6_0 = (Keyword)cADDTOEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCUSTOMEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCUSTOMCustomKeyword_7_0 = (Keyword)cCUSTOMEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ProcessType:
		//  NEW="new" | SAVE="save" | EDIT="edit" | DELETE="delete" | CANCEL="cancel" | REMOVEFROM=
		//  "removefrom" | ADDTO="addto" | CUSTOM="custom"; 
		//    
		//    
		//                                          
		//                          // | PREVIOUS = "back"
		public EnumRule getRule() { return rule; }

		//NEW="new" | SAVE="save" | EDIT="edit" | DELETE="delete" | CANCEL="cancel" | REMOVEFROM=
		//"removefrom" | ADDTO="addto" | CUSTOM="custom" 
		//    
		//    
		//                                          
		//                          // | PREVIOUS = "back"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NEW="new"
		public EnumLiteralDeclaration getNEWEnumLiteralDeclaration_0() { return cNEWEnumLiteralDeclaration_0; }

		//"new"
		public Keyword getNEWNewKeyword_0_0() { return cNEWNewKeyword_0_0; }

		//SAVE="save" 
		//                                          
		//                          // | PREVIOUS = "back"
		public EnumLiteralDeclaration getSAVEEnumLiteralDeclaration_1() { return cSAVEEnumLiteralDeclaration_1; }

		//"save"
		public Keyword getSAVESaveKeyword_1_0() { return cSAVESaveKeyword_1_0; }

		//EDIT="edit" 
		//                                          
		//                          // | PREVIOUS = "back"
		public EnumLiteralDeclaration getEDITEnumLiteralDeclaration_2() { return cEDITEnumLiteralDeclaration_2; }

		//"edit"
		public Keyword getEDITEditKeyword_2_0() { return cEDITEditKeyword_2_0; }

		//DELETE="delete" 
		//                                          
		//                          // | PREVIOUS = "back"
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_3() { return cDELETEEnumLiteralDeclaration_3; }

		//"delete"
		public Keyword getDELETEDeleteKeyword_3_0() { return cDELETEDeleteKeyword_3_0; }

		//CANCEL="cancel" 
		//                                          
		//                          // | PREVIOUS = "back"
		public EnumLiteralDeclaration getCANCELEnumLiteralDeclaration_4() { return cCANCELEnumLiteralDeclaration_4; }

		//"cancel"
		public Keyword getCANCELCancelKeyword_4_0() { return cCANCELCancelKeyword_4_0; }

		//REMOVEFROM="removefrom" 
		//                                          
		//                          // | PREVIOUS = "back"
		public EnumLiteralDeclaration getREMOVEFROMEnumLiteralDeclaration_5() { return cREMOVEFROMEnumLiteralDeclaration_5; }

		//"removefrom"
		public Keyword getREMOVEFROMRemovefromKeyword_5_0() { return cREMOVEFROMRemovefromKeyword_5_0; }

		//ADDTO="addto" 
		//                                          
		//                          // | PREVIOUS = "back"
		public EnumLiteralDeclaration getADDTOEnumLiteralDeclaration_6() { return cADDTOEnumLiteralDeclaration_6; }

		//"addto"
		public Keyword getADDTOAddtoKeyword_6_0() { return cADDTOAddtoKeyword_6_0; }

		//CUSTOM="custom" 
		//                                          
		//                          // | PREVIOUS = "back"
		public EnumLiteralDeclaration getCUSTOMEnumLiteralDeclaration_7() { return cCUSTOMEnumLiteralDeclaration_7; }

		//"custom"         // | PREVIOUS = "back"
		public Keyword getCUSTOMCustomKeyword_7_0() { return cCUSTOMCustomKeyword_7_0; }
	}

	public class ProcessTypeLinkElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessTypeLink");
		private final EnumLiteralDeclaration cLINKEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLINKLinkKeyword_0 = (Keyword)cLINKEnumLiteralDeclaration.eContents().get(0);
		
		//enum ProcessTypeLink returns ProcessType:
		//  LINK="link";
		public EnumRule getRule() { return rule; }

		//LINK="link"
		public EnumLiteralDeclaration getLINKEnumLiteralDeclaration() { return cLINKEnumLiteralDeclaration; }

		//"link"
		public Keyword getLINKLinkKeyword_0() { return cLINKLinkKeyword_0; }
	}

	public class ExpressionTypeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLAllKeyword_0_0 = (Keyword)cALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFINDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFINDFindKeyword_1_0 = (Keyword)cFINDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ExpressionType:
		//  ALL="all" | FIND="find";
		public EnumRule getRule() { return rule; }

		//ALL="all" | FIND="find"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALL="all"
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_0() { return cALLEnumLiteralDeclaration_0; }

		//"all"
		public Keyword getALLAllKeyword_0_0() { return cALLAllKeyword_0_0; }

		//FIND="find"
		public EnumLiteralDeclaration getFINDEnumLiteralDeclaration_1() { return cFINDEnumLiteralDeclaration_1; }

		//"find"
		public Keyword getFINDFindKeyword_1_0() { return cFINDFindKeyword_1_0; }
	}
	
	private PresentationModelElements pPresentationModel;
	private ApplicationModelElements pApplicationModel;
	private FormsAndProcessesElements pFormsAndProcesses;
	private MenuElements pMenu;
	private ExternalReferenceElements pExternalReference;
	private DtoReferenceElements pDtoReference;
	private PageReferenceElements pPageReference;
	private ServiceReferenceElements pServiceReference;
	private ModelElementWithContextElements pModelElementWithContext;
	private UIModelElementElements pUIModelElement;
	private AbstractDialogueElements pAbstractDialogue;
	private ViewElements pView;
	private MenuActionElements pMenuAction;
	private ActionElements pAction;
	private PageElements pPage;
	private ProcessTypeElements unknownRuleProcessType;
	private ProcessTypeLinkElements unknownRuleProcessTypeLink;
	private FormElementElements pFormElement;
	private MenuExpressionElements pMenuExpression;
	private ExpressionElements pExpression;
	private OperationExpressionElements pOperationExpression;
	private StandardExpressionElements pStandardExpression;
	private ExpressionTypeElements unknownRuleExpressionType;
	private ServiceExpressionElements pServiceExpression;
	private NavigationExpressionElements pNavigationExpression;
	private DtoPropertyReferenceElements pDtoPropertyReference;
	private AssociationRoleReferenceElements pAssociationRoleReference;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PresentationGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PresentationModel:
	//  ApplicationModel|FormsAndProcesses; 
	//
	////IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
	public PresentationModelElements getPresentationModelAccess() {
		return (pPresentationModel != null) ? pPresentationModel : (pPresentationModel = new PresentationModelElements());
	}
	
	public ParserRule getPresentationModelRule() {
		return getPresentationModelAccess().getRule();
	}

	//ApplicationModel returns PresentationModel:
	//  description=STRING? "application" name=ID ";" externalReferences+=ExternalReference*
	//  mainMenu=Menu; 
	//   
	//
	//      
	//      
	//            
	//    
	//        
	//        
	//
	//
	////ProcessReference : 
	////    "from" modelName = ID "process" name = ID ";"
	////    ;
	public ApplicationModelElements getApplicationModelAccess() {
		return (pApplicationModel != null) ? pApplicationModel : (pApplicationModel = new ApplicationModelElements());
	}
	
	public ParserRule getApplicationModelRule() {
		return getApplicationModelAccess().getRule();
	}

	//FormsAndProcesses returns PresentationModel:
	//  description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
	//  * elements+=ModelElementWithContext*; 
	//
	////ProcessReference : 
	////    "from" modelName = ID "process" name = ID ";"
	////    ;
	//
	//      
	//	  
	//	        
	//	
	//	    
	////    (mainMenu = Menu)
	public FormsAndProcessesElements getFormsAndProcessesAccess() {
		return (pFormsAndProcesses != null) ? pFormsAndProcesses : (pFormsAndProcesses = new FormsAndProcessesElements());
	}
	
	public ParserRule getFormsAndProcessesRule() {
		return getFormsAndProcessesAccess().getRule();
	}

	//Menu:
	//  "menu" "[" startActions+=MenuAction* "]";
	public MenuElements getMenuAccess() {
		return (pMenu != null) ? pMenu : (pMenu = new MenuElements());
	}
	
	public ParserRule getMenuRule() {
		return getMenuAccess().getRule();
	}

	//ExternalReference:
	//  DtoReference|PageReference|ServiceReference; 
	//
	//  
	//       
	//      
	////    ProcessReference | 
	////    DialogueReference |
	public ExternalReferenceElements getExternalReferenceAccess() {
		return (pExternalReference != null) ? pExternalReference : (pExternalReference = new ExternalReferenceElements());
	}
	
	public ParserRule getExternalReferenceRule() {
		return getExternalReferenceAccess().getRule();
	}

	//DtoReference:
	//  "from" modelName=ID "dto" name=ID ";";
	public DtoReferenceElements getDtoReferenceAccess() {
		return (pDtoReference != null) ? pDtoReference : (pDtoReference = new DtoReferenceElements());
	}
	
	public ParserRule getDtoReferenceRule() {
		return getDtoReferenceAccess().getRule();
	}

	//PageReference:
	//  "from" modelName=ID "page" name=ID ";";
	public PageReferenceElements getPageReferenceAccess() {
		return (pPageReference != null) ? pPageReference : (pPageReference = new PageReferenceElements());
	}
	
	public ParserRule getPageReferenceRule() {
		return getPageReferenceAccess().getRule();
	}

	//ServiceReference:
	//  "from" modelName=ID "service" name=ID ";";
	public ServiceReferenceElements getServiceReferenceAccess() {
		return (pServiceReference != null) ? pServiceReference : (pServiceReference = new ServiceReferenceElements());
	}
	
	public ParserRule getServiceReferenceRule() {
		return getServiceReferenceAccess().getRule();
	}

	//ModelElementWithContext:
	//  UIModelElement; 
	//    
	//  
	//	  //| Link
	public ModelElementWithContextElements getModelElementWithContextAccess() {
		return (pModelElementWithContext != null) ? pModelElementWithContext : (pModelElementWithContext = new ModelElementWithContextElements());
	}
	
	public ParserRule getModelElementWithContextRule() {
		return getModelElementWithContextAccess().getRule();
	}

	//UIModelElement:
	//  AbstractDialogue;
	public UIModelElementElements getUIModelElementAccess() {
		return (pUIModelElement != null) ? pUIModelElement : (pUIModelElement = new UIModelElementElements());
	}
	
	public ParserRule getUIModelElementRule() {
		return getUIModelElementAccess().getRule();
	}

	//AbstractDialogue:
	//  View|Page;
	public AbstractDialogueElements getAbstractDialogueAccess() {
		return (pAbstractDialogue != null) ? pAbstractDialogue : (pAbstractDialogue = new AbstractDialogueElements());
	}
	
	public ParserRule getAbstractDialogueRule() {
		return getAbstractDialogueAccess().getRule();
	}

	//View:
	//  description=STRING? "panel" name=ID ("extends" baseView=[View] "[" ("actions" "["
	//  actions+=Action* "]")? "]"|"context" collectionContext?="list"? contextRef=[
	//  DtoReference] "[" formElements+=FormElement* ("actions" "[" actions+=Action* "]")? "]")
	//;
	public ViewElements getViewAccess() {
		return (pView != null) ? pView : (pView = new ViewElements());
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//MenuAction returns Action:
	//  description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
	//  ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
	//  "page" nextPage=[Page])? ";";
	public MenuActionElements getMenuActionAccess() {
		return (pMenuAction != null) ? pMenuAction : (pMenuAction = new MenuActionElements());
	}
	
	public ParserRule getMenuActionRule() {
		return getMenuActionAccess().getRule();
	}

	//Action:
	//  description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
	//  ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
	//  "page" nextPage=[Page])? collectionContext?="collection"? ";";
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Page:
	//  "page" name=ID "shows" dialogue=[View] ";";
	public PageElements getPageAccess() {
		return (pPage != null) ? pPage : (pPage = new PageElements());
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//enum ProcessType:
	//  NEW="new" | SAVE="save" | EDIT="edit" | DELETE="delete" | CANCEL="cancel" | REMOVEFROM=
	//  "removefrom" | ADDTO="addto" | CUSTOM="custom"; 
	//    
	//    
	//                                          
	//                          // | PREVIOUS = "back"
	public ProcessTypeElements getProcessTypeAccess() {
		return (unknownRuleProcessType != null) ? unknownRuleProcessType : (unknownRuleProcessType = new ProcessTypeElements());
	}
	
	public EnumRule getProcessTypeRule() {
		return getProcessTypeAccess().getRule();
	}

	//enum ProcessTypeLink returns ProcessType:
	//  LINK="link";
	public ProcessTypeLinkElements getProcessTypeLinkAccess() {
		return (unknownRuleProcessTypeLink != null) ? unknownRuleProcessTypeLink : (unknownRuleProcessTypeLink = new ProcessTypeLinkElements());
	}
	
	public EnumRule getProcessTypeLinkRule() {
		return getProcessTypeLinkAccess().getRule();
	}

	//FormElement:
	//  description=STRING? references=DtoPropertyReference ("label" label=STRING)? (
	//  "readonly" (readonly?="true"|"false"))? ";"; 
	//
	//  
	//	  
	////	("navigate" LinkRef "to")?
	public FormElementElements getFormElementAccess() {
		return (pFormElement != null) ? pFormElement : (pFormElement = new FormElementElements());
	}
	
	public ParserRule getFormElementRule() {
		return getFormElementAccess().getRule();
	}

	//MenuExpression returns Expression:
	//  ServiceExpression|StandardExpression|OperationExpression;
	public MenuExpressionElements getMenuExpressionAccess() {
		return (pMenuExpression != null) ? pMenuExpression : (pMenuExpression = new MenuExpressionElements());
	}
	
	public ParserRule getMenuExpressionRule() {
		return getMenuExpressionAccess().getRule();
	}

	//Expression:
	//  ServiceExpression|NavigationExpression|StandardExpression|OperationExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//OperationExpression:
	//  "call" name=ID;
	public OperationExpressionElements getOperationExpressionAccess() {
		return (pOperationExpression != null) ? pOperationExpression : (pOperationExpression = new OperationExpressionElements());
	}
	
	public ParserRule getOperationExpressionRule() {
		return getOperationExpressionAccess().getRule();
	}

	//StandardExpression:
	//  type=ExpressionType contextRef=[DtoReference];
	public StandardExpressionElements getStandardExpressionAccess() {
		return (pStandardExpression != null) ? pStandardExpression : (pStandardExpression = new StandardExpressionElements());
	}
	
	public ParserRule getStandardExpressionRule() {
		return getStandardExpressionAccess().getRule();
	}

	//enum ExpressionType:
	//  ALL="all" | FIND="find";
	public ExpressionTypeElements getExpressionTypeAccess() {
		return (unknownRuleExpressionType != null) ? unknownRuleExpressionType : (unknownRuleExpressionType = new ExpressionTypeElements());
	}
	
	public EnumRule getExpressionTypeRule() {
		return getExpressionTypeAccess().getRule();
	}

	//ServiceExpression:
	//  "service" service=[ServiceReference];
	public ServiceExpressionElements getServiceExpressionAccess() {
		return (pServiceExpression != null) ? pServiceExpression : (pServiceExpression = new ServiceExpressionElements());
	}
	
	public ParserRule getServiceExpressionRule() {
		return getServiceExpressionAccess().getRule();
	}

	//NavigationExpression:
	//  "navigate" references+=AssociationRoleReference; 
	//
	//  
	//            
	//// TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
	public NavigationExpressionElements getNavigationExpressionAccess() {
		return (pNavigationExpression != null) ? pNavigationExpression : (pNavigationExpression = new NavigationExpressionElements());
	}
	
	public ParserRule getNavigationExpressionRule() {
		return getNavigationExpressionAccess().getRule();
	}

	//DtoPropertyReference:
	//  name=ID ("." subname=ID)?;
	public DtoPropertyReferenceElements getDtoPropertyReferenceAccess() {
		return (pDtoPropertyReference != null) ? pDtoPropertyReference : (pDtoPropertyReference = new DtoPropertyReferenceElements());
	}
	
	public ParserRule getDtoPropertyReferenceRule() {
		return getDtoPropertyReferenceAccess().getRule();
	}

	//AssociationRoleReference:
	//  name=ID;
	public AssociationRoleReferenceElements getAssociationRoleReferenceAccess() {
		return (pAssociationRoleReference != null) ? pAssociationRoleReference : (pAssociationRoleReference = new AssociationRoleReferenceElements());
	}
	
	public ParserRule getAssociationRoleReferenceRule() {
		return getAssociationRoleReferenceAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
