/*
* generated by Xtext
*/
package org.mod4j.dsl.presentation.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.mod4j.dsl.presentation.xtext.services.PresentationGrammarAccess;

import com.google.inject.Inject;

public class PresentationParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PresentationGrammarAccess grammarAccess;
		
	public PresentationGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_Alternatives(this, this, 0, inst);
			case 1: return new ApplicationModel_Group(this, this, 1, inst);
			case 2: return new FormsAndProcesses_Group(this, this, 2, inst);
			case 3: return new Menu_Group(this, this, 3, inst);
			case 4: return new ExternalReference_Alternatives(this, this, 4, inst);
			case 5: return new DtoReference_Group(this, this, 5, inst);
			case 6: return new PageReference_Group(this, this, 6, inst);
			case 7: return new ServiceReference_Group(this, this, 7, inst);
			case 8: return new ModelElementWithContext_UIModelElementParserRuleCall(this, this, 8, inst);
			case 9: return new UIModelElement_AbstractDialogueParserRuleCall(this, this, 9, inst);
			case 10: return new AbstractDialogue_Alternatives(this, this, 10, inst);
			case 11: return new View_Group(this, this, 11, inst);
			case 12: return new MenuAction_Group(this, this, 12, inst);
			case 13: return new Action_Group(this, this, 13, inst);
			case 14: return new Page_Group(this, this, 14, inst);
			case 15: return new FormElement_Group(this, this, 15, inst);
			case 16: return new MenuExpression_Alternatives(this, this, 16, inst);
			case 17: return new Expression_Alternatives(this, this, 17, inst);
			case 18: return new OperationExpression_Group(this, this, 18, inst);
			case 19: return new StandardExpression_Group(this, this, 19, inst);
			case 20: return new ServiceExpression_Group(this, this, 20, inst);
			case 21: return new NavigationExpression_Group(this, this, 21, inst);
			case 22: return new DtoPropertyReference_Group(this, this, 22, inst);
			case 23: return new AssociationRoleReference_NameAssignment(this, this, 23, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule PresentationModel ****************
 *
 * PresentationModel:
 *   ApplicationModel|FormsAndProcesses; 
 * 
 * //IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
 *
 **/

// ApplicationModel|FormsAndProcesses 
// 
// //IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
protected class PresentationModel_Alternatives extends AlternativesToken {

	public PresentationModel_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_ApplicationModelParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PresentationModel_FormsAndProcessesParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentationModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ApplicationModel
protected class PresentationModel_ApplicationModelParserRuleCall_0 extends RuleCallToken {
	
	public PresentationModel_ApplicationModelParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getApplicationModelParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ApplicationModel_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getApplicationModelRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FormsAndProcesses
protected class PresentationModel_FormsAndProcessesParserRuleCall_1 extends RuleCallToken {
	
	public PresentationModel_FormsAndProcessesParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getFormsAndProcessesParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FormsAndProcesses_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFormsAndProcessesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PresentationModel ****************/


/************ begin Rule ApplicationModel ****************
 *
 * ApplicationModel returns PresentationModel:
 *   description=STRING? "application" name=ID ";" externalReferences+=ExternalReference*
 *   mainMenu=Menu; 
 *    
 * 
 *       
 *       
 *             
 *     
 *         
 *         
 * 
 * 
 * //ProcessReference : 
 * //    "from" modelName = ID "process" name = ID ";"
 * //    ;
 *
 **/

// description=STRING? "application" name=ID ";" externalReferences+=ExternalReference*
// mainMenu=Menu
protected class ApplicationModel_Group extends GroupToken {
	
	public ApplicationModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_MainMenuAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getApplicationModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class ApplicationModel_DescriptionAssignment_0 extends AssignmentToken  {
	
	public ApplicationModel_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getApplicationModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "application"
protected class ApplicationModel_ApplicationKeyword_1 extends KeywordToken  {
	
	public ApplicationModel_ApplicationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getApplicationKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class ApplicationModel_NameAssignment_2 extends AssignmentToken  {
	
	public ApplicationModel_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_ApplicationKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getApplicationModelAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ApplicationModel_SemicolonKeyword_3 extends KeywordToken  {
	
	public ApplicationModel_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// externalReferences+=ExternalReference*
protected class ApplicationModel_ExternalReferencesAssignment_4 extends AssignmentToken  {
	
	public ApplicationModel_ExternalReferencesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getExternalReferencesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("externalReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("externalReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getApplicationModelAccess().getExternalReferencesExternalReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ApplicationModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ApplicationModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// mainMenu=Menu
protected class ApplicationModel_MainMenuAssignment_5 extends AssignmentToken  {
	
	public ApplicationModel_MainMenuAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getMainMenuAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("mainMenu",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("mainMenu");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMenuRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getApplicationModelAccess().getMainMenuMenuParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ApplicationModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ApplicationModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ApplicationModel ****************/


/************ begin Rule FormsAndProcesses ****************
 *
 * FormsAndProcesses returns PresentationModel:
 *   description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
 *   * elements+=ModelElementWithContext*; 
 * 
 * //ProcessReference : 
 * //    "from" modelName = ID "process" name = ID ";"
 * //    ;
 * 
 *       
 * 	  
 * 	        
 * 	
 * 	    
 * //    (mainMenu = Menu)
 *
 **/

// description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
// * elements+=ModelElementWithContext* 
// 	  
// 	        
// 	
// 	    
// //    (mainMenu = Menu)
protected class FormsAndProcesses_Group extends GroupToken {
	
	public FormsAndProcesses_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_ElementsAssignment_5(parent, this, 0, inst);
			case 1: return new FormsAndProcesses_ExternalReferencesAssignment_4(parent, this, 1, inst);
			case 2: return new FormsAndProcesses_SemicolonKeyword_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFormsAndProcessesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class FormsAndProcesses_DescriptionAssignment_0 extends AssignmentToken  {
	
	public FormsAndProcesses_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormsAndProcessesAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "presentation"
protected class FormsAndProcesses_PresentationKeyword_1 extends KeywordToken  {
	
	public FormsAndProcesses_PresentationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getPresentationKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class FormsAndProcesses_NameAssignment_2 extends AssignmentToken  {
	
	public FormsAndProcesses_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_PresentationKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormsAndProcessesAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FormsAndProcesses_SemicolonKeyword_3 extends KeywordToken  {
	
	public FormsAndProcesses_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// externalReferences+=ExternalReference*
protected class FormsAndProcesses_ExternalReferencesAssignment_4 extends AssignmentToken  {
	
	public FormsAndProcesses_ExternalReferencesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getExternalReferencesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("externalReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("externalReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormsAndProcessesAccess().getExternalReferencesExternalReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormsAndProcesses_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new FormsAndProcesses_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=ModelElementWithContext*
protected class FormsAndProcesses_ElementsAssignment_5 extends AssignmentToken  {
	
	public FormsAndProcesses_ElementsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getElementsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElementWithContext_UIModelElementParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelElementWithContextRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormsAndProcessesAccess().getElementsModelElementWithContextParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormsAndProcesses_ElementsAssignment_5(parent, next, actIndex, consumed);
			case 1: return new FormsAndProcesses_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 2: return new FormsAndProcesses_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FormsAndProcesses ****************/


/************ begin Rule Menu ****************
 *
 * Menu:
 *   "menu" "[" startActions+=MenuAction* "]";
 *
 **/

// "menu" "[" startActions+=MenuAction* "]"
protected class Menu_Group extends GroupToken {
	
	public Menu_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMenuAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_RightSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMenuRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "menu"
protected class Menu_MenuKeyword_0 extends KeywordToken  {
	
	public Menu_MenuKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuAccess().getMenuKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "["
protected class Menu_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public Menu_LeftSquareBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuAccess().getLeftSquareBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_MenuKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// startActions+=MenuAction*
protected class Menu_StartActionsAssignment_2 extends AssignmentToken  {
	
	public Menu_StartActionsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuAccess().getStartActionsAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("startActions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("startActions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMenuActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMenuAccess().getStartActionsMenuActionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Menu_StartActionsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new Menu_LeftSquareBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Menu_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public Menu_RightSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuAccess().getRightSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_StartActionsAssignment_2(parent, this, 0, inst);
			case 1: return new Menu_LeftSquareBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Menu ****************/


/************ begin Rule ExternalReference ****************
 *
 * ExternalReference:
 *   DtoReference|PageReference|ServiceReference; 
 * 
 *   
 *        
 *       
 * //    ProcessReference | 
 * //    DialogueReference |
 *
 **/

// DtoReference|PageReference|ServiceReference 
// 
//   
//        
//       
// //    ProcessReference | 
// //    DialogueReference |
protected class ExternalReference_Alternatives extends AlternativesToken {

	public ExternalReference_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_DtoReferenceParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ExternalReference_PageReferenceParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ExternalReference_ServiceReferenceParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DtoReference
protected class ExternalReference_DtoReferenceParserRuleCall_0 extends RuleCallToken {
	
	public ExternalReference_DtoReferenceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getDtoReferenceParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DtoReference_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDtoReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PageReference
protected class ExternalReference_PageReferenceParserRuleCall_1 extends RuleCallToken {
	
	public ExternalReference_PageReferenceParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getPageReferenceParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PageReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PageReference_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPageReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ServiceReference 
// //    ProcessReference | 
// //    DialogueReference |
protected class ExternalReference_ServiceReferenceParserRuleCall_2 extends RuleCallToken {
	
	public ExternalReference_ServiceReferenceParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getServiceReferenceParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ServiceReference_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getServiceReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ExternalReference ****************/


/************ begin Rule DtoReference ****************
 *
 * DtoReference:
 *   "from" modelName=ID "dto" name=ID ";";
 *
 **/

// "from" modelName=ID "dto" name=ID ";"
protected class DtoReference_Group extends GroupToken {
	
	public DtoReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class DtoReference_FromKeyword_0 extends KeywordToken  {
	
	public DtoReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class DtoReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public DtoReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "dto"
protected class DtoReference_DtoKeyword_2 extends KeywordToken  {
	
	public DtoReference_DtoKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getDtoKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class DtoReference_NameAssignment_3 extends AssignmentToken  {
	
	public DtoReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_DtoKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class DtoReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public DtoReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DtoReference ****************/


/************ begin Rule PageReference ****************
 *
 * PageReference:
 *   "from" modelName=ID "page" name=ID ";";
 *
 **/

// "from" modelName=ID "page" name=ID ";"
protected class PageReference_Group extends GroupToken {
	
	public PageReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPageReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PageReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPageReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class PageReference_FromKeyword_0 extends KeywordToken  {
	
	public PageReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPageReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class PageReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public PageReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPageReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PageReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPageReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "page"
protected class PageReference_PageKeyword_2 extends KeywordToken  {
	
	public PageReference_PageKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPageReferenceAccess().getPageKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PageReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class PageReference_NameAssignment_3 extends AssignmentToken  {
	
	public PageReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPageReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PageReference_PageKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPageReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class PageReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public PageReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPageReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PageReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PageReference ****************/


/************ begin Rule ServiceReference ****************
 *
 * ServiceReference:
 *   "from" modelName=ID "service" name=ID ";";
 *
 **/

// "from" modelName=ID "service" name=ID ";"
protected class ServiceReference_Group extends GroupToken {
	
	public ServiceReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getServiceReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class ServiceReference_FromKeyword_0 extends KeywordToken  {
	
	public ServiceReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class ServiceReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public ServiceReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "service"
protected class ServiceReference_ServiceKeyword_2 extends KeywordToken  {
	
	public ServiceReference_ServiceKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getServiceKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class ServiceReference_NameAssignment_3 extends AssignmentToken  {
	
	public ServiceReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_ServiceKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ServiceReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public ServiceReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ServiceReference ****************/


/************ begin Rule ModelElementWithContext ****************
 *
 * ModelElementWithContext:
 *   UIModelElement; 
 *     
 *   
 * 	  //| Link
 *
 **/

// UIModelElement 
// 	  //| Link
protected class ModelElementWithContext_UIModelElementParserRuleCall extends RuleCallToken {
	
	public ModelElementWithContext_UIModelElementParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelElementWithContextAccess().getUIModelElementParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElement_AbstractDialogueParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelElementWithContextRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UIModelElement_AbstractDialogueParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUIModelElementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ModelElementWithContext ****************/


/************ begin Rule UIModelElement ****************
 *
 * UIModelElement:
 *   AbstractDialogue;
 *
 **/

// AbstractDialogue
protected class UIModelElement_AbstractDialogueParserRuleCall extends RuleCallToken {
	
	public UIModelElement_AbstractDialogueParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getAbstractDialogueParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractDialogue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUIModelElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AbstractDialogue_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAbstractDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule UIModelElement ****************/


/************ begin Rule AbstractDialogue ****************
 *
 * AbstractDialogue:
 *   View|Page;
 *
 **/

// View|Page
protected class AbstractDialogue_Alternatives extends AlternativesToken {

	public AbstractDialogue_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractDialogueAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractDialogue_ViewParserRuleCall_0(parent, this, 0, inst);
			case 1: return new AbstractDialogue_PageParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// View
protected class AbstractDialogue_ViewParserRuleCall_0 extends RuleCallToken {
	
	public AbstractDialogue_ViewParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractDialogueAccess().getViewParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(View_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getViewRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Page
protected class AbstractDialogue_PageParserRuleCall_1 extends RuleCallToken {
	
	public AbstractDialogue_PageParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractDialogueAccess().getPageParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Page_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Page_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPageRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AbstractDialogue ****************/


/************ begin Rule View ****************
 *
 * View:
 *   description=STRING? "panel" name=ID ("extends" baseView=[View] "[" ("actions" "["
 *   actions+=Action* "]")? "]"|"context" collectionContext?="list"? contextRef=[
 *   DtoReference] "[" formElements+=FormElement* ("actions" "[" actions+=Action* "]")? "]")
 * ;
 *
 **/

// description=STRING? "panel" name=ID ("extends" baseView=[View] "[" ("actions" "["
// actions+=Action* "]")? "]"|"context" collectionContext?="list"? contextRef=[
// DtoReference] "[" formElements+=FormElement* ("actions" "[" actions+=Action* "]")? "]")
protected class View_Group extends GroupToken {
	
	public View_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getViewAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getViewRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class View_DescriptionAssignment_0 extends AssignmentToken  {
	
	public View_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getViewAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getViewAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "panel"
protected class View_PanelKeyword_1 extends KeywordToken  {
	
	public View_PanelKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getPanelKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class View_NameAssignment_2 extends AssignmentToken  {
	
	public View_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getViewAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_PanelKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getViewAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "extends" baseView=[View] "[" ("actions" "[" actions+=Action* "]")? "]"|"context"
// collectionContext?="list"? contextRef=[DtoReference] "[" formElements+=FormElement*
// ("actions" "[" actions+=Action* "]")? "]"
protected class View_Alternatives_3 extends AlternativesToken {

	public View_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getViewAccess().getAlternatives_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_Group_3_0(parent, this, 0, inst);
			case 1: return new View_Group_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends" baseView=[View] "[" ("actions" "[" actions+=Action* "]")? "]"
protected class View_Group_3_0 extends GroupToken {
	
	public View_Group_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getViewAccess().getGroup_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_RightSquareBracketKeyword_3_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class View_ExtendsKeyword_3_0_0 extends KeywordToken  {
	
	public View_ExtendsKeyword_3_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getExtendsKeyword_3_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// baseView=[View]
protected class View_BaseViewAssignment_3_0_1 extends AssignmentToken  {
	
	public View_BaseViewAssignment_3_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getViewAccess().getBaseViewAssignment_3_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_ExtendsKeyword_3_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("baseView",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("baseView");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getViewAccess().getBaseViewViewCrossReference_3_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getViewAccess().getBaseViewViewCrossReference_3_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "["
protected class View_LeftSquareBracketKeyword_3_0_2 extends KeywordToken  {
	
	public View_LeftSquareBracketKeyword_3_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getLeftSquareBracketKeyword_3_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_BaseViewAssignment_3_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("actions" "[" actions+=Action* "]")?
protected class View_Group_3_0_3 extends GroupToken {
	
	public View_Group_3_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getViewAccess().getGroup_3_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_RightSquareBracketKeyword_3_0_3_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "actions"
protected class View_ActionsKeyword_3_0_3_0 extends KeywordToken  {
	
	public View_ActionsKeyword_3_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getActionsKeyword_3_0_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_LeftSquareBracketKeyword_3_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class View_LeftSquareBracketKeyword_3_0_3_1 extends KeywordToken  {
	
	public View_LeftSquareBracketKeyword_3_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getLeftSquareBracketKeyword_3_0_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_ActionsKeyword_3_0_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// actions+=Action*
protected class View_ActionsAssignment_3_0_3_2 extends AssignmentToken  {
	
	public View_ActionsAssignment_3_0_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getViewAccess().getActionsAssignment_3_0_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("actions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getViewAccess().getActionsActionParserRuleCall_3_0_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new View_ActionsAssignment_3_0_3_2(parent, next, actIndex, consumed);
			case 1: return new View_LeftSquareBracketKeyword_3_0_3_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class View_RightSquareBracketKeyword_3_0_3_3 extends KeywordToken  {
	
	public View_RightSquareBracketKeyword_3_0_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getRightSquareBracketKeyword_3_0_3_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_ActionsAssignment_3_0_3_2(parent, this, 0, inst);
			case 1: return new View_LeftSquareBracketKeyword_3_0_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class View_RightSquareBracketKeyword_3_0_4 extends KeywordToken  {
	
	public View_RightSquareBracketKeyword_3_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getRightSquareBracketKeyword_3_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_Group_3_0_3(parent, this, 0, inst);
			case 1: return new View_LeftSquareBracketKeyword_3_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "context" collectionContext?="list"? contextRef=[DtoReference] "[" formElements+=
// FormElement* ("actions" "[" actions+=Action* "]")? "]"
protected class View_Group_3_1 extends GroupToken {
	
	public View_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getViewAccess().getGroup_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_RightSquareBracketKeyword_3_1_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "context"
protected class View_ContextKeyword_3_1_0 extends KeywordToken  {
	
	public View_ContextKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getContextKeyword_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// collectionContext?="list"?
protected class View_CollectionContextAssignment_3_1_1 extends AssignmentToken  {
	
	public View_CollectionContextAssignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getViewAccess().getCollectionContextAssignment_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_ContextKeyword_3_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collectionContext",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collectionContext");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getViewAccess().getCollectionContextListKeyword_3_1_1_0();
			return obj;
		}
		return null;
	}

}

// contextRef=[DtoReference]
protected class View_ContextRefAssignment_3_1_2 extends AssignmentToken  {
	
	public View_ContextRefAssignment_3_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getViewAccess().getContextRefAssignment_3_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_CollectionContextAssignment_3_1_1(parent, this, 0, inst);
			case 1: return new View_ContextKeyword_3_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getViewAccess().getContextRefDtoReferenceCrossReference_3_1_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getViewAccess().getContextRefDtoReferenceCrossReference_3_1_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "["
protected class View_LeftSquareBracketKeyword_3_1_3 extends KeywordToken  {
	
	public View_LeftSquareBracketKeyword_3_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getLeftSquareBracketKeyword_3_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_ContextRefAssignment_3_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// formElements+=FormElement*
protected class View_FormElementsAssignment_3_1_4 extends AssignmentToken  {
	
	public View_FormElementsAssignment_3_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getViewAccess().getFormElementsAssignment_3_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("formElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("formElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getViewAccess().getFormElementsFormElementParserRuleCall_3_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new View_FormElementsAssignment_3_1_4(parent, next, actIndex, consumed);
			case 1: return new View_LeftSquareBracketKeyword_3_1_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("actions" "[" actions+=Action* "]")?
protected class View_Group_3_1_5 extends GroupToken {
	
	public View_Group_3_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getViewAccess().getGroup_3_1_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_RightSquareBracketKeyword_3_1_5_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "actions"
protected class View_ActionsKeyword_3_1_5_0 extends KeywordToken  {
	
	public View_ActionsKeyword_3_1_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getActionsKeyword_3_1_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_FormElementsAssignment_3_1_4(parent, this, 0, inst);
			case 1: return new View_LeftSquareBracketKeyword_3_1_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class View_LeftSquareBracketKeyword_3_1_5_1 extends KeywordToken  {
	
	public View_LeftSquareBracketKeyword_3_1_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getLeftSquareBracketKeyword_3_1_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_ActionsKeyword_3_1_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// actions+=Action*
protected class View_ActionsAssignment_3_1_5_2 extends AssignmentToken  {
	
	public View_ActionsAssignment_3_1_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getViewAccess().getActionsAssignment_3_1_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("actions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getViewAccess().getActionsActionParserRuleCall_3_1_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new View_ActionsAssignment_3_1_5_2(parent, next, actIndex, consumed);
			case 1: return new View_LeftSquareBracketKeyword_3_1_5_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class View_RightSquareBracketKeyword_3_1_5_3 extends KeywordToken  {
	
	public View_RightSquareBracketKeyword_3_1_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getRightSquareBracketKeyword_3_1_5_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_ActionsAssignment_3_1_5_2(parent, this, 0, inst);
			case 1: return new View_LeftSquareBracketKeyword_3_1_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class View_RightSquareBracketKeyword_3_1_6 extends KeywordToken  {
	
	public View_RightSquareBracketKeyword_3_1_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getViewAccess().getRightSquareBracketKeyword_3_1_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new View_Group_3_1_5(parent, this, 0, inst);
			case 1: return new View_FormElementsAssignment_3_1_4(parent, this, 1, inst);
			case 2: return new View_LeftSquareBracketKeyword_3_1_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule View ****************/


/************ begin Rule MenuAction ****************
 *
 * MenuAction returns Action:
 *   description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
 *   ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
 *   "page" nextPage=[Page])? ";";
 *
 **/

// description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
// ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
// "page" nextPage=[Page])? ";"
protected class MenuAction_Group extends GroupToken {
	
	public MenuAction_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_SemicolonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMenuActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class MenuAction_DescriptionAssignment_0 extends AssignmentToken  {
	
	public MenuAction_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMenuActionAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class MenuAction_NameAssignment_1 extends AssignmentToken  {
	
	public MenuAction_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMenuActionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("label" label=STRING)?
protected class MenuAction_Group_2 extends GroupToken {
	
	public MenuAction_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_LabelAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "label"
protected class MenuAction_LabelKeyword_2_0 extends KeywordToken  {
	
	public MenuAction_LabelKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getLabelKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=STRING
protected class MenuAction_LabelAssignment_2_1 extends AssignmentToken  {
	
	public MenuAction_LabelAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getLabelAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_LabelKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMenuActionAccess().getLabelSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ":"
protected class MenuAction_ColonKeyword_3 extends KeywordToken  {
	
	public MenuAction_ColonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getColonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_Group_2(parent, this, 0, inst);
			case 1: return new MenuAction_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (type=ProcessType|type=ProcessTypeLink contextExp=NavigationExpression)|
// contextExp=Expression
protected class MenuAction_Alternatives_4 extends AlternativesToken {

	public MenuAction_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getAlternatives_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_Alternatives_4_0(parent, this, 0, inst);
			case 1: return new MenuAction_ContextExpAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ProcessType|type=ProcessTypeLink contextExp=NavigationExpression
protected class MenuAction_Alternatives_4_0 extends AlternativesToken {

	public MenuAction_Alternatives_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getAlternatives_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_TypeAssignment_4_0_0(parent, this, 0, inst);
			case 1: return new MenuAction_Group_4_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ProcessType
protected class MenuAction_TypeAssignment_4_0_0 extends AssignmentToken  {
	
	public MenuAction_TypeAssignment_4_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getTypeAssignment_4_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_ColonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getMenuActionAccess().getTypeProcessTypeEnumRuleCall_4_0_0_0();
			return obj;
		}
		return null;
	}

}

// type=ProcessTypeLink contextExp=NavigationExpression
protected class MenuAction_Group_4_0_1 extends GroupToken {
	
	public MenuAction_Group_4_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getGroup_4_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_ContextExpAssignment_4_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ProcessTypeLink
protected class MenuAction_TypeAssignment_4_0_1_0 extends AssignmentToken  {
	
	public MenuAction_TypeAssignment_4_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getTypeAssignment_4_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_ColonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getMenuActionAccess().getTypeProcessTypeLinkEnumRuleCall_4_0_1_0_0();
			return obj;
		}
		return null;
	}

}

// contextExp=NavigationExpression
protected class MenuAction_ContextExpAssignment_4_0_1_1 extends AssignmentToken  {
	
	public MenuAction_ContextExpAssignment_4_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getContextExpAssignment_4_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextExp",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextExp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNavigationExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMenuActionAccess().getContextExpNavigationExpressionParserRuleCall_4_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MenuAction_TypeAssignment_4_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// contextExp=Expression
protected class MenuAction_ContextExpAssignment_4_1 extends AssignmentToken  {
	
	public MenuAction_ContextExpAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getContextExpAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextExp",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextExp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMenuActionAccess().getContextExpExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MenuAction_ColonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("-->" "page" nextPage=[Page])?
protected class MenuAction_Group_5 extends GroupToken {
	
	public MenuAction_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_NextPageAssignment_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "-->"
protected class MenuAction_HyphenMinusHyphenMinusGreaterThanSignKeyword_5_0 extends KeywordToken  {
	
	public MenuAction_HyphenMinusHyphenMinusGreaterThanSignKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_Alternatives_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "page"
protected class MenuAction_PageKeyword_5_1 extends KeywordToken  {
	
	public MenuAction_PageKeyword_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getPageKeyword_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_HyphenMinusHyphenMinusGreaterThanSignKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// nextPage=[Page]
protected class MenuAction_NextPageAssignment_5_2 extends AssignmentToken  {
	
	public MenuAction_NextPageAssignment_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getNextPageAssignment_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_PageKeyword_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nextPage",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nextPage");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMenuActionAccess().getNextPagePageCrossReference_5_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getMenuActionAccess().getNextPagePageCrossReference_5_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ";"
protected class MenuAction_SemicolonKeyword_6 extends KeywordToken  {
	
	public MenuAction_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuActionAccess().getSemicolonKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuAction_Group_5(parent, this, 0, inst);
			case 1: return new MenuAction_Alternatives_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule MenuAction ****************/


/************ begin Rule Action ****************
 *
 * Action:
 *   description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
 *   ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
 *   "page" nextPage=[Page])? collectionContext?="collection"? ";";
 *
 **/

// description=STRING? name=ID ("label" label=STRING)? ":" ((type=ProcessType|type=
// ProcessTypeLink contextExp=NavigationExpression)|contextExp=Expression) ("-->"
// "page" nextPage=[Page])? collectionContext?="collection"? ";"
protected class Action_Group extends GroupToken {
	
	public Action_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_SemicolonKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class Action_DescriptionAssignment_0 extends AssignmentToken  {
	
	public Action_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class Action_NameAssignment_1 extends AssignmentToken  {
	
	public Action_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("label" label=STRING)?
protected class Action_Group_2 extends GroupToken {
	
	public Action_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_LabelAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "label"
protected class Action_LabelKeyword_2_0 extends KeywordToken  {
	
	public Action_LabelKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getLabelKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=STRING
protected class Action_LabelAssignment_2_1 extends AssignmentToken  {
	
	public Action_LabelAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getLabelAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_LabelKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getLabelSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ":"
protected class Action_ColonKeyword_3 extends KeywordToken  {
	
	public Action_ColonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getColonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_2(parent, this, 0, inst);
			case 1: return new Action_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (type=ProcessType|type=ProcessTypeLink contextExp=NavigationExpression)|
// contextExp=Expression
protected class Action_Alternatives_4 extends AlternativesToken {

	public Action_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getActionAccess().getAlternatives_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Alternatives_4_0(parent, this, 0, inst);
			case 1: return new Action_ContextExpAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ProcessType|type=ProcessTypeLink contextExp=NavigationExpression
protected class Action_Alternatives_4_0 extends AlternativesToken {

	public Action_Alternatives_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getActionAccess().getAlternatives_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_TypeAssignment_4_0_0(parent, this, 0, inst);
			case 1: return new Action_Group_4_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ProcessType
protected class Action_TypeAssignment_4_0_0 extends AssignmentToken  {
	
	public Action_TypeAssignment_4_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getTypeAssignment_4_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ColonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getActionAccess().getTypeProcessTypeEnumRuleCall_4_0_0_0();
			return obj;
		}
		return null;
	}

}

// type=ProcessTypeLink contextExp=NavigationExpression
protected class Action_Group_4_0_1 extends GroupToken {
	
	public Action_Group_4_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_4_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ContextExpAssignment_4_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ProcessTypeLink
protected class Action_TypeAssignment_4_0_1_0 extends AssignmentToken  {
	
	public Action_TypeAssignment_4_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getTypeAssignment_4_0_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ColonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getActionAccess().getTypeProcessTypeLinkEnumRuleCall_4_0_1_0_0();
			return obj;
		}
		return null;
	}

}

// contextExp=NavigationExpression
protected class Action_ContextExpAssignment_4_0_1_1 extends AssignmentToken  {
	
	public Action_ContextExpAssignment_4_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getContextExpAssignment_4_0_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextExp",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextExp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNavigationExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getContextExpNavigationExpressionParserRuleCall_4_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_TypeAssignment_4_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// contextExp=Expression
protected class Action_ContextExpAssignment_4_1 extends AssignmentToken  {
	
	public Action_ContextExpAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getContextExpAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextExp",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextExp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getContextExpExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_ColonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("-->" "page" nextPage=[Page])?
protected class Action_Group_5 extends GroupToken {
	
	public Action_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_NextPageAssignment_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "-->"
protected class Action_HyphenMinusHyphenMinusGreaterThanSignKeyword_5_0 extends KeywordToken  {
	
	public Action_HyphenMinusHyphenMinusGreaterThanSignKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Alternatives_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "page"
protected class Action_PageKeyword_5_1 extends KeywordToken  {
	
	public Action_PageKeyword_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getPageKeyword_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_HyphenMinusHyphenMinusGreaterThanSignKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// nextPage=[Page]
protected class Action_NextPageAssignment_5_2 extends AssignmentToken  {
	
	public Action_NextPageAssignment_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getNextPageAssignment_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_PageKeyword_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nextPage",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nextPage");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionAccess().getNextPagePageCrossReference_5_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getActionAccess().getNextPagePageCrossReference_5_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


// collectionContext?="collection"?
protected class Action_CollectionContextAssignment_6 extends AssignmentToken  {
	
	public Action_CollectionContextAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getCollectionContextAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group_5(parent, this, 0, inst);
			case 1: return new Action_Alternatives_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collectionContext",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collectionContext");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getActionAccess().getCollectionContextCollectionKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Action_SemicolonKeyword_7 extends KeywordToken  {
	
	public Action_SemicolonKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getSemicolonKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_CollectionContextAssignment_6(parent, this, 0, inst);
			case 1: return new Action_Group_5(parent, this, 1, inst);
			case 2: return new Action_Alternatives_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Action ****************/


/************ begin Rule Page ****************
 *
 * Page:
 *   "page" name=ID "shows" dialogue=[View] ";";
 *
 **/

// "page" name=ID "shows" dialogue=[View] ";"
protected class Page_Group extends GroupToken {
	
	public Page_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPageAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Page_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPageRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "page"
protected class Page_PageKeyword_0 extends KeywordToken  {
	
	public Page_PageKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPageAccess().getPageKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Page_NameAssignment_1 extends AssignmentToken  {
	
	public Page_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPageAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Page_PageKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPageAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "shows"
protected class Page_ShowsKeyword_2 extends KeywordToken  {
	
	public Page_ShowsKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPageAccess().getShowsKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Page_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dialogue=[View]
protected class Page_DialogueAssignment_3 extends AssignmentToken  {
	
	public Page_DialogueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPageAccess().getDialogueAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Page_ShowsKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dialogue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dialogue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPageAccess().getDialogueViewCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getPageAccess().getDialogueViewCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class Page_SemicolonKeyword_4 extends KeywordToken  {
	
	public Page_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPageAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Page_DialogueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Page ****************/


/************ begin Rule FormElement ****************
 *
 * FormElement:
 *   description=STRING? references=DtoPropertyReference ("label" label=STRING)? (
 *   "readonly" (readonly?="true"|"false"))? ";"; 
 * 
 *   
 * 	  
 * //	("navigate" LinkRef "to")?
 *
 **/

// description=STRING? references=DtoPropertyReference ("label" label=STRING)? (
// "readonly" (readonly?="true"|"false"))? ";" 
// 	  
// //	("navigate" LinkRef "to")?
protected class FormElement_Group extends GroupToken {
	
	public FormElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFormElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class FormElement_DescriptionAssignment_0 extends AssignmentToken  {
	
	public FormElement_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormElementAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// references=DtoPropertyReference 
// //	("navigate" LinkRef "to")?
protected class FormElement_ReferencesAssignment_1 extends AssignmentToken  {
	
	public FormElement_ReferencesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReferencesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoPropertyReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDtoPropertyReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormElementAccess().getReferencesDtoPropertyReferenceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormElement_DescriptionAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ("label" label=STRING)?
protected class FormElement_Group_2 extends GroupToken {
	
	public FormElement_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_LabelAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "label"
protected class FormElement_LabelKeyword_2_0 extends KeywordToken  {
	
	public FormElement_LabelKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getLabelKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReferencesAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=STRING
protected class FormElement_LabelAssignment_2_1 extends AssignmentToken  {
	
	public FormElement_LabelAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getLabelAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_LabelKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormElementAccess().getLabelSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ("readonly" (readonly?="true"|"false"))?
protected class FormElement_Group_3 extends GroupToken {
	
	public FormElement_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Alternatives_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class FormElement_ReadonlyKeyword_3_0 extends KeywordToken  {
	
	public FormElement_ReadonlyKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReadonlyKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group_2(parent, this, 0, inst);
			case 1: return new FormElement_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class FormElement_Alternatives_3_1 extends AlternativesToken {

	public FormElement_Alternatives_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getFormElementAccess().getAlternatives_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyAssignment_3_1_0(parent, this, 0, inst);
			case 1: return new FormElement_FalseKeyword_3_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class FormElement_ReadonlyAssignment_3_1_0 extends AssignmentToken  {
	
	public FormElement_ReadonlyAssignment_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReadonlyAssignment_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFormElementAccess().getReadonlyTrueKeyword_3_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class FormElement_FalseKeyword_3_1_1 extends KeywordToken  {
	
	public FormElement_FalseKeyword_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getFalseKeyword_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// ";"
protected class FormElement_SemicolonKeyword_4 extends KeywordToken  {
	
	public FormElement_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group_3(parent, this, 0, inst);
			case 1: return new FormElement_Group_2(parent, this, 1, inst);
			case 2: return new FormElement_ReferencesAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FormElement ****************/


/************ begin Rule MenuExpression ****************
 *
 * MenuExpression returns Expression:
 *   ServiceExpression|StandardExpression|OperationExpression;
 *
 **/

// ServiceExpression|StandardExpression|OperationExpression
protected class MenuExpression_Alternatives extends AlternativesToken {

	public MenuExpression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getMenuExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MenuExpression_ServiceExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new MenuExpression_StandardExpressionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new MenuExpression_OperationExpressionParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMenuExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ServiceExpression
protected class MenuExpression_ServiceExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MenuExpression_ServiceExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMenuExpressionAccess().getServiceExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ServiceExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getServiceExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StandardExpression
protected class MenuExpression_StandardExpressionParserRuleCall_1 extends RuleCallToken {
	
	public MenuExpression_StandardExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMenuExpressionAccess().getStandardExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StandardExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StandardExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStandardExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// OperationExpression
protected class MenuExpression_OperationExpressionParserRuleCall_2 extends RuleCallToken {
	
	public MenuExpression_OperationExpressionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getMenuExpressionAccess().getOperationExpressionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OperationExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOperationExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule MenuExpression ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 *   ServiceExpression|NavigationExpression|StandardExpression|OperationExpression;
 *
 **/

// ServiceExpression|NavigationExpression|StandardExpression|OperationExpression
protected class Expression_Alternatives extends AlternativesToken {

	public Expression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ServiceExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Expression_NavigationExpressionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Expression_StandardExpressionParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Expression_OperationExpressionParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ServiceExpression
protected class Expression_ServiceExpressionParserRuleCall_0 extends RuleCallToken {
	
	public Expression_ServiceExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getServiceExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ServiceExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getServiceExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NavigationExpression
protected class Expression_NavigationExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Expression_NavigationExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getNavigationExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NavigationExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNavigationExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StandardExpression
protected class Expression_StandardExpressionParserRuleCall_2 extends RuleCallToken {
	
	public Expression_StandardExpressionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getStandardExpressionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StandardExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StandardExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStandardExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// OperationExpression
protected class Expression_OperationExpressionParserRuleCall_3 extends RuleCallToken {
	
	public Expression_OperationExpressionParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getOperationExpressionParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OperationExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOperationExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression ****************/


/************ begin Rule OperationExpression ****************
 *
 * OperationExpression:
 *   "call" name=ID;
 *
 **/

// "call" name=ID
protected class OperationExpression_Group extends GroupToken {
	
	public OperationExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOperationExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOperationExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "call"
protected class OperationExpression_CallKeyword_0 extends KeywordToken  {
	
	public OperationExpression_CallKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationExpressionAccess().getCallKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class OperationExpression_NameAssignment_1 extends AssignmentToken  {
	
	public OperationExpression_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationExpressionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_CallKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationExpressionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OperationExpression ****************/


/************ begin Rule StandardExpression ****************
 *
 * StandardExpression:
 *   type=ExpressionType contextRef=[DtoReference];
 *
 **/

// type=ExpressionType contextRef=[DtoReference]
protected class StandardExpression_Group extends GroupToken {
	
	public StandardExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStandardExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StandardExpression_ContextRefAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStandardExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=ExpressionType
protected class StandardExpression_TypeAssignment_0 extends AssignmentToken  {
	
	public StandardExpression_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStandardExpressionAccess().getTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStandardExpressionAccess().getTypeExpressionTypeEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// contextRef=[DtoReference]
protected class StandardExpression_ContextRefAssignment_1 extends AssignmentToken  {
	
	public StandardExpression_ContextRefAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStandardExpressionAccess().getContextRefAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StandardExpression_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStandardExpressionAccess().getContextRefDtoReferenceCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getStandardExpressionAccess().getContextRefDtoReferenceCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule StandardExpression ****************/


/************ begin Rule ServiceExpression ****************
 *
 * ServiceExpression:
 *   "service" service=[ServiceReference];
 *
 **/

// "service" service=[ServiceReference]
protected class ServiceExpression_Group extends GroupToken {
	
	public ServiceExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_ServiceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getServiceExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "service"
protected class ServiceExpression_ServiceKeyword_0 extends KeywordToken  {
	
	public ServiceExpression_ServiceKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getServiceKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// service=[ServiceReference]
protected class ServiceExpression_ServiceAssignment_1 extends AssignmentToken  {
	
	public ServiceExpression_ServiceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getServiceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_ServiceKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("service",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("service");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getServiceExpressionAccess().getServiceServiceReferenceCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getServiceExpressionAccess().getServiceServiceReferenceCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ServiceExpression ****************/


/************ begin Rule NavigationExpression ****************
 *
 * NavigationExpression:
 *   "navigate" references+=AssociationRoleReference; 
 * 
 *   
 *             
 * // TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
 *
 **/

// "navigate" references+=AssociationRoleReference 
//             
// // TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
protected class NavigationExpression_Group extends GroupToken {
	
	public NavigationExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_ReferencesAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNavigationExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "navigate"
protected class NavigationExpression_NavigateKeyword_0 extends KeywordToken  {
	
	public NavigationExpression_NavigateKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getNavigateKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// references+=AssociationRoleReference         
// // TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
protected class NavigationExpression_ReferencesAssignment_1 extends AssignmentToken  {
	
	public NavigationExpression_ReferencesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getReferencesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationRoleReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNavigationExpressionAccess().getReferencesAssociationRoleReferenceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NavigationExpression_NavigateKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NavigationExpression ****************/


/************ begin Rule DtoPropertyReference ****************
 *
 * DtoPropertyReference:
 *   name=ID ("." subname=ID)?;
 *
 **/

// name=ID ("." subname=ID)?
protected class DtoPropertyReference_Group extends GroupToken {
	
	public DtoPropertyReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoPropertyReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoPropertyReference_Group_1(parent, this, 0, inst);
			case 1: return new DtoPropertyReference_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoPropertyReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class DtoPropertyReference_NameAssignment_0 extends AssignmentToken  {
	
	public DtoPropertyReference_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoPropertyReferenceAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoPropertyReferenceAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("." subname=ID)?
protected class DtoPropertyReference_Group_1 extends GroupToken {
	
	public DtoPropertyReference_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoPropertyReferenceAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoPropertyReference_SubnameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "."
protected class DtoPropertyReference_FullStopKeyword_1_0 extends KeywordToken  {
	
	public DtoPropertyReference_FullStopKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoPropertyReferenceAccess().getFullStopKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoPropertyReference_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// subname=ID
protected class DtoPropertyReference_SubnameAssignment_1_1 extends AssignmentToken  {
	
	public DtoPropertyReference_SubnameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoPropertyReferenceAccess().getSubnameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoPropertyReference_FullStopKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("subname",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("subname");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoPropertyReferenceAccess().getSubnameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule DtoPropertyReference ****************/


/************ begin Rule AssociationRoleReference ****************
 *
 * AssociationRoleReference:
 *   name=ID;
 *
 **/

// name=ID
protected class AssociationRoleReference_NameAssignment extends AssignmentToken  {
	
	public AssociationRoleReference_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationRoleReferenceAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationRoleReferenceAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule AssociationRoleReference ****************/

}
