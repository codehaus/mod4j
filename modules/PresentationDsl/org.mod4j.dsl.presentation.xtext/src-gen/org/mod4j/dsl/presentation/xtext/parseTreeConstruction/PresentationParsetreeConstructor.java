/*
* generated by Xtext
*/
package org.mod4j.dsl.presentation.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.mod4j.dsl.presentation.xtext.services.PresentationGrammarAccess;

import com.google.inject.Inject;

public class PresentationParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PresentationGrammarAccess grammarAccess;
		
	public PresentationGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_Group(this, this, 0, inst);
			case 1: return new ExternalReference_Group(this, this, 1, inst);
			case 2: return new ModelElement_Alternatives(this, this, 2, inst);
			case 3: return new UIModelElement_Alternatives(this, this, 3, inst);
			case 4: return new Dialogue_Alternatives(this, this, 4, inst);
			case 5: return new ContentForm_Group(this, this, 5, inst);
			case 6: return new CompoundDialogue_Alternatives(this, this, 6, inst);
			case 7: return new CollectionDialogue_Group(this, this, 7, inst);
			case 8: return new MasterDetail_Group(this, this, 8, inst);
			case 9: return new Process_Alternatives(this, this, 9, inst);
			case 10: return new AutomatedProcess_Group(this, this, 10, inst);
			case 11: return new InteractiveProcess_Group(this, this, 11, inst);
			case 12: return new FormElement_Group(this, this, 12, inst);
			case 13: return new DialogueCall_Alternatives(this, this, 13, inst);
			case 14: return new LinkedDialogueCall_Group(this, this, 14, inst);
			case 15: return new DirectDialogueCall_Group(this, this, 15, inst);
			case 16: return new ProcessCall_Group(this, this, 16, inst);
			case 17: return new LinkRef_NameAssignment(this, this, 17, inst);
			case 18: return new Link_Alternatives(this, this, 18, inst);
			case 19: return new LinkStep_Group(this, this, 19, inst);
			case 20: return new LinkPath_Group(this, this, 20, inst);
			case 21: return new DtoPropertyReference_NameAssignment(this, this, 21, inst);
			case 22: return new AssociationRoleReference_NameAssignment(this, this, 22, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule PresentationModel ****************
 *
 * PresentationModel:
 *   description=STRING? "PresentationModel" name=ID externalReferences+=
 *   ExternalReference* elements+=ModelElement*; 
 * 
 * //preventMMGeneration
 * 
 * //importMetamodel "http://www.mod4j.org/pmfmod" ;
 * 
 * //IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
 *
 **/

// description=STRING? "PresentationModel" name=ID externalReferences+=
// ExternalReference* elements+=ModelElement*
protected class PresentationModel_Group extends GroupToken {
	
	public PresentationModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_ElementsAssignment_4(parent, this, 0, inst);
			case 1: return new PresentationModel_ExternalReferencesAssignment_3(parent, this, 1, inst);
			case 2: return new PresentationModel_NameAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentationModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class PresentationModel_DescriptionAssignment_0 extends AssignmentToken  {
	
	public PresentationModel_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPresentationModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "PresentationModel"
protected class PresentationModel_PresentationModelKeyword_1 extends KeywordToken  {
	
	public PresentationModel_PresentationModelKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getPresentationModelKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class PresentationModel_NameAssignment_2 extends AssignmentToken  {
	
	public PresentationModel_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_PresentationModelKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPresentationModelAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// externalReferences+=ExternalReference*
protected class PresentationModel_ExternalReferencesAssignment_3 extends AssignmentToken  {
	
	public PresentationModel_ExternalReferencesAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getExternalReferencesAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("externalReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("externalReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentationModelAccess().getExternalReferencesExternalReferenceParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentationModel_ExternalReferencesAssignment_3(parent, next, actIndex, consumed);
			case 1: return new PresentationModel_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=ModelElement*
protected class PresentationModel_ElementsAssignment_4 extends AssignmentToken  {
	
	public PresentationModel_ElementsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getElementsAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentationModelAccess().getElementsModelElementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentationModel_ElementsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new PresentationModel_ExternalReferencesAssignment_3(parent, next, actIndex, consumed);
			case 2: return new PresentationModel_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PresentationModel ****************/


/************ begin Rule ExternalReference ****************
 *
 * ExternalReference:
 *   "from" modelName=ID "import" name=ID;
 *
 **/

// "from" modelName=ID "import" name=ID
protected class ExternalReference_Group extends GroupToken {
	
	public ExternalReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class ExternalReference_FromKeyword_0 extends KeywordToken  {
	
	public ExternalReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class ExternalReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public ExternalReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getExternalReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "import"
protected class ExternalReference_ImportKeyword_2 extends KeywordToken  {
	
	public ExternalReference_ImportKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getImportKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class ExternalReference_NameAssignment_3 extends AssignmentToken  {
	
	public ExternalReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_ImportKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getExternalReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ExternalReference ****************/


/************ begin Rule ModelElement ****************
 *
 * ModelElement:
 *   UIModelElement|Link;
 *
 **/

// UIModelElement|Link
protected class ModelElement_Alternatives extends AlternativesToken {

	public ModelElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_UIModelElementParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ModelElement_LinkParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// UIModelElement
protected class ModelElement_UIModelElementParserRuleCall_0 extends RuleCallToken {
	
	public ModelElement_UIModelElementParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelElementAccess().getUIModelElementParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UIModelElement_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUIModelElementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Link
protected class ModelElement_LinkParserRuleCall_1 extends RuleCallToken {
	
	public ModelElement_LinkParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelElementAccess().getLinkParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Link_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLinkRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ModelElement ****************/


/************ begin Rule UIModelElement ****************
 *
 * UIModelElement:
 *   Dialogue|Process;
 *
 **/

// Dialogue|Process
protected class UIModelElement_Alternatives extends AlternativesToken {

	public UIModelElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElement_DialogueParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UIModelElement_ProcessParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUIModelElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Dialogue
protected class UIModelElement_DialogueParserRuleCall_0 extends RuleCallToken {
	
	public UIModelElement_DialogueParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getDialogueParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dialogue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Dialogue_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Process
protected class UIModelElement_ProcessParserRuleCall_1 extends RuleCallToken {
	
	public UIModelElement_ProcessParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getProcessParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Process_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getProcessRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UIModelElement ****************/


/************ begin Rule Dialogue ****************
 *
 * Dialogue:
 *   ContentForm|CompoundDialogue;
 *
 **/

// ContentForm|CompoundDialogue
protected class Dialogue_Alternatives extends AlternativesToken {

	public Dialogue_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDialogueAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dialogue_ContentFormParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Dialogue_CompoundDialogueParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ContentForm
protected class Dialogue_ContentFormParserRuleCall_0 extends RuleCallToken {
	
	public Dialogue_ContentFormParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDialogueAccess().getContentFormParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ContentForm_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getContentFormRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundDialogue
protected class Dialogue_CompoundDialogueParserRuleCall_1 extends RuleCallToken {
	
	public Dialogue_CompoundDialogueParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDialogueAccess().getCompoundDialogueParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundDialogue_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Dialogue ****************/


/************ begin Rule ContentForm ****************
 *
 * ContentForm:
 *   description=STRING? "ContentForm" name=ID "using" contextRef=[ExternalReference] (
 *   "readonly" (readonly?="true"|"false") ";")? formElements+=FormElement* ("processes"
 *   "[" processes+=ProcessCall* "]")?;
 *
 **/

// description=STRING? "ContentForm" name=ID "using" contextRef=[ExternalReference] (
// "readonly" (readonly?="true"|"false") ";")? formElements+=FormElement* ("processes"
// "[" processes+=ProcessCall* "]")?
protected class ContentForm_Group extends GroupToken {
	
	public ContentForm_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_7(parent, this, 0, inst);
			case 1: return new ContentForm_FormElementsAssignment_6(parent, this, 1, inst);
			case 2: return new ContentForm_Group_5(parent, this, 2, inst);
			case 3: return new ContentForm_ContextRefAssignment_4(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContentFormRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class ContentForm_DescriptionAssignment_0 extends AssignmentToken  {
	
	public ContentForm_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContentFormAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "ContentForm"
protected class ContentForm_ContentFormKeyword_1 extends KeywordToken  {
	
	public ContentForm_ContentFormKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getContentFormKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class ContentForm_NameAssignment_2 extends AssignmentToken  {
	
	public ContentForm_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ContentFormKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContentFormAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "using"
protected class ContentForm_UsingKeyword_3 extends KeywordToken  {
	
	public ContentForm_UsingKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getUsingKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class ContentForm_ContextRefAssignment_4 extends AssignmentToken  {
	
	public ContentForm_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_UsingKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContentFormAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getContentFormAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false") ";")?
protected class ContentForm_Group_5 extends GroupToken {
	
	public ContentForm_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_SemicolonKeyword_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class ContentForm_ReadonlyKeyword_5_0 extends KeywordToken  {
	
	public ContentForm_ReadonlyKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getReadonlyKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class ContentForm_Alternatives_5_1 extends AlternativesToken {

	public ContentForm_Alternatives_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getContentFormAccess().getAlternatives_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyAssignment_5_1_0(parent, this, 0, inst);
			case 1: return new ContentForm_FalseKeyword_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class ContentForm_ReadonlyAssignment_5_1_0 extends AssignmentToken  {
	
	public ContentForm_ReadonlyAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getReadonlyAssignment_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getContentFormAccess().getReadonlyTrueKeyword_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class ContentForm_FalseKeyword_5_1_1 extends KeywordToken  {
	
	public ContentForm_FalseKeyword_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getFalseKeyword_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class ContentForm_SemicolonKeyword_5_2 extends KeywordToken  {
	
	public ContentForm_SemicolonKeyword_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getSemicolonKeyword_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Alternatives_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// formElements+=FormElement*
protected class ContentForm_FormElementsAssignment_6 extends AssignmentToken  {
	
	public ContentForm_FormElementsAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getFormElementsAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("formElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("formElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContentFormAccess().getFormElementsFormElementParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContentForm_FormElementsAssignment_6(parent, next, actIndex, consumed);
			case 1: return new ContentForm_Group_5(parent, next, actIndex, consumed);
			case 2: return new ContentForm_ContextRefAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("processes" "[" processes+=ProcessCall* "]")?
protected class ContentForm_Group_7 extends GroupToken {
	
	public ContentForm_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_RightSquareBracketKeyword_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class ContentForm_ProcessesKeyword_7_0 extends KeywordToken  {
	
	public ContentForm_ProcessesKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getProcessesKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_FormElementsAssignment_6(parent, this, 0, inst);
			case 1: return new ContentForm_Group_5(parent, this, 1, inst);
			case 2: return new ContentForm_ContextRefAssignment_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class ContentForm_LeftSquareBracketKeyword_7_1 extends KeywordToken  {
	
	public ContentForm_LeftSquareBracketKeyword_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getLeftSquareBracketKeyword_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ProcessesKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall*
protected class ContentForm_ProcessesAssignment_7_2 extends AssignmentToken  {
	
	public ContentForm_ProcessesAssignment_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getProcessesAssignment_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContentFormAccess().getProcessesProcessCallParserRuleCall_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContentForm_ProcessesAssignment_7_2(parent, next, actIndex, consumed);
			case 1: return new ContentForm_LeftSquareBracketKeyword_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class ContentForm_RightSquareBracketKeyword_7_3 extends KeywordToken  {
	
	public ContentForm_RightSquareBracketKeyword_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getRightSquareBracketKeyword_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ProcessesAssignment_7_2(parent, this, 0, inst);
			case 1: return new ContentForm_LeftSquareBracketKeyword_7_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule ContentForm ****************/


/************ begin Rule CompoundDialogue ****************
 *
 * CompoundDialogue:
 *   description=STRING? "CompoundDialogue" name=ID "using" contextRef=[ExternalReference
 *   ] ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" dialogues+=
 *   DialogueCall* "]")? ("processes" "[" processes+=ProcessCall* "]")?|CollectionDialogue
 *   |MasterDetail;
 *
 **/

// description=STRING? "CompoundDialogue" name=ID "using" contextRef=[ExternalReference
// ] ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" dialogues+=
// DialogueCall* "]")? ("processes" "[" processes+=ProcessCall* "]")?|CollectionDialogue
// |MasterDetail
protected class CompoundDialogue_Alternatives extends AlternativesToken {

	public CompoundDialogue_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0(parent, this, 0, inst);
			case 1: return new CompoundDialogue_CollectionDialogueParserRuleCall_1(parent, this, 1, inst);
			case 2: return new CompoundDialogue_MasterDetailParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING? "CompoundDialogue" name=ID "using" contextRef=[ExternalReference
// ] ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" dialogues+=
// DialogueCall* "]")? ("processes" "[" processes+=ProcessCall* "]")?
protected class CompoundDialogue_Group_0 extends GroupToken {
	
	public CompoundDialogue_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_7(parent, this, 0, inst);
			case 1: return new CompoundDialogue_Group_0_6(parent, this, 1, inst);
			case 2: return new CompoundDialogue_Group_0_5(parent, this, 2, inst);
			case 3: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING?
protected class CompoundDialogue_DescriptionAssignment_0_0 extends AssignmentToken  {
	
	public CompoundDialogue_DescriptionAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDescriptionAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCompoundDialogueAccess().getDescriptionSTRINGTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "CompoundDialogue"
protected class CompoundDialogue_CompoundDialogueKeyword_0_1 extends KeywordToken  {
	
	public CompoundDialogue_CompoundDialogueKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getCompoundDialogueKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DescriptionAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class CompoundDialogue_NameAssignment_0_2 extends AssignmentToken  {
	
	public CompoundDialogue_NameAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getNameAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_CompoundDialogueKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCompoundDialogueAccess().getNameIDTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// "using"
protected class CompoundDialogue_UsingKeyword_0_3 extends KeywordToken  {
	
	public CompoundDialogue_UsingKeyword_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getUsingKeyword_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_NameAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class CompoundDialogue_ContextRefAssignment_0_4 extends AssignmentToken  {
	
	public CompoundDialogue_ContextRefAssignment_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getContextRefAssignment_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_UsingKeyword_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundDialogueAccess().getContextRefExternalReferenceCrossReference_0_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getCompoundDialogueAccess().getContextRefExternalReferenceCrossReference_0_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false") ";")?
protected class CompoundDialogue_Group_0_5 extends GroupToken {
	
	public CompoundDialogue_Group_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_SemicolonKeyword_0_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class CompoundDialogue_ReadonlyKeyword_0_5_0 extends KeywordToken  {
	
	public CompoundDialogue_ReadonlyKeyword_0_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getReadonlyKeyword_0_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class CompoundDialogue_Alternatives_0_5_1 extends AlternativesToken {

	public CompoundDialogue_Alternatives_0_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getAlternatives_0_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyAssignment_0_5_1_0(parent, this, 0, inst);
			case 1: return new CompoundDialogue_FalseKeyword_0_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class CompoundDialogue_ReadonlyAssignment_0_5_1_0 extends AssignmentToken  {
	
	public CompoundDialogue_ReadonlyAssignment_0_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getReadonlyAssignment_0_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyKeyword_0_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getCompoundDialogueAccess().getReadonlyTrueKeyword_0_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class CompoundDialogue_FalseKeyword_0_5_1_1 extends KeywordToken  {
	
	public CompoundDialogue_FalseKeyword_0_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getFalseKeyword_0_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyKeyword_0_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class CompoundDialogue_SemicolonKeyword_0_5_2 extends KeywordToken  {
	
	public CompoundDialogue_SemicolonKeyword_0_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getSemicolonKeyword_0_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Alternatives_0_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("dialogues" "[" dialogues+=DialogueCall* "]")?
protected class CompoundDialogue_Group_0_6 extends GroupToken {
	
	public CompoundDialogue_Group_0_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_RightSquareBracketKeyword_0_6_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "dialogues"
protected class CompoundDialogue_DialoguesKeyword_0_6_0 extends KeywordToken  {
	
	public CompoundDialogue_DialoguesKeyword_0_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDialoguesKeyword_0_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_5(parent, this, 0, inst);
			case 1: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CompoundDialogue_LeftSquareBracketKeyword_0_6_1 extends KeywordToken  {
	
	public CompoundDialogue_LeftSquareBracketKeyword_0_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getLeftSquareBracketKeyword_0_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DialoguesKeyword_0_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dialogues+=DialogueCall*
protected class CompoundDialogue_DialoguesAssignment_0_6_2 extends AssignmentToken  {
	
	public CompoundDialogue_DialoguesAssignment_0_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDialoguesAssignment_0_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dialogues",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dialogues");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundDialogueAccess().getDialoguesDialogueCallParserRuleCall_0_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundDialogue_DialoguesAssignment_0_6_2(parent, next, actIndex, consumed);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class CompoundDialogue_RightSquareBracketKeyword_0_6_3 extends KeywordToken  {
	
	public CompoundDialogue_RightSquareBracketKeyword_0_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getRightSquareBracketKeyword_0_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DialoguesAssignment_0_6_2(parent, this, 0, inst);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("processes" "[" processes+=ProcessCall* "]")?
protected class CompoundDialogue_Group_0_7 extends GroupToken {
	
	public CompoundDialogue_Group_0_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_RightSquareBracketKeyword_0_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class CompoundDialogue_ProcessesKeyword_0_7_0 extends KeywordToken  {
	
	public CompoundDialogue_ProcessesKeyword_0_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getProcessesKeyword_0_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_6(parent, this, 0, inst);
			case 1: return new CompoundDialogue_Group_0_5(parent, this, 1, inst);
			case 2: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CompoundDialogue_LeftSquareBracketKeyword_0_7_1 extends KeywordToken  {
	
	public CompoundDialogue_LeftSquareBracketKeyword_0_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getLeftSquareBracketKeyword_0_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ProcessesKeyword_0_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall*
protected class CompoundDialogue_ProcessesAssignment_0_7_2 extends AssignmentToken  {
	
	public CompoundDialogue_ProcessesAssignment_0_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getProcessesAssignment_0_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundDialogueAccess().getProcessesProcessCallParserRuleCall_0_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundDialogue_ProcessesAssignment_0_7_2(parent, next, actIndex, consumed);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class CompoundDialogue_RightSquareBracketKeyword_0_7_3 extends KeywordToken  {
	
	public CompoundDialogue_RightSquareBracketKeyword_0_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getRightSquareBracketKeyword_0_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ProcessesAssignment_0_7_2(parent, this, 0, inst);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_7_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// CollectionDialogue
protected class CompoundDialogue_CollectionDialogueParserRuleCall_1 extends RuleCallToken {
	
	public CompoundDialogue_CollectionDialogueParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getCollectionDialogueParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CollectionDialogue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCollectionDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// MasterDetail
protected class CompoundDialogue_MasterDetailParserRuleCall_2 extends RuleCallToken {
	
	public CompoundDialogue_MasterDetailParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getMasterDetailParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MasterDetail_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMasterDetailRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule CompoundDialogue ****************/


/************ begin Rule CollectionDialogue ****************
 *
 * CollectionDialogue:
 *   description=STRING? "CollectionDialogue" name=ID "using" contextRef=[
 *   ExternalReference] ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "["
 *   dialogues+=DialogueCall* "]")? ("processes" "[" processes+=ProcessCall* "]")?;
 *
 **/

// description=STRING? "CollectionDialogue" name=ID "using" contextRef=[
// ExternalReference] ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "["
// dialogues+=DialogueCall* "]")? ("processes" "[" processes+=ProcessCall* "]")?
protected class CollectionDialogue_Group extends GroupToken {
	
	public CollectionDialogue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_7(parent, this, 0, inst);
			case 1: return new CollectionDialogue_Group_6(parent, this, 1, inst);
			case 2: return new CollectionDialogue_Group_5(parent, this, 2, inst);
			case 3: return new CollectionDialogue_ContextRefAssignment_4(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCollectionDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class CollectionDialogue_DescriptionAssignment_0 extends AssignmentToken  {
	
	public CollectionDialogue_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCollectionDialogueAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "CollectionDialogue"
protected class CollectionDialogue_CollectionDialogueKeyword_1 extends KeywordToken  {
	
	public CollectionDialogue_CollectionDialogueKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getCollectionDialogueKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class CollectionDialogue_NameAssignment_2 extends AssignmentToken  {
	
	public CollectionDialogue_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_CollectionDialogueKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCollectionDialogueAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "using"
protected class CollectionDialogue_UsingKeyword_3 extends KeywordToken  {
	
	public CollectionDialogue_UsingKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getUsingKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class CollectionDialogue_ContextRefAssignment_4 extends AssignmentToken  {
	
	public CollectionDialogue_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_UsingKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCollectionDialogueAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getCollectionDialogueAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false") ";")?
protected class CollectionDialogue_Group_5 extends GroupToken {
	
	public CollectionDialogue_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_SemicolonKeyword_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class CollectionDialogue_ReadonlyKeyword_5_0 extends KeywordToken  {
	
	public CollectionDialogue_ReadonlyKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getReadonlyKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class CollectionDialogue_Alternatives_5_1 extends AlternativesToken {

	public CollectionDialogue_Alternatives_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getAlternatives_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyAssignment_5_1_0(parent, this, 0, inst);
			case 1: return new CollectionDialogue_FalseKeyword_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class CollectionDialogue_ReadonlyAssignment_5_1_0 extends AssignmentToken  {
	
	public CollectionDialogue_ReadonlyAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getReadonlyAssignment_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getCollectionDialogueAccess().getReadonlyTrueKeyword_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class CollectionDialogue_FalseKeyword_5_1_1 extends KeywordToken  {
	
	public CollectionDialogue_FalseKeyword_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getFalseKeyword_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class CollectionDialogue_SemicolonKeyword_5_2 extends KeywordToken  {
	
	public CollectionDialogue_SemicolonKeyword_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getSemicolonKeyword_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Alternatives_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("dialogues" "[" dialogues+=DialogueCall* "]")?
protected class CollectionDialogue_Group_6 extends GroupToken {
	
	public CollectionDialogue_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_RightSquareBracketKeyword_6_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "dialogues"
protected class CollectionDialogue_DialoguesKeyword_6_0 extends KeywordToken  {
	
	public CollectionDialogue_DialoguesKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDialoguesKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_5(parent, this, 0, inst);
			case 1: return new CollectionDialogue_ContextRefAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CollectionDialogue_LeftSquareBracketKeyword_6_1 extends KeywordToken  {
	
	public CollectionDialogue_LeftSquareBracketKeyword_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getLeftSquareBracketKeyword_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DialoguesKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dialogues+=DialogueCall*
protected class CollectionDialogue_DialoguesAssignment_6_2 extends AssignmentToken  {
	
	public CollectionDialogue_DialoguesAssignment_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDialoguesAssignment_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dialogues",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dialogues");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCollectionDialogueAccess().getDialoguesDialogueCallParserRuleCall_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectionDialogue_DialoguesAssignment_6_2(parent, next, actIndex, consumed);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class CollectionDialogue_RightSquareBracketKeyword_6_3 extends KeywordToken  {
	
	public CollectionDialogue_RightSquareBracketKeyword_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getRightSquareBracketKeyword_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DialoguesAssignment_6_2(parent, this, 0, inst);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("processes" "[" processes+=ProcessCall* "]")?
protected class CollectionDialogue_Group_7 extends GroupToken {
	
	public CollectionDialogue_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_RightSquareBracketKeyword_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class CollectionDialogue_ProcessesKeyword_7_0 extends KeywordToken  {
	
	public CollectionDialogue_ProcessesKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getProcessesKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_6(parent, this, 0, inst);
			case 1: return new CollectionDialogue_Group_5(parent, this, 1, inst);
			case 2: return new CollectionDialogue_ContextRefAssignment_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CollectionDialogue_LeftSquareBracketKeyword_7_1 extends KeywordToken  {
	
	public CollectionDialogue_LeftSquareBracketKeyword_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getLeftSquareBracketKeyword_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ProcessesKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall*
protected class CollectionDialogue_ProcessesAssignment_7_2 extends AssignmentToken  {
	
	public CollectionDialogue_ProcessesAssignment_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getProcessesAssignment_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCollectionDialogueAccess().getProcessesProcessCallParserRuleCall_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectionDialogue_ProcessesAssignment_7_2(parent, next, actIndex, consumed);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class CollectionDialogue_RightSquareBracketKeyword_7_3 extends KeywordToken  {
	
	public CollectionDialogue_RightSquareBracketKeyword_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getRightSquareBracketKeyword_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ProcessesAssignment_7_2(parent, this, 0, inst);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_7_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule CollectionDialogue ****************/


/************ begin Rule MasterDetail ****************
 *
 * MasterDetail:
 *   description=STRING? "MasterDetail" name=ID "using" contextRef=[ExternalReference] (
 *   "readonly" (readonly?="true"|"false") ";")? "master" master=DialogueCall ";" "detail"
 *   detail=DialogueCall ";" ("processes" "[" processes+=ProcessCall* "]")?;
 *
 **/

// description=STRING? "MasterDetail" name=ID "using" contextRef=[ExternalReference] (
// "readonly" (readonly?="true"|"false") ";")? "master" master=DialogueCall ";" "detail"
// detail=DialogueCall ";" ("processes" "[" processes+=ProcessCall* "]")?
protected class MasterDetail_Group extends GroupToken {
	
	public MasterDetail_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group_12(parent, this, 0, inst);
			case 1: return new MasterDetail_SemicolonKeyword_11(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMasterDetailRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class MasterDetail_DescriptionAssignment_0 extends AssignmentToken  {
	
	public MasterDetail_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMasterDetailAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "MasterDetail"
protected class MasterDetail_MasterDetailKeyword_1 extends KeywordToken  {
	
	public MasterDetail_MasterDetailKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterDetailKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class MasterDetail_NameAssignment_2 extends AssignmentToken  {
	
	public MasterDetail_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_MasterDetailKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMasterDetailAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "using"
protected class MasterDetail_UsingKeyword_3 extends KeywordToken  {
	
	public MasterDetail_UsingKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getUsingKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class MasterDetail_ContextRefAssignment_4 extends AssignmentToken  {
	
	public MasterDetail_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_UsingKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMasterDetailAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getMasterDetailAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false") ";")?
protected class MasterDetail_Group_5 extends GroupToken {
	
	public MasterDetail_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class MasterDetail_ReadonlyKeyword_5_0 extends KeywordToken  {
	
	public MasterDetail_ReadonlyKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getReadonlyKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class MasterDetail_Alternatives_5_1 extends AlternativesToken {

	public MasterDetail_Alternatives_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getAlternatives_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyAssignment_5_1_0(parent, this, 0, inst);
			case 1: return new MasterDetail_FalseKeyword_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class MasterDetail_ReadonlyAssignment_5_1_0 extends AssignmentToken  {
	
	public MasterDetail_ReadonlyAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getReadonlyAssignment_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMasterDetailAccess().getReadonlyTrueKeyword_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class MasterDetail_FalseKeyword_5_1_1 extends KeywordToken  {
	
	public MasterDetail_FalseKeyword_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getFalseKeyword_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class MasterDetail_SemicolonKeyword_5_2 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Alternatives_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "master"
protected class MasterDetail_MasterKeyword_6 extends KeywordToken  {
	
	public MasterDetail_MasterKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group_5(parent, this, 0, inst);
			case 1: return new MasterDetail_ContextRefAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// master=DialogueCall
protected class MasterDetail_MasterAssignment_7 extends AssignmentToken  {
	
	public MasterDetail_MasterAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("master",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("master");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getMasterDialogueCallParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_MasterKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MasterDetail_SemicolonKeyword_8 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_MasterAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "detail"
protected class MasterDetail_DetailKeyword_9 extends KeywordToken  {
	
	public MasterDetail_DetailKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDetailKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// detail=DialogueCall
protected class MasterDetail_DetailAssignment_10 extends AssignmentToken  {
	
	public MasterDetail_DetailAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDetailAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("detail",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("detail");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getDetailDialogueCallParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_DetailKeyword_9(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MasterDetail_SemicolonKeyword_11 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_DetailAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("processes" "[" processes+=ProcessCall* "]")?
protected class MasterDetail_Group_12 extends GroupToken {
	
	public MasterDetail_Group_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_RightSquareBracketKeyword_12_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class MasterDetail_ProcessesKeyword_12_0 extends KeywordToken  {
	
	public MasterDetail_ProcessesKeyword_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getProcessesKeyword_12_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class MasterDetail_LeftSquareBracketKeyword_12_1 extends KeywordToken  {
	
	public MasterDetail_LeftSquareBracketKeyword_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getLeftSquareBracketKeyword_12_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ProcessesKeyword_12_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall*
protected class MasterDetail_ProcessesAssignment_12_2 extends AssignmentToken  {
	
	public MasterDetail_ProcessesAssignment_12_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getProcessesAssignment_12_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getProcessesProcessCallParserRuleCall_12_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_ProcessesAssignment_12_2(parent, next, actIndex, consumed);
			case 1: return new MasterDetail_LeftSquareBracketKeyword_12_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class MasterDetail_RightSquareBracketKeyword_12_3 extends KeywordToken  {
	
	public MasterDetail_RightSquareBracketKeyword_12_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getRightSquareBracketKeyword_12_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ProcessesAssignment_12_2(parent, this, 0, inst);
			case 1: return new MasterDetail_LeftSquareBracketKeyword_12_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule MasterDetail ****************/


/************ begin Rule Process ****************
 *
 * Process:
 *   AutomatedProcess|InteractiveProcess;
 *
 **/

// AutomatedProcess|InteractiveProcess
protected class Process_Alternatives extends AlternativesToken {

	public Process_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_AutomatedProcessParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Process_InteractiveProcessParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcessRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AutomatedProcess
protected class Process_AutomatedProcessParserRuleCall_0 extends RuleCallToken {
	
	public Process_AutomatedProcessParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessAccess().getAutomatedProcessParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AutomatedProcess_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAutomatedProcessRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// InteractiveProcess
protected class Process_InteractiveProcessParserRuleCall_1 extends RuleCallToken {
	
	public Process_InteractiveProcessParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessAccess().getInteractiveProcessParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InteractiveProcess_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInteractiveProcessRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Process ****************/


/************ begin Rule AutomatedProcess ****************
 *
 * AutomatedProcess:
 *   description=STRING? "AutomatedProcess" name=ID "using" contextRef=[ExternalReference
 *   ];
 *
 **/

// description=STRING? "AutomatedProcess" name=ID "using" contextRef=[ExternalReference
// ]
protected class AutomatedProcess_Group extends GroupToken {
	
	public AutomatedProcess_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAutomatedProcessRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class AutomatedProcess_DescriptionAssignment_0 extends AssignmentToken  {
	
	public AutomatedProcess_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAutomatedProcessAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "AutomatedProcess"
protected class AutomatedProcess_AutomatedProcessKeyword_1 extends KeywordToken  {
	
	public AutomatedProcess_AutomatedProcessKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getAutomatedProcessKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class AutomatedProcess_NameAssignment_2 extends AssignmentToken  {
	
	public AutomatedProcess_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_AutomatedProcessKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAutomatedProcessAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "using"
protected class AutomatedProcess_UsingKeyword_3 extends KeywordToken  {
	
	public AutomatedProcess_UsingKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getUsingKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class AutomatedProcess_ContextRefAssignment_4 extends AssignmentToken  {
	
	public AutomatedProcess_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_UsingKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutomatedProcessAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAutomatedProcessAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule AutomatedProcess ****************/


/************ begin Rule InteractiveProcess ****************
 *
 * InteractiveProcess:
 *   description=STRING? "InteractiveProcess" name=ID "using" contextRef=[
 *   ExternalReference];
 *
 **/

// description=STRING? "InteractiveProcess" name=ID "using" contextRef=[
// ExternalReference]
protected class InteractiveProcess_Group extends GroupToken {
	
	public InteractiveProcess_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInteractiveProcessRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class InteractiveProcess_DescriptionAssignment_0 extends AssignmentToken  {
	
	public InteractiveProcess_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInteractiveProcessAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "InteractiveProcess"
protected class InteractiveProcess_InteractiveProcessKeyword_1 extends KeywordToken  {
	
	public InteractiveProcess_InteractiveProcessKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getInteractiveProcessKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class InteractiveProcess_NameAssignment_2 extends AssignmentToken  {
	
	public InteractiveProcess_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_InteractiveProcessKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInteractiveProcessAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "using"
protected class InteractiveProcess_UsingKeyword_3 extends KeywordToken  {
	
	public InteractiveProcess_UsingKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getUsingKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class InteractiveProcess_ContextRefAssignment_4 extends AssignmentToken  {
	
	public InteractiveProcess_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_UsingKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInteractiveProcessAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getInteractiveProcessAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule InteractiveProcess ****************/


/************ begin Rule FormElement ****************
 *
 * FormElement:
 *   "formElement" references=DtoPropertyReference "named" name=ID ("readonly" (readonly?=
 *   "true"|"false"))? ";"; 
 * 	
 *   
 * 	 
 * //	("navigate" LinkRef "to")?
 *
 **/

// "formElement" references=DtoPropertyReference "named" name=ID ("readonly" (readonly?=
// "true"|"false"))? ";" 
// 	 
// //	("navigate" LinkRef "to")?
protected class FormElement_Group extends GroupToken {
	
	public FormElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFormElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "formElement" 
// 	 
// //	("navigate" LinkRef "to")?
protected class FormElement_FormElementKeyword_0 extends KeywordToken  {
	
	public FormElement_FormElementKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getFormElementKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// references=DtoPropertyReference  
// //	("navigate" LinkRef "to")?
protected class FormElement_ReferencesAssignment_1 extends AssignmentToken  {
	
	public FormElement_ReferencesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReferencesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoPropertyReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDtoPropertyReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormElementAccess().getReferencesDtoPropertyReferenceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormElement_FormElementKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "named"
protected class FormElement_NamedKeyword_2 extends KeywordToken  {
	
	public FormElement_NamedKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getNamedKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReferencesAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class FormElement_NameAssignment_3 extends AssignmentToken  {
	
	public FormElement_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_NamedKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormElementAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false"))?
protected class FormElement_Group_4 extends GroupToken {
	
	public FormElement_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Alternatives_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class FormElement_ReadonlyKeyword_4_0 extends KeywordToken  {
	
	public FormElement_ReadonlyKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReadonlyKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class FormElement_Alternatives_4_1 extends AlternativesToken {

	public FormElement_Alternatives_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getFormElementAccess().getAlternatives_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyAssignment_4_1_0(parent, this, 0, inst);
			case 1: return new FormElement_FalseKeyword_4_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class FormElement_ReadonlyAssignment_4_1_0 extends AssignmentToken  {
	
	public FormElement_ReadonlyAssignment_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReadonlyAssignment_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFormElementAccess().getReadonlyTrueKeyword_4_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class FormElement_FalseKeyword_4_1_1 extends KeywordToken  {
	
	public FormElement_FalseKeyword_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getFalseKeyword_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// ";"
protected class FormElement_SemicolonKeyword_5 extends KeywordToken  {
	
	public FormElement_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group_4(parent, this, 0, inst);
			case 1: return new FormElement_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FormElement ****************/


/************ begin Rule DialogueCall ****************
 *
 * DialogueCall:
 *   DirectDialogueCall|LinkedDialogueCall;
 *
 **/

// DirectDialogueCall|LinkedDialogueCall
protected class DialogueCall_Alternatives extends AlternativesToken {

	public DialogueCall_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_DirectDialogueCallParserRuleCall_0(parent, this, 0, inst);
			case 1: return new DialogueCall_LinkedDialogueCallParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DirectDialogueCall
protected class DialogueCall_DirectDialogueCallParserRuleCall_0 extends RuleCallToken {
	
	public DialogueCall_DirectDialogueCallParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getDirectDialogueCallParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectDialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DirectDialogueCall_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDirectDialogueCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LinkedDialogueCall
protected class DialogueCall_LinkedDialogueCallParserRuleCall_1 extends RuleCallToken {
	
	public DialogueCall_LinkedDialogueCallParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getLinkedDialogueCallParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkedDialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LinkedDialogueCall_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLinkedDialogueCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule DialogueCall ****************/


/************ begin Rule LinkedDialogueCall ****************
 *
 * LinkedDialogueCall:
 *   "navigate" link=LinkRef "to" name=ID ";";
 *
 **/

// "navigate" link=LinkRef "to" name=ID ";"
protected class LinkedDialogueCall_Group extends GroupToken {
	
	public LinkedDialogueCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLinkedDialogueCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkedDialogueCall_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLinkedDialogueCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "navigate"
protected class LinkedDialogueCall_NavigateKeyword_0 extends KeywordToken  {
	
	public LinkedDialogueCall_NavigateKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkedDialogueCallAccess().getNavigateKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// link=LinkRef
protected class LinkedDialogueCall_LinkAssignment_1 extends AssignmentToken  {
	
	public LinkedDialogueCall_LinkAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkedDialogueCallAccess().getLinkAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkRef_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("link",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("link");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLinkRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLinkedDialogueCallAccess().getLinkLinkRefParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LinkedDialogueCall_NavigateKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "to"
protected class LinkedDialogueCall_ToKeyword_2 extends KeywordToken  {
	
	public LinkedDialogueCall_ToKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkedDialogueCallAccess().getToKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkedDialogueCall_LinkAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class LinkedDialogueCall_NameAssignment_3 extends AssignmentToken  {
	
	public LinkedDialogueCall_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkedDialogueCallAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkedDialogueCall_ToKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLinkedDialogueCallAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class LinkedDialogueCall_SemicolonKeyword_4 extends KeywordToken  {
	
	public LinkedDialogueCall_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkedDialogueCallAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkedDialogueCall_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LinkedDialogueCall ****************/


/************ begin Rule DirectDialogueCall ****************
 *
 * DirectDialogueCall:
 *   name=ID ";";
 *
 **/

// name=ID ";"
protected class DirectDialogueCall_Group extends GroupToken {
	
	public DirectDialogueCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDirectDialogueCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectDialogueCall_SemicolonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDirectDialogueCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class DirectDialogueCall_NameAssignment_0 extends AssignmentToken  {
	
	public DirectDialogueCall_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectDialogueCallAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDirectDialogueCallAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class DirectDialogueCall_SemicolonKeyword_1 extends KeywordToken  {
	
	public DirectDialogueCall_SemicolonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDirectDialogueCallAccess().getSemicolonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DirectDialogueCall_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DirectDialogueCall ****************/


/************ begin Rule ProcessCall ****************
 *
 * ProcessCall:
 *   name=ID ";";
 *
 **/

// name=ID ";"
protected class ProcessCall_Group extends GroupToken {
	
	public ProcessCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_SemicolonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class ProcessCall_NameAssignment_0 extends AssignmentToken  {
	
	public ProcessCall_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessCallAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ProcessCall_SemicolonKeyword_1 extends KeywordToken  {
	
	public ProcessCall_SemicolonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getSemicolonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ProcessCall ****************/


/************ begin Rule LinkRef ****************
 *
 * LinkRef:
 *   name=ID;
 *
 **/

// name=ID
protected class LinkRef_NameAssignment extends AssignmentToken  {
	
	public LinkRef_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkRefAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLinkRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLinkRefAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule LinkRef ****************/


/************ begin Rule Link ****************
 *
 * Link:
 *   LinkStep|LinkPath;
 *
 **/

// LinkStep|LinkPath
protected class Link_Alternatives extends AlternativesToken {

	public Link_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLinkAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_LinkStepParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Link_LinkPathParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLinkRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// LinkStep
protected class Link_LinkStepParserRuleCall_0 extends RuleCallToken {
	
	public Link_LinkStepParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLinkAccess().getLinkStepParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkStep_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LinkStep_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLinkStepRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LinkPath
protected class Link_LinkPathParserRuleCall_1 extends RuleCallToken {
	
	public Link_LinkPathParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLinkAccess().getLinkPathParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkPath_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LinkPath_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLinkPathRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Link ****************/


/************ begin Rule LinkStep ****************
 *
 * LinkStep:
 *   description=STRING? "LinkStep" name=ID "using" contextRef=[ExternalReference]
 *   "navigate" reference=AssociationRoleReference;
 *
 **/

// description=STRING? "LinkStep" name=ID "using" contextRef=[ExternalReference]
// "navigate" reference=AssociationRoleReference
protected class LinkStep_Group extends GroupToken {
	
	public LinkStep_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLinkStepAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkStep_ReferenceAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLinkStepRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class LinkStep_DescriptionAssignment_0 extends AssignmentToken  {
	
	public LinkStep_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkStepAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLinkStepAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "LinkStep"
protected class LinkStep_LinkStepKeyword_1 extends KeywordToken  {
	
	public LinkStep_LinkStepKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkStepAccess().getLinkStepKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkStep_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class LinkStep_NameAssignment_2 extends AssignmentToken  {
	
	public LinkStep_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkStepAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkStep_LinkStepKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLinkStepAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "using"
protected class LinkStep_UsingKeyword_3 extends KeywordToken  {
	
	public LinkStep_UsingKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkStepAccess().getUsingKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkStep_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class LinkStep_ContextRefAssignment_4 extends AssignmentToken  {
	
	public LinkStep_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkStepAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkStep_UsingKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLinkStepAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getLinkStepAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "navigate"
protected class LinkStep_NavigateKeyword_5 extends KeywordToken  {
	
	public LinkStep_NavigateKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkStepAccess().getNavigateKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkStep_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// reference=AssociationRoleReference
protected class LinkStep_ReferenceAssignment_6 extends AssignmentToken  {
	
	public LinkStep_ReferenceAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkStepAccess().getReferenceAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationRoleReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("reference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("reference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLinkStepAccess().getReferenceAssociationRoleReferenceParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LinkStep_NavigateKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule LinkStep ****************/


/************ begin Rule LinkPath ****************
 *
 * LinkPath:
 *   description=STRING? "LinkPath" name=ID "using" contextRef=[ExternalReference];
 *
 **/

// description=STRING? "LinkPath" name=ID "using" contextRef=[ExternalReference]
protected class LinkPath_Group extends GroupToken {
	
	public LinkPath_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLinkPathAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkPath_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLinkPathRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class LinkPath_DescriptionAssignment_0 extends AssignmentToken  {
	
	public LinkPath_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkPathAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLinkPathAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "LinkPath"
protected class LinkPath_LinkPathKeyword_1 extends KeywordToken  {
	
	public LinkPath_LinkPathKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkPathAccess().getLinkPathKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkPath_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class LinkPath_NameAssignment_2 extends AssignmentToken  {
	
	public LinkPath_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkPathAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkPath_LinkPathKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLinkPathAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "using"
protected class LinkPath_UsingKeyword_3 extends KeywordToken  {
	
	public LinkPath_UsingKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkPathAccess().getUsingKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkPath_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class LinkPath_ContextRefAssignment_4 extends AssignmentToken  {
	
	public LinkPath_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkPathAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LinkPath_UsingKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLinkPathAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getLinkPathAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule LinkPath ****************/


/************ begin Rule DtoPropertyReference ****************
 *
 * DtoPropertyReference:
 *   name=ID;
 *
 **/

// name=ID
protected class DtoPropertyReference_NameAssignment extends AssignmentToken  {
	
	public DtoPropertyReference_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoPropertyReferenceAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoPropertyReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoPropertyReferenceAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DtoPropertyReference ****************/


/************ begin Rule AssociationRoleReference ****************
 *
 * AssociationRoleReference:
 *   name=ID;
 *
 **/

// name=ID
protected class AssociationRoleReference_NameAssignment extends AssignmentToken  {
	
	public AssociationRoleReference_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationRoleReferenceAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationRoleReferenceAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule AssociationRoleReference ****************/

}
