/*
* generated by Xtext
*/
package org.mod4j.dsl.presentation.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.mod4j.dsl.presentation.xtext.services.PresentationGrammarAccess;

import com.google.inject.Inject;

public class PresentationParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PresentationGrammarAccess grammarAccess;
		
	public PresentationGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_Group(this, this, 0, inst);
			case 1: return new ExternalReference_Group(this, this, 1, inst);
			case 2: return new ModelElementWithContext_UIModelElementParserRuleCall(this, this, 2, inst);
			case 3: return new UIModelElement_Alternatives(this, this, 3, inst);
			case 4: return new Dialogue_Alternatives(this, this, 4, inst);
			case 5: return new ContentForm_Group(this, this, 5, inst);
			case 6: return new SimpleProcess_Group(this, this, 6, inst);
			case 7: return new CompoundDialogue_Alternatives(this, this, 7, inst);
			case 8: return new CollectionDialogue_Group(this, this, 8, inst);
			case 9: return new MasterDetail_Group(this, this, 9, inst);
			case 10: return new Process_Alternatives(this, this, 10, inst);
			case 11: return new AutomatedProcess_Group(this, this, 11, inst);
			case 12: return new InteractiveProcess_Group(this, this, 12, inst);
			case 13: return new FormElement_Group(this, this, 13, inst);
			case 14: return new DialogueCall_Group(this, this, 14, inst);
			case 15: return new Expression_Alternatives(this, this, 15, inst);
			case 16: return new ProcessCall_Group(this, this, 16, inst);
			case 17: return new ServiceExpression_Group(this, this, 17, inst);
			case 18: return new NavigationExpression_Group(this, this, 18, inst);
			case 19: return new DtoPropertyReference_NameAssignment(this, this, 19, inst);
			case 20: return new AssociationRoleReference_NameAssignment(this, this, 20, inst);
			case 21: return new UICall_UIModelElementCallParserRuleCall(this, this, 21, inst);
			case 22: return new UIModelElementCall_Alternatives(this, this, 22, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule PresentationModel ****************
 *
 * PresentationModel:
 *   description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
 *   * elements+=ModelElementWithContext*; 
 * 
 * //IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
 *
 **/

// description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
// * elements+=ModelElementWithContext*
protected class PresentationModel_Group extends GroupToken {
	
	public PresentationModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_ElementsAssignment_5(parent, this, 0, inst);
			case 1: return new PresentationModel_ExternalReferencesAssignment_4(parent, this, 1, inst);
			case 2: return new PresentationModel_SemicolonKeyword_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentationModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class PresentationModel_DescriptionAssignment_0 extends AssignmentToken  {
	
	public PresentationModel_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPresentationModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "presentation"
protected class PresentationModel_PresentationKeyword_1 extends KeywordToken  {
	
	public PresentationModel_PresentationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getPresentationKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class PresentationModel_NameAssignment_2 extends AssignmentToken  {
	
	public PresentationModel_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_PresentationKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPresentationModelAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class PresentationModel_SemicolonKeyword_3 extends KeywordToken  {
	
	public PresentationModel_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// externalReferences+=ExternalReference*
protected class PresentationModel_ExternalReferencesAssignment_4 extends AssignmentToken  {
	
	public PresentationModel_ExternalReferencesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getExternalReferencesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("externalReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("externalReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentationModelAccess().getExternalReferencesExternalReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentationModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new PresentationModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=ModelElementWithContext*
protected class PresentationModel_ElementsAssignment_5 extends AssignmentToken  {
	
	public PresentationModel_ElementsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getElementsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElementWithContext_UIModelElementParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelElementWithContextRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPresentationModelAccess().getElementsModelElementWithContextParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PresentationModel_ElementsAssignment_5(parent, next, actIndex, consumed);
			case 1: return new PresentationModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 2: return new PresentationModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PresentationModel ****************/


/************ begin Rule ExternalReference ****************
 *
 * ExternalReference:
 *   "from" modelName=ID "import" name=ID ";";
 *
 **/

// "from" modelName=ID "import" name=ID ";"
protected class ExternalReference_Group extends GroupToken {
	
	public ExternalReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class ExternalReference_FromKeyword_0 extends KeywordToken  {
	
	public ExternalReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class ExternalReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public ExternalReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getExternalReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "import"
protected class ExternalReference_ImportKeyword_2 extends KeywordToken  {
	
	public ExternalReference_ImportKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getImportKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class ExternalReference_NameAssignment_3 extends AssignmentToken  {
	
	public ExternalReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_ImportKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getExternalReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ExternalReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public ExternalReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ExternalReference ****************/


/************ begin Rule ModelElementWithContext ****************
 *
 * ModelElementWithContext:
 *   UIModelElement; 
 * 	
 *   
 * 	  //| Link
 *
 **/

// UIModelElement 
// 	  //| Link
protected class ModelElementWithContext_UIModelElementParserRuleCall extends RuleCallToken {
	
	public ModelElementWithContext_UIModelElementParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelElementWithContextAccess().getUIModelElementParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelElementWithContextRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UIModelElement_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUIModelElementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ModelElementWithContext ****************/


/************ begin Rule UIModelElement ****************
 *
 * UIModelElement:
 *   Dialogue|Process;
 *
 **/

// Dialogue|Process
protected class UIModelElement_Alternatives extends AlternativesToken {

	public UIModelElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElement_DialogueParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UIModelElement_ProcessParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUIModelElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Dialogue
protected class UIModelElement_DialogueParserRuleCall_0 extends RuleCallToken {
	
	public UIModelElement_DialogueParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getDialogueParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dialogue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Dialogue_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Process
protected class UIModelElement_ProcessParserRuleCall_1 extends RuleCallToken {
	
	public UIModelElement_ProcessParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getProcessParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Process_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getProcessRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UIModelElement ****************/


/************ begin Rule Dialogue ****************
 *
 * Dialogue:
 *   ContentForm|CompoundDialogue;
 *
 **/

// ContentForm|CompoundDialogue
protected class Dialogue_Alternatives extends AlternativesToken {

	public Dialogue_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDialogueAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dialogue_ContentFormParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Dialogue_CompoundDialogueParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ContentForm
protected class Dialogue_ContentFormParserRuleCall_0 extends RuleCallToken {
	
	public Dialogue_ContentFormParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDialogueAccess().getContentFormParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ContentForm_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getContentFormRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundDialogue
protected class Dialogue_CompoundDialogueParserRuleCall_1 extends RuleCallToken {
	
	public Dialogue_CompoundDialogueParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDialogueAccess().getCompoundDialogueParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundDialogue_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Dialogue ****************/


/************ begin Rule ContentForm ****************
 *
 * ContentForm:
 *   description=STRING? "ContentForm" name=ID "context" isCollection?="list"? contextRef=
 *   [ExternalReference] "[" ("readonly" (readonly?="true"|"false") ";")? formElements+=
 *   FormElement* ("actions" "[" (actions+=SimpleProcess ";")* "]")? ("processes" "[" (
 *   processes+=ProcessCall ";")* "]")? "]";
 *
 **/

// description=STRING? "ContentForm" name=ID "context" isCollection?="list"? contextRef=
// [ExternalReference] "[" ("readonly" (readonly?="true"|"false") ";")? formElements+=
// FormElement* ("actions" "[" (actions+=SimpleProcess ";")* "]")? ("processes" "[" (
// processes+=ProcessCall ";")* "]")? "]"
protected class ContentForm_Group extends GroupToken {
	
	public ContentForm_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_RightSquareBracketKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContentFormRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class ContentForm_DescriptionAssignment_0 extends AssignmentToken  {
	
	public ContentForm_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContentFormAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "ContentForm"
protected class ContentForm_ContentFormKeyword_1 extends KeywordToken  {
	
	public ContentForm_ContentFormKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getContentFormKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class ContentForm_NameAssignment_2 extends AssignmentToken  {
	
	public ContentForm_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ContentFormKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContentFormAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class ContentForm_ContextKeyword_3 extends KeywordToken  {
	
	public ContentForm_ContextKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getContextKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// isCollection?="list"?
protected class ContentForm_IsCollectionAssignment_4 extends AssignmentToken  {
	
	public ContentForm_IsCollectionAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getIsCollectionAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ContextKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isCollection",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isCollection");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getContentFormAccess().getIsCollectionListKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// contextRef=[ExternalReference]
protected class ContentForm_ContextRefAssignment_5 extends AssignmentToken  {
	
	public ContentForm_ContextRefAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getContextRefAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_IsCollectionAssignment_4(parent, this, 0, inst);
			case 1: return new ContentForm_ContextKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContentFormAccess().getContextRefExternalReferenceCrossReference_5_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getContentFormAccess().getContextRefExternalReferenceCrossReference_5_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "["
protected class ContentForm_LeftSquareBracketKeyword_6 extends KeywordToken  {
	
	public ContentForm_LeftSquareBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getLeftSquareBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ContextRefAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("readonly" (readonly?="true"|"false") ";")?
protected class ContentForm_Group_7 extends GroupToken {
	
	public ContentForm_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_SemicolonKeyword_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class ContentForm_ReadonlyKeyword_7_0 extends KeywordToken  {
	
	public ContentForm_ReadonlyKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getReadonlyKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_LeftSquareBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class ContentForm_Alternatives_7_1 extends AlternativesToken {

	public ContentForm_Alternatives_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getContentFormAccess().getAlternatives_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyAssignment_7_1_0(parent, this, 0, inst);
			case 1: return new ContentForm_FalseKeyword_7_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class ContentForm_ReadonlyAssignment_7_1_0 extends AssignmentToken  {
	
	public ContentForm_ReadonlyAssignment_7_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getReadonlyAssignment_7_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getContentFormAccess().getReadonlyTrueKeyword_7_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class ContentForm_FalseKeyword_7_1_1 extends KeywordToken  {
	
	public ContentForm_FalseKeyword_7_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getFalseKeyword_7_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class ContentForm_SemicolonKeyword_7_2 extends KeywordToken  {
	
	public ContentForm_SemicolonKeyword_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getSemicolonKeyword_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Alternatives_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// formElements+=FormElement*
protected class ContentForm_FormElementsAssignment_8 extends AssignmentToken  {
	
	public ContentForm_FormElementsAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getFormElementsAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("formElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("formElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContentFormAccess().getFormElementsFormElementParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContentForm_FormElementsAssignment_8(parent, next, actIndex, consumed);
			case 1: return new ContentForm_Group_7(parent, next, actIndex, consumed);
			case 2: return new ContentForm_LeftSquareBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("actions" "[" (actions+=SimpleProcess ";")* "]")?
protected class ContentForm_Group_9 extends GroupToken {
	
	public ContentForm_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_RightSquareBracketKeyword_9_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "actions"
protected class ContentForm_ActionsKeyword_9_0 extends KeywordToken  {
	
	public ContentForm_ActionsKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getActionsKeyword_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_FormElementsAssignment_8(parent, this, 0, inst);
			case 1: return new ContentForm_Group_7(parent, this, 1, inst);
			case 2: return new ContentForm_LeftSquareBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class ContentForm_LeftSquareBracketKeyword_9_1 extends KeywordToken  {
	
	public ContentForm_LeftSquareBracketKeyword_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getLeftSquareBracketKeyword_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ActionsKeyword_9_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (actions+=SimpleProcess ";")*
protected class ContentForm_Group_9_2 extends GroupToken {
	
	public ContentForm_Group_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_9_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_SemicolonKeyword_9_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// actions+=SimpleProcess
protected class ContentForm_ActionsAssignment_9_2_0 extends AssignmentToken  {
	
	public ContentForm_ActionsAssignment_9_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getActionsAssignment_9_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcess_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("actions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleProcessRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContentFormAccess().getActionsSimpleProcessParserRuleCall_9_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContentForm_Group_9_2(parent, next, actIndex, consumed);
			case 1: return new ContentForm_LeftSquareBracketKeyword_9_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ContentForm_SemicolonKeyword_9_2_1 extends KeywordToken  {
	
	public ContentForm_SemicolonKeyword_9_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getSemicolonKeyword_9_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ActionsAssignment_9_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class ContentForm_RightSquareBracketKeyword_9_3 extends KeywordToken  {
	
	public ContentForm_RightSquareBracketKeyword_9_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getRightSquareBracketKeyword_9_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_9_2(parent, this, 0, inst);
			case 1: return new ContentForm_LeftSquareBracketKeyword_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class ContentForm_Group_10 extends GroupToken {
	
	public ContentForm_Group_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_RightSquareBracketKeyword_10_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class ContentForm_ProcessesKeyword_10_0 extends KeywordToken  {
	
	public ContentForm_ProcessesKeyword_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getProcessesKeyword_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_9(parent, this, 0, inst);
			case 1: return new ContentForm_FormElementsAssignment_8(parent, this, 1, inst);
			case 2: return new ContentForm_Group_7(parent, this, 2, inst);
			case 3: return new ContentForm_LeftSquareBracketKeyword_6(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class ContentForm_LeftSquareBracketKeyword_10_1 extends KeywordToken  {
	
	public ContentForm_LeftSquareBracketKeyword_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getLeftSquareBracketKeyword_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ProcessesKeyword_10_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processes+=ProcessCall ";")*
protected class ContentForm_Group_10_2 extends GroupToken {
	
	public ContentForm_Group_10_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_10_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_SemicolonKeyword_10_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall
protected class ContentForm_ProcessesAssignment_10_2_0 extends AssignmentToken  {
	
	public ContentForm_ProcessesAssignment_10_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getProcessesAssignment_10_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContentFormAccess().getProcessesProcessCallParserRuleCall_10_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContentForm_Group_10_2(parent, next, actIndex, consumed);
			case 1: return new ContentForm_LeftSquareBracketKeyword_10_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ContentForm_SemicolonKeyword_10_2_1 extends KeywordToken  {
	
	public ContentForm_SemicolonKeyword_10_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getSemicolonKeyword_10_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ProcessesAssignment_10_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class ContentForm_RightSquareBracketKeyword_10_3 extends KeywordToken  {
	
	public ContentForm_RightSquareBracketKeyword_10_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getRightSquareBracketKeyword_10_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_10_2(parent, this, 0, inst);
			case 1: return new ContentForm_LeftSquareBracketKeyword_10_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class ContentForm_RightSquareBracketKeyword_11 extends KeywordToken  {
	
	public ContentForm_RightSquareBracketKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getRightSquareBracketKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_10(parent, this, 0, inst);
			case 1: return new ContentForm_Group_9(parent, this, 1, inst);
			case 2: return new ContentForm_FormElementsAssignment_8(parent, this, 2, inst);
			case 3: return new ContentForm_Group_7(parent, this, 3, inst);
			case 4: return new ContentForm_LeftSquareBracketKeyword_6(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ContentForm ****************/


/************ begin Rule SimpleProcess ****************
 *
 * SimpleProcess:
 *   name=ID type=ProcessType? ("use" dialogue=DialogueCall)?;
 *
 **/

// name=ID type=ProcessType? ("use" dialogue=DialogueCall)?
protected class SimpleProcess_Group extends GroupToken {
	
	public SimpleProcess_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleProcessAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcess_Group_2(parent, this, 0, inst);
			case 1: return new SimpleProcess_TypeAssignment_1(parent, this, 1, inst);
			case 2: return new SimpleProcess_NameAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleProcessRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class SimpleProcess_NameAssignment_0 extends AssignmentToken  {
	
	public SimpleProcess_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleProcessAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleProcessAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// type=ProcessType?
protected class SimpleProcess_TypeAssignment_1 extends AssignmentToken  {
	
	public SimpleProcess_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleProcessAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcess_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSimpleProcessAccess().getTypeProcessTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("use" dialogue=DialogueCall)?
protected class SimpleProcess_Group_2 extends GroupToken {
	
	public SimpleProcess_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleProcessAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcess_DialogueAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "use"
protected class SimpleProcess_UseKeyword_2_0 extends KeywordToken  {
	
	public SimpleProcess_UseKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleProcessAccess().getUseKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcess_TypeAssignment_1(parent, this, 0, inst);
			case 1: return new SimpleProcess_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// dialogue=DialogueCall
protected class SimpleProcess_DialogueAssignment_2_1 extends AssignmentToken  {
	
	public SimpleProcess_DialogueAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleProcessAccess().getDialogueAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dialogue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dialogue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSimpleProcessAccess().getDialogueDialogueCallParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleProcess_UseKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SimpleProcess ****************/


/************ begin Rule CompoundDialogue ****************
 *
 * CompoundDialogue:
 *   description=STRING? "CompoundDialogue" name=ID "context" contextRef=[
 *   ExternalReference] ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (
 *   dialogues+=DialogueCall ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")
 *   ?|CollectionDialogue|MasterDetail;
 *
 **/

// description=STRING? "CompoundDialogue" name=ID "context" contextRef=[
// ExternalReference] ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (
// dialogues+=DialogueCall ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")
// ?|CollectionDialogue|MasterDetail
protected class CompoundDialogue_Alternatives extends AlternativesToken {

	public CompoundDialogue_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0(parent, this, 0, inst);
			case 1: return new CompoundDialogue_CollectionDialogueParserRuleCall_1(parent, this, 1, inst);
			case 2: return new CompoundDialogue_MasterDetailParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING? "CompoundDialogue" name=ID "context" contextRef=[
// ExternalReference] ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (
// dialogues+=DialogueCall ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")
// ?
protected class CompoundDialogue_Group_0 extends GroupToken {
	
	public CompoundDialogue_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_7(parent, this, 0, inst);
			case 1: return new CompoundDialogue_Group_0_6(parent, this, 1, inst);
			case 2: return new CompoundDialogue_Group_0_5(parent, this, 2, inst);
			case 3: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING?
protected class CompoundDialogue_DescriptionAssignment_0_0 extends AssignmentToken  {
	
	public CompoundDialogue_DescriptionAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDescriptionAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCompoundDialogueAccess().getDescriptionSTRINGTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "CompoundDialogue"
protected class CompoundDialogue_CompoundDialogueKeyword_0_1 extends KeywordToken  {
	
	public CompoundDialogue_CompoundDialogueKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getCompoundDialogueKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DescriptionAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class CompoundDialogue_NameAssignment_0_2 extends AssignmentToken  {
	
	public CompoundDialogue_NameAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getNameAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_CompoundDialogueKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCompoundDialogueAccess().getNameIDTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class CompoundDialogue_ContextKeyword_0_3 extends KeywordToken  {
	
	public CompoundDialogue_ContextKeyword_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getContextKeyword_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_NameAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class CompoundDialogue_ContextRefAssignment_0_4 extends AssignmentToken  {
	
	public CompoundDialogue_ContextRefAssignment_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getContextRefAssignment_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ContextKeyword_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundDialogueAccess().getContextRefExternalReferenceCrossReference_0_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getCompoundDialogueAccess().getContextRefExternalReferenceCrossReference_0_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false") ";")?
protected class CompoundDialogue_Group_0_5 extends GroupToken {
	
	public CompoundDialogue_Group_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_SemicolonKeyword_0_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class CompoundDialogue_ReadonlyKeyword_0_5_0 extends KeywordToken  {
	
	public CompoundDialogue_ReadonlyKeyword_0_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getReadonlyKeyword_0_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class CompoundDialogue_Alternatives_0_5_1 extends AlternativesToken {

	public CompoundDialogue_Alternatives_0_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getAlternatives_0_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyAssignment_0_5_1_0(parent, this, 0, inst);
			case 1: return new CompoundDialogue_FalseKeyword_0_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class CompoundDialogue_ReadonlyAssignment_0_5_1_0 extends AssignmentToken  {
	
	public CompoundDialogue_ReadonlyAssignment_0_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getReadonlyAssignment_0_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyKeyword_0_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getCompoundDialogueAccess().getReadonlyTrueKeyword_0_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class CompoundDialogue_FalseKeyword_0_5_1_1 extends KeywordToken  {
	
	public CompoundDialogue_FalseKeyword_0_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getFalseKeyword_0_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyKeyword_0_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class CompoundDialogue_SemicolonKeyword_0_5_2 extends KeywordToken  {
	
	public CompoundDialogue_SemicolonKeyword_0_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getSemicolonKeyword_0_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Alternatives_0_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("dialogues" "[" (dialogues+=DialogueCall ";")* "]")?
protected class CompoundDialogue_Group_0_6 extends GroupToken {
	
	public CompoundDialogue_Group_0_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_RightSquareBracketKeyword_0_6_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "dialogues"
protected class CompoundDialogue_DialoguesKeyword_0_6_0 extends KeywordToken  {
	
	public CompoundDialogue_DialoguesKeyword_0_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDialoguesKeyword_0_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_5(parent, this, 0, inst);
			case 1: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CompoundDialogue_LeftSquareBracketKeyword_0_6_1 extends KeywordToken  {
	
	public CompoundDialogue_LeftSquareBracketKeyword_0_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getLeftSquareBracketKeyword_0_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DialoguesKeyword_0_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (dialogues+=DialogueCall ";")*
protected class CompoundDialogue_Group_0_6_2 extends GroupToken {
	
	public CompoundDialogue_Group_0_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_SemicolonKeyword_0_6_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dialogues+=DialogueCall
protected class CompoundDialogue_DialoguesAssignment_0_6_2_0 extends AssignmentToken  {
	
	public CompoundDialogue_DialoguesAssignment_0_6_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDialoguesAssignment_0_6_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dialogues",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dialogues");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundDialogueAccess().getDialoguesDialogueCallParserRuleCall_0_6_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_6_2(parent, next, actIndex, consumed);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CompoundDialogue_SemicolonKeyword_0_6_2_1 extends KeywordToken  {
	
	public CompoundDialogue_SemicolonKeyword_0_6_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getSemicolonKeyword_0_6_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DialoguesAssignment_0_6_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CompoundDialogue_RightSquareBracketKeyword_0_6_3 extends KeywordToken  {
	
	public CompoundDialogue_RightSquareBracketKeyword_0_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getRightSquareBracketKeyword_0_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_6_2(parent, this, 0, inst);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class CompoundDialogue_Group_0_7 extends GroupToken {
	
	public CompoundDialogue_Group_0_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_RightSquareBracketKeyword_0_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class CompoundDialogue_ProcessesKeyword_0_7_0 extends KeywordToken  {
	
	public CompoundDialogue_ProcessesKeyword_0_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getProcessesKeyword_0_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_6(parent, this, 0, inst);
			case 1: return new CompoundDialogue_Group_0_5(parent, this, 1, inst);
			case 2: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CompoundDialogue_LeftSquareBracketKeyword_0_7_1 extends KeywordToken  {
	
	public CompoundDialogue_LeftSquareBracketKeyword_0_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getLeftSquareBracketKeyword_0_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ProcessesKeyword_0_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processes+=ProcessCall ";")*
protected class CompoundDialogue_Group_0_7_2 extends GroupToken {
	
	public CompoundDialogue_Group_0_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_SemicolonKeyword_0_7_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall
protected class CompoundDialogue_ProcessesAssignment_0_7_2_0 extends AssignmentToken  {
	
	public CompoundDialogue_ProcessesAssignment_0_7_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getProcessesAssignment_0_7_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundDialogueAccess().getProcessesProcessCallParserRuleCall_0_7_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_7_2(parent, next, actIndex, consumed);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CompoundDialogue_SemicolonKeyword_0_7_2_1 extends KeywordToken  {
	
	public CompoundDialogue_SemicolonKeyword_0_7_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getSemicolonKeyword_0_7_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ProcessesAssignment_0_7_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CompoundDialogue_RightSquareBracketKeyword_0_7_3 extends KeywordToken  {
	
	public CompoundDialogue_RightSquareBracketKeyword_0_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getRightSquareBracketKeyword_0_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_7_2(parent, this, 0, inst);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_7_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// CollectionDialogue
protected class CompoundDialogue_CollectionDialogueParserRuleCall_1 extends RuleCallToken {
	
	public CompoundDialogue_CollectionDialogueParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getCollectionDialogueParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CollectionDialogue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCollectionDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// MasterDetail
protected class CompoundDialogue_MasterDetailParserRuleCall_2 extends RuleCallToken {
	
	public CompoundDialogue_MasterDetailParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getMasterDetailParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MasterDetail_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMasterDetailRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule CompoundDialogue ****************/


/************ begin Rule CollectionDialogue ****************
 *
 * CollectionDialogue:
 *   description=STRING? "CollectionDialogue" name=ID "context" contextRef=[
 *   ExternalReference] "[" ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (
 *   dialogues+=DialogueCall ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")
 *   ? "]";
 *
 **/

// description=STRING? "CollectionDialogue" name=ID "context" contextRef=[
// ExternalReference] "[" ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (
// dialogues+=DialogueCall ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")
// ? "]"
protected class CollectionDialogue_Group extends GroupToken {
	
	public CollectionDialogue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_RightSquareBracketKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCollectionDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class CollectionDialogue_DescriptionAssignment_0 extends AssignmentToken  {
	
	public CollectionDialogue_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCollectionDialogueAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "CollectionDialogue"
protected class CollectionDialogue_CollectionDialogueKeyword_1 extends KeywordToken  {
	
	public CollectionDialogue_CollectionDialogueKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getCollectionDialogueKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class CollectionDialogue_NameAssignment_2 extends AssignmentToken  {
	
	public CollectionDialogue_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_CollectionDialogueKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCollectionDialogueAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class CollectionDialogue_ContextKeyword_3 extends KeywordToken  {
	
	public CollectionDialogue_ContextKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getContextKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class CollectionDialogue_ContextRefAssignment_4 extends AssignmentToken  {
	
	public CollectionDialogue_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ContextKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCollectionDialogueAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getCollectionDialogueAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "["
protected class CollectionDialogue_LeftSquareBracketKeyword_5 extends KeywordToken  {
	
	public CollectionDialogue_LeftSquareBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getLeftSquareBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("readonly" (readonly?="true"|"false") ";")?
protected class CollectionDialogue_Group_6 extends GroupToken {
	
	public CollectionDialogue_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_SemicolonKeyword_6_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class CollectionDialogue_ReadonlyKeyword_6_0 extends KeywordToken  {
	
	public CollectionDialogue_ReadonlyKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getReadonlyKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_LeftSquareBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class CollectionDialogue_Alternatives_6_1 extends AlternativesToken {

	public CollectionDialogue_Alternatives_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getAlternatives_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyAssignment_6_1_0(parent, this, 0, inst);
			case 1: return new CollectionDialogue_FalseKeyword_6_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class CollectionDialogue_ReadonlyAssignment_6_1_0 extends AssignmentToken  {
	
	public CollectionDialogue_ReadonlyAssignment_6_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getReadonlyAssignment_6_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getCollectionDialogueAccess().getReadonlyTrueKeyword_6_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class CollectionDialogue_FalseKeyword_6_1_1 extends KeywordToken  {
	
	public CollectionDialogue_FalseKeyword_6_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getFalseKeyword_6_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class CollectionDialogue_SemicolonKeyword_6_2 extends KeywordToken  {
	
	public CollectionDialogue_SemicolonKeyword_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getSemicolonKeyword_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Alternatives_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("dialogues" "[" (dialogues+=DialogueCall ";")* "]")?
protected class CollectionDialogue_Group_7 extends GroupToken {
	
	public CollectionDialogue_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_RightSquareBracketKeyword_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "dialogues"
protected class CollectionDialogue_DialoguesKeyword_7_0 extends KeywordToken  {
	
	public CollectionDialogue_DialoguesKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDialoguesKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_6(parent, this, 0, inst);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CollectionDialogue_LeftSquareBracketKeyword_7_1 extends KeywordToken  {
	
	public CollectionDialogue_LeftSquareBracketKeyword_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getLeftSquareBracketKeyword_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DialoguesKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (dialogues+=DialogueCall ";")*
protected class CollectionDialogue_Group_7_2 extends GroupToken {
	
	public CollectionDialogue_Group_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_SemicolonKeyword_7_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dialogues+=DialogueCall
protected class CollectionDialogue_DialoguesAssignment_7_2_0 extends AssignmentToken  {
	
	public CollectionDialogue_DialoguesAssignment_7_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDialoguesAssignment_7_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dialogues",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dialogues");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCollectionDialogueAccess().getDialoguesDialogueCallParserRuleCall_7_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectionDialogue_Group_7_2(parent, next, actIndex, consumed);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CollectionDialogue_SemicolonKeyword_7_2_1 extends KeywordToken  {
	
	public CollectionDialogue_SemicolonKeyword_7_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getSemicolonKeyword_7_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DialoguesAssignment_7_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CollectionDialogue_RightSquareBracketKeyword_7_3 extends KeywordToken  {
	
	public CollectionDialogue_RightSquareBracketKeyword_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getRightSquareBracketKeyword_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_7_2(parent, this, 0, inst);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_7_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class CollectionDialogue_Group_8 extends GroupToken {
	
	public CollectionDialogue_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_RightSquareBracketKeyword_8_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class CollectionDialogue_ProcessesKeyword_8_0 extends KeywordToken  {
	
	public CollectionDialogue_ProcessesKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getProcessesKeyword_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_7(parent, this, 0, inst);
			case 1: return new CollectionDialogue_Group_6(parent, this, 1, inst);
			case 2: return new CollectionDialogue_LeftSquareBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CollectionDialogue_LeftSquareBracketKeyword_8_1 extends KeywordToken  {
	
	public CollectionDialogue_LeftSquareBracketKeyword_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getLeftSquareBracketKeyword_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ProcessesKeyword_8_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processes+=ProcessCall ";")*
protected class CollectionDialogue_Group_8_2 extends GroupToken {
	
	public CollectionDialogue_Group_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_8_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_SemicolonKeyword_8_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall
protected class CollectionDialogue_ProcessesAssignment_8_2_0 extends AssignmentToken  {
	
	public CollectionDialogue_ProcessesAssignment_8_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getProcessesAssignment_8_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCollectionDialogueAccess().getProcessesProcessCallParserRuleCall_8_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectionDialogue_Group_8_2(parent, next, actIndex, consumed);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_8_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CollectionDialogue_SemicolonKeyword_8_2_1 extends KeywordToken  {
	
	public CollectionDialogue_SemicolonKeyword_8_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getSemicolonKeyword_8_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ProcessesAssignment_8_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CollectionDialogue_RightSquareBracketKeyword_8_3 extends KeywordToken  {
	
	public CollectionDialogue_RightSquareBracketKeyword_8_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getRightSquareBracketKeyword_8_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_8_2(parent, this, 0, inst);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_8_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CollectionDialogue_RightSquareBracketKeyword_9 extends KeywordToken  {
	
	public CollectionDialogue_RightSquareBracketKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getRightSquareBracketKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_8(parent, this, 0, inst);
			case 1: return new CollectionDialogue_Group_7(parent, this, 1, inst);
			case 2: return new CollectionDialogue_Group_6(parent, this, 2, inst);
			case 3: return new CollectionDialogue_LeftSquareBracketKeyword_5(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CollectionDialogue ****************/


/************ begin Rule MasterDetail ****************
 *
 * MasterDetail:
 *   description=STRING? "MasterDetail" name=ID "context" contextRef=[ExternalReference] (
 *   "readonly" (readonly?="true"|"false") ";")? "master" master=DialogueCall ";" "detail"
 *   detail=DialogueCall ";" ("processes" "[" (processes+=ProcessCall ";")* "]")?;
 *
 **/

// description=STRING? "MasterDetail" name=ID "context" contextRef=[ExternalReference] (
// "readonly" (readonly?="true"|"false") ";")? "master" master=DialogueCall ";" "detail"
// detail=DialogueCall ";" ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class MasterDetail_Group extends GroupToken {
	
	public MasterDetail_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group_12(parent, this, 0, inst);
			case 1: return new MasterDetail_SemicolonKeyword_11(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMasterDetailRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class MasterDetail_DescriptionAssignment_0 extends AssignmentToken  {
	
	public MasterDetail_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMasterDetailAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "MasterDetail"
protected class MasterDetail_MasterDetailKeyword_1 extends KeywordToken  {
	
	public MasterDetail_MasterDetailKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterDetailKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class MasterDetail_NameAssignment_2 extends AssignmentToken  {
	
	public MasterDetail_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_MasterDetailKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMasterDetailAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class MasterDetail_ContextKeyword_3 extends KeywordToken  {
	
	public MasterDetail_ContextKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getContextKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class MasterDetail_ContextRefAssignment_4 extends AssignmentToken  {
	
	public MasterDetail_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ContextKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMasterDetailAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getMasterDetailAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false") ";")?
protected class MasterDetail_Group_5 extends GroupToken {
	
	public MasterDetail_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class MasterDetail_ReadonlyKeyword_5_0 extends KeywordToken  {
	
	public MasterDetail_ReadonlyKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getReadonlyKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class MasterDetail_Alternatives_5_1 extends AlternativesToken {

	public MasterDetail_Alternatives_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getAlternatives_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyAssignment_5_1_0(parent, this, 0, inst);
			case 1: return new MasterDetail_FalseKeyword_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class MasterDetail_ReadonlyAssignment_5_1_0 extends AssignmentToken  {
	
	public MasterDetail_ReadonlyAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getReadonlyAssignment_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMasterDetailAccess().getReadonlyTrueKeyword_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class MasterDetail_FalseKeyword_5_1_1 extends KeywordToken  {
	
	public MasterDetail_FalseKeyword_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getFalseKeyword_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class MasterDetail_SemicolonKeyword_5_2 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Alternatives_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "master"
protected class MasterDetail_MasterKeyword_6 extends KeywordToken  {
	
	public MasterDetail_MasterKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group_5(parent, this, 0, inst);
			case 1: return new MasterDetail_ContextRefAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// master=DialogueCall
protected class MasterDetail_MasterAssignment_7 extends AssignmentToken  {
	
	public MasterDetail_MasterAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("master",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("master");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getMasterDialogueCallParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_MasterKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MasterDetail_SemicolonKeyword_8 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_MasterAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "detail"
protected class MasterDetail_DetailKeyword_9 extends KeywordToken  {
	
	public MasterDetail_DetailKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDetailKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// detail=DialogueCall
protected class MasterDetail_DetailAssignment_10 extends AssignmentToken  {
	
	public MasterDetail_DetailAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDetailAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("detail",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("detail");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getDetailDialogueCallParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_DetailKeyword_9(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MasterDetail_SemicolonKeyword_11 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_DetailAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class MasterDetail_Group_12 extends GroupToken {
	
	public MasterDetail_Group_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_RightSquareBracketKeyword_12_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class MasterDetail_ProcessesKeyword_12_0 extends KeywordToken  {
	
	public MasterDetail_ProcessesKeyword_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getProcessesKeyword_12_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class MasterDetail_LeftSquareBracketKeyword_12_1 extends KeywordToken  {
	
	public MasterDetail_LeftSquareBracketKeyword_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getLeftSquareBracketKeyword_12_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ProcessesKeyword_12_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processes+=ProcessCall ";")*
protected class MasterDetail_Group_12_2 extends GroupToken {
	
	public MasterDetail_Group_12_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup_12_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_12_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall
protected class MasterDetail_ProcessesAssignment_12_2_0 extends AssignmentToken  {
	
	public MasterDetail_ProcessesAssignment_12_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getProcessesAssignment_12_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getProcessesProcessCallParserRuleCall_12_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_Group_12_2(parent, next, actIndex, consumed);
			case 1: return new MasterDetail_LeftSquareBracketKeyword_12_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MasterDetail_SemicolonKeyword_12_2_1 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_12_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_12_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ProcessesAssignment_12_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class MasterDetail_RightSquareBracketKeyword_12_3 extends KeywordToken  {
	
	public MasterDetail_RightSquareBracketKeyword_12_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getRightSquareBracketKeyword_12_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group_12_2(parent, this, 0, inst);
			case 1: return new MasterDetail_LeftSquareBracketKeyword_12_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule MasterDetail ****************/


/************ begin Rule Process ****************
 *
 * Process:
 *   AutomatedProcess|InteractiveProcess;
 *
 **/

// AutomatedProcess|InteractiveProcess
protected class Process_Alternatives extends AlternativesToken {

	public Process_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_AutomatedProcessParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Process_InteractiveProcessParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcessRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AutomatedProcess
protected class Process_AutomatedProcessParserRuleCall_0 extends RuleCallToken {
	
	public Process_AutomatedProcessParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessAccess().getAutomatedProcessParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AutomatedProcess_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAutomatedProcessRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// InteractiveProcess
protected class Process_InteractiveProcessParserRuleCall_1 extends RuleCallToken {
	
	public Process_InteractiveProcessParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessAccess().getInteractiveProcessParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InteractiveProcess_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInteractiveProcessRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Process ****************/


/************ begin Rule AutomatedProcess ****************
 *
 * AutomatedProcess:
 *   description=STRING? "AutomatedProcess" name=ID "context" contextRef=[
 *   ExternalReference] type=ProcessType? ("steps" "[" (processElements+=UICall ";")* "]")?
 * ;
 *
 **/

// description=STRING? "AutomatedProcess" name=ID "context" contextRef=[
// ExternalReference] type=ProcessType? ("steps" "[" (processElements+=UICall ";")* "]")?
protected class AutomatedProcess_Group extends GroupToken {
	
	public AutomatedProcess_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_Group_6(parent, this, 0, inst);
			case 1: return new AutomatedProcess_TypeAssignment_5(parent, this, 1, inst);
			case 2: return new AutomatedProcess_ContextRefAssignment_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAutomatedProcessRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class AutomatedProcess_DescriptionAssignment_0 extends AssignmentToken  {
	
	public AutomatedProcess_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAutomatedProcessAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "AutomatedProcess"
protected class AutomatedProcess_AutomatedProcessKeyword_1 extends KeywordToken  {
	
	public AutomatedProcess_AutomatedProcessKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getAutomatedProcessKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class AutomatedProcess_NameAssignment_2 extends AssignmentToken  {
	
	public AutomatedProcess_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_AutomatedProcessKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAutomatedProcessAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class AutomatedProcess_ContextKeyword_3 extends KeywordToken  {
	
	public AutomatedProcess_ContextKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getContextKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class AutomatedProcess_ContextRefAssignment_4 extends AssignmentToken  {
	
	public AutomatedProcess_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_ContextKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutomatedProcessAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAutomatedProcessAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// type=ProcessType?
protected class AutomatedProcess_TypeAssignment_5 extends AssignmentToken  {
	
	public AutomatedProcess_TypeAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getTypeAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getAutomatedProcessAccess().getTypeProcessTypeEnumRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ("steps" "[" (processElements+=UICall ";")* "]")?
protected class AutomatedProcess_Group_6 extends GroupToken {
	
	public AutomatedProcess_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_RightSquareBracketKeyword_6_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "steps"
protected class AutomatedProcess_StepsKeyword_6_0 extends KeywordToken  {
	
	public AutomatedProcess_StepsKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getStepsKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_TypeAssignment_5(parent, this, 0, inst);
			case 1: return new AutomatedProcess_ContextRefAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class AutomatedProcess_LeftSquareBracketKeyword_6_1 extends KeywordToken  {
	
	public AutomatedProcess_LeftSquareBracketKeyword_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getLeftSquareBracketKeyword_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_StepsKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processElements+=UICall ";")*
protected class AutomatedProcess_Group_6_2 extends GroupToken {
	
	public AutomatedProcess_Group_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getGroup_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_SemicolonKeyword_6_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processElements+=UICall
protected class AutomatedProcess_ProcessElementsAssignment_6_2_0 extends AssignmentToken  {
	
	public AutomatedProcess_ProcessElementsAssignment_6_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getProcessElementsAssignment_6_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UICall_UIModelElementCallParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUICallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAutomatedProcessAccess().getProcessElementsUICallParserRuleCall_6_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AutomatedProcess_Group_6_2(parent, next, actIndex, consumed);
			case 1: return new AutomatedProcess_LeftSquareBracketKeyword_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class AutomatedProcess_SemicolonKeyword_6_2_1 extends KeywordToken  {
	
	public AutomatedProcess_SemicolonKeyword_6_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getSemicolonKeyword_6_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_ProcessElementsAssignment_6_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class AutomatedProcess_RightSquareBracketKeyword_6_3 extends KeywordToken  {
	
	public AutomatedProcess_RightSquareBracketKeyword_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatedProcessAccess().getRightSquareBracketKeyword_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AutomatedProcess_Group_6_2(parent, this, 0, inst);
			case 1: return new AutomatedProcess_LeftSquareBracketKeyword_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule AutomatedProcess ****************/


/************ begin Rule InteractiveProcess ****************
 *
 * InteractiveProcess:
 *   description=STRING? "InteractiveProcess" name=ID "context" contextRef=[
 *   ExternalReference] type=ProcessType? ("step" "[" (processElements+=DialogueCall ";")
 *   "]"); 
 * 
 *   
 * 	  
 * 	              
 * 	
 * //	("steps" "[" (processElements += UICall ";")* "]")?
 *
 **/

// description=STRING? "InteractiveProcess" name=ID "context" contextRef=[
// ExternalReference] type=ProcessType? ("step" "[" (processElements+=DialogueCall ";")
// "]") 
// 	  
// 	              
// 	
// //	("steps" "[" (processElements += UICall ";")* "]")?
protected class InteractiveProcess_Group extends GroupToken {
	
	public InteractiveProcess_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_Group_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInteractiveProcessRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class InteractiveProcess_DescriptionAssignment_0 extends AssignmentToken  {
	
	public InteractiveProcess_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInteractiveProcessAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "InteractiveProcess"
protected class InteractiveProcess_InteractiveProcessKeyword_1 extends KeywordToken  {
	
	public InteractiveProcess_InteractiveProcessKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getInteractiveProcessKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class InteractiveProcess_NameAssignment_2 extends AssignmentToken  {
	
	public InteractiveProcess_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_InteractiveProcessKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInteractiveProcessAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class InteractiveProcess_ContextKeyword_3 extends KeywordToken  {
	
	public InteractiveProcess_ContextKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getContextKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[ExternalReference]
protected class InteractiveProcess_ContextRefAssignment_4 extends AssignmentToken  {
	
	public InteractiveProcess_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_ContextKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInteractiveProcessAccess().getContextRefExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getInteractiveProcessAccess().getContextRefExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// type=ProcessType?
protected class InteractiveProcess_TypeAssignment_5 extends AssignmentToken  {
	
	public InteractiveProcess_TypeAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getTypeAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getInteractiveProcessAccess().getTypeProcessTypeEnumRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "step" "[" (processElements+=DialogueCall ";") "]"
protected class InteractiveProcess_Group_6 extends GroupToken {
	
	public InteractiveProcess_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_RightSquareBracketKeyword_6_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "step"
protected class InteractiveProcess_StepKeyword_6_0 extends KeywordToken  {
	
	public InteractiveProcess_StepKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getStepKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_TypeAssignment_5(parent, this, 0, inst);
			case 1: return new InteractiveProcess_ContextRefAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class InteractiveProcess_LeftSquareBracketKeyword_6_1 extends KeywordToken  {
	
	public InteractiveProcess_LeftSquareBracketKeyword_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getLeftSquareBracketKeyword_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_StepKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processElements+=DialogueCall ";"
protected class InteractiveProcess_Group_6_2 extends GroupToken {
	
	public InteractiveProcess_Group_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getGroup_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_SemicolonKeyword_6_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processElements+=DialogueCall
protected class InteractiveProcess_ProcessElementsAssignment_6_2_0 extends AssignmentToken  {
	
	public InteractiveProcess_ProcessElementsAssignment_6_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getProcessElementsAssignment_6_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processElements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInteractiveProcessAccess().getProcessElementsDialogueCallParserRuleCall_6_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InteractiveProcess_LeftSquareBracketKeyword_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class InteractiveProcess_SemicolonKeyword_6_2_1 extends KeywordToken  {
	
	public InteractiveProcess_SemicolonKeyword_6_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getSemicolonKeyword_6_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_ProcessElementsAssignment_6_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class InteractiveProcess_RightSquareBracketKeyword_6_3 extends KeywordToken  {
	
	public InteractiveProcess_RightSquareBracketKeyword_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInteractiveProcessAccess().getRightSquareBracketKeyword_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InteractiveProcess_Group_6_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule InteractiveProcess ****************/


/************ begin Rule FormElement ****************
 *
 * FormElement:
 *   description=STRING? "element" references=DtoPropertyReference "label" label=ID (
 *   "readonly" (readonly?="true"|"false"))? ";"; 
 * 	
 *   
 * 	  
 * 	 
 * //	("navigate" LinkRef "to")?
 *
 **/

// description=STRING? "element" references=DtoPropertyReference "label" label=ID (
// "readonly" (readonly?="true"|"false"))? ";" 
// 	  
// 	 
// //	("navigate" LinkRef "to")?
protected class FormElement_Group extends GroupToken {
	
	public FormElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_SemicolonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFormElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class FormElement_DescriptionAssignment_0 extends AssignmentToken  {
	
	public FormElement_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormElementAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "element" 
// 	 
// //	("navigate" LinkRef "to")?
protected class FormElement_ElementKeyword_1 extends KeywordToken  {
	
	public FormElement_ElementKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getElementKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// references=DtoPropertyReference  
// //	("navigate" LinkRef "to")?
protected class FormElement_ReferencesAssignment_2 extends AssignmentToken  {
	
	public FormElement_ReferencesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReferencesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoPropertyReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDtoPropertyReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormElementAccess().getReferencesDtoPropertyReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormElement_ElementKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "label"
protected class FormElement_LabelKeyword_3 extends KeywordToken  {
	
	public FormElement_LabelKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getLabelKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReferencesAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=ID
protected class FormElement_LabelAssignment_4 extends AssignmentToken  {
	
	public FormElement_LabelAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getLabelAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_LabelKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormElementAccess().getLabelIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false"))?
protected class FormElement_Group_5 extends GroupToken {
	
	public FormElement_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Alternatives_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class FormElement_ReadonlyKeyword_5_0 extends KeywordToken  {
	
	public FormElement_ReadonlyKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReadonlyKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_LabelAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class FormElement_Alternatives_5_1 extends AlternativesToken {

	public FormElement_Alternatives_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getFormElementAccess().getAlternatives_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyAssignment_5_1_0(parent, this, 0, inst);
			case 1: return new FormElement_FalseKeyword_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class FormElement_ReadonlyAssignment_5_1_0 extends AssignmentToken  {
	
	public FormElement_ReadonlyAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReadonlyAssignment_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFormElementAccess().getReadonlyTrueKeyword_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class FormElement_FalseKeyword_5_1_1 extends KeywordToken  {
	
	public FormElement_FalseKeyword_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getFalseKeyword_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// ";"
protected class FormElement_SemicolonKeyword_6 extends KeywordToken  {
	
	public FormElement_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getSemicolonKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group_5(parent, this, 0, inst);
			case 1: return new FormElement_LabelAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FormElement ****************/


/************ begin Rule DialogueCall ****************
 *
 * DialogueCall:
 *   (context=Expression "to")? name=ID ("alias" alias=ID)?;
 *
 **/

// (context=Expression "to")? name=ID ("alias" alias=ID)?
protected class DialogueCall_Group extends GroupToken {
	
	public DialogueCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group_2(parent, this, 0, inst);
			case 1: return new DialogueCall_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (context=Expression "to")?
protected class DialogueCall_Group_0 extends GroupToken {
	
	public DialogueCall_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_ToKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// context=Expression
protected class DialogueCall_ContextAssignment_0_0 extends AssignmentToken  {
	
	public DialogueCall_ContextAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getContextAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("context",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("context");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDialogueCallAccess().getContextExpressionParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "to"
protected class DialogueCall_ToKeyword_0_1 extends KeywordToken  {
	
	public DialogueCall_ToKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getToKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_ContextAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// name=ID
protected class DialogueCall_NameAssignment_1 extends AssignmentToken  {
	
	public DialogueCall_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDialogueCallAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("alias" alias=ID)?
protected class DialogueCall_Group_2 extends GroupToken {
	
	public DialogueCall_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_AliasAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "alias"
protected class DialogueCall_AliasKeyword_2_0 extends KeywordToken  {
	
	public DialogueCall_AliasKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getAliasKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class DialogueCall_AliasAssignment_2_1 extends AssignmentToken  {
	
	public DialogueCall_AliasAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getAliasAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_AliasKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDialogueCallAccess().getAliasIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule DialogueCall ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 *   ServiceExpression|NavigationExpression;
 *
 **/

// ServiceExpression|NavigationExpression
protected class Expression_Alternatives extends AlternativesToken {

	public Expression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ServiceExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Expression_NavigationExpressionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ServiceExpression
protected class Expression_ServiceExpressionParserRuleCall_0 extends RuleCallToken {
	
	public Expression_ServiceExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getServiceExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ServiceExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getServiceExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NavigationExpression
protected class Expression_NavigationExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Expression_NavigationExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getNavigationExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NavigationExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNavigationExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression ****************/


/************ begin Rule ProcessCall ****************
 *
 * ProcessCall:
 *   (context=Expression "to")? name=ID ("alias" alias=ID)?;
 *
 **/

// (context=Expression "to")? name=ID ("alias" alias=ID)?
protected class ProcessCall_Group extends GroupToken {
	
	public ProcessCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group_2(parent, this, 0, inst);
			case 1: return new ProcessCall_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (context=Expression "to")?
protected class ProcessCall_Group_0 extends GroupToken {
	
	public ProcessCall_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_ToKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// context=Expression
protected class ProcessCall_ContextAssignment_0_0 extends AssignmentToken  {
	
	public ProcessCall_ContextAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getContextAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("context",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("context");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProcessCallAccess().getContextExpressionParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "to"
protected class ProcessCall_ToKeyword_0_1 extends KeywordToken  {
	
	public ProcessCall_ToKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getToKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_ContextAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// name=ID
protected class ProcessCall_NameAssignment_1 extends AssignmentToken  {
	
	public ProcessCall_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessCallAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("alias" alias=ID)?
protected class ProcessCall_Group_2 extends GroupToken {
	
	public ProcessCall_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_AliasAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "alias"
protected class ProcessCall_AliasKeyword_2_0 extends KeywordToken  {
	
	public ProcessCall_AliasKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getAliasKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class ProcessCall_AliasAssignment_2_1 extends AssignmentToken  {
	
	public ProcessCall_AliasAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getAliasAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_AliasKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessCallAccess().getAliasIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule ProcessCall ****************/


/************ begin Rule ServiceExpression ****************
 *
 * ServiceExpression:
 *   "call" serviceName=ID "." serviceMethod=ID;
 *
 **/

// "call" serviceName=ID "." serviceMethod=ID
protected class ServiceExpression_Group extends GroupToken {
	
	public ServiceExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_ServiceMethodAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getServiceExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "call"
protected class ServiceExpression_CallKeyword_0 extends KeywordToken  {
	
	public ServiceExpression_CallKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getCallKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// serviceName=ID
protected class ServiceExpression_ServiceNameAssignment_1 extends AssignmentToken  {
	
	public ServiceExpression_ServiceNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getServiceNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_CallKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("serviceName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("serviceName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceExpressionAccess().getServiceNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class ServiceExpression_FullStopKeyword_2 extends KeywordToken  {
	
	public ServiceExpression_FullStopKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getFullStopKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_ServiceNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// serviceMethod=ID
protected class ServiceExpression_ServiceMethodAssignment_3 extends AssignmentToken  {
	
	public ServiceExpression_ServiceMethodAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getServiceMethodAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_FullStopKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("serviceMethod",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("serviceMethod");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceExpressionAccess().getServiceMethodIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ServiceExpression ****************/


/************ begin Rule NavigationExpression ****************
 *
 * NavigationExpression:
 *   "navigate" references+=AssociationRoleReference ("." references+=
 *   AssociationRoleReference)*;
 *
 **/

// "navigate" references+=AssociationRoleReference ("." references+=
// AssociationRoleReference)*
protected class NavigationExpression_Group extends GroupToken {
	
	public NavigationExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_Group_2(parent, this, 0, inst);
			case 1: return new NavigationExpression_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNavigationExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "navigate"
protected class NavigationExpression_NavigateKeyword_0 extends KeywordToken  {
	
	public NavigationExpression_NavigateKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getNavigateKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// references+=AssociationRoleReference
protected class NavigationExpression_ReferencesAssignment_1 extends AssignmentToken  {
	
	public NavigationExpression_ReferencesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getReferencesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationRoleReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNavigationExpressionAccess().getReferencesAssociationRoleReferenceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NavigationExpression_NavigateKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("." references+=AssociationRoleReference)*
protected class NavigationExpression_Group_2 extends GroupToken {
	
	public NavigationExpression_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_ReferencesAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "."
protected class NavigationExpression_FullStopKeyword_2_0 extends KeywordToken  {
	
	public NavigationExpression_FullStopKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getFullStopKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_Group_2(parent, this, 0, inst);
			case 1: return new NavigationExpression_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// references+=AssociationRoleReference
protected class NavigationExpression_ReferencesAssignment_2_1 extends AssignmentToken  {
	
	public NavigationExpression_ReferencesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getReferencesAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationRoleReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNavigationExpressionAccess().getReferencesAssociationRoleReferenceParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NavigationExpression_FullStopKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule NavigationExpression ****************/


/************ begin Rule DtoPropertyReference ****************
 *
 * DtoPropertyReference:
 *   name=ID;
 *
 **/

// name=ID
protected class DtoPropertyReference_NameAssignment extends AssignmentToken  {
	
	public DtoPropertyReference_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoPropertyReferenceAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoPropertyReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoPropertyReferenceAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DtoPropertyReference ****************/


/************ begin Rule AssociationRoleReference ****************
 *
 * AssociationRoleReference:
 *   name=ID;
 *
 **/

// name=ID
protected class AssociationRoleReference_NameAssignment extends AssignmentToken  {
	
	public AssociationRoleReference_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationRoleReferenceAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationRoleReferenceAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule AssociationRoleReference ****************/


/************ begin Rule UICall ****************
 *
 * UICall:
 *   UIModelElementCall;
 *
 **/

// UIModelElementCall
protected class UICall_UIModelElementCallParserRuleCall extends RuleCallToken {
	
	public UICall_UIModelElementCallParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUICallAccess().getUIModelElementCallParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElementCall_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUICallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UIModelElementCall_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUIModelElementCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule UICall ****************/


/************ begin Rule UIModelElementCall ****************
 *
 * UIModelElementCall:
 *   "dialogue" DialogueCall|"process" ProcessCall;
 *
 **/

// "dialogue" DialogueCall|"process" ProcessCall
protected class UIModelElementCall_Alternatives extends AlternativesToken {

	public UIModelElementCall_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUIModelElementCallAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElementCall_Group_0(parent, this, 0, inst);
			case 1: return new UIModelElementCall_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUIModelElementCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "dialogue" DialogueCall
protected class UIModelElementCall_Group_0 extends GroupToken {
	
	public UIModelElementCall_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUIModelElementCallAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElementCall_DialogueCallParserRuleCall_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "dialogue"
protected class UIModelElementCall_DialogueKeyword_0_0 extends KeywordToken  {
	
	public UIModelElementCall_DialogueKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUIModelElementCallAccess().getDialogueKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// DialogueCall
protected class UIModelElementCall_DialogueCallParserRuleCall_0_1 extends RuleCallToken {
	
	public UIModelElementCall_DialogueCallParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementCallAccess().getDialogueCallParserRuleCall_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DialogueCall_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElementCall_DialogueKeyword_0_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


// "process" ProcessCall
protected class UIModelElementCall_Group_1 extends GroupToken {
	
	public UIModelElementCall_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUIModelElementCallAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElementCall_ProcessCallParserRuleCall_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "process"
protected class UIModelElementCall_ProcessKeyword_1_0 extends KeywordToken  {
	
	public UIModelElementCall_ProcessKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUIModelElementCallAccess().getProcessKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ProcessCall
protected class UIModelElementCall_ProcessCallParserRuleCall_1_1 extends RuleCallToken {
	
	public UIModelElementCall_ProcessCallParserRuleCall_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementCallAccess().getProcessCallParserRuleCall_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ProcessCall_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElementCall_ProcessKeyword_1_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}



/************ end Rule UIModelElementCall ****************/

}
