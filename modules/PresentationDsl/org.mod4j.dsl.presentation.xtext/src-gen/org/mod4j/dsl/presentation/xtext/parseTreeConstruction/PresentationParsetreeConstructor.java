/*
* generated by Xtext
*/
package org.mod4j.dsl.presentation.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.mod4j.dsl.presentation.xtext.services.PresentationGrammarAccess;

import com.google.inject.Inject;

public class PresentationParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PresentationGrammarAccess grammarAccess;
		
	public PresentationGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_Alternatives(this, this, 0, inst);
			case 1: return new ApplicationModel_Group(this, this, 1, inst);
			case 2: return new ProcessReference_Group(this, this, 2, inst);
			case 3: return new FormsAndProcesses_Group(this, this, 3, inst);
			case 4: return new Menu_Group(this, this, 4, inst);
			case 5: return new ExternalReference_Alternatives(this, this, 5, inst);
			case 6: return new DtoReference_Group(this, this, 6, inst);
			case 7: return new ServiceReference_Group(this, this, 7, inst);
			case 8: return new DialogueReference_Group(this, this, 8, inst);
			case 9: return new ModelElementWithContext_UIModelElementParserRuleCall(this, this, 9, inst);
			case 10: return new UIModelElement_Alternatives(this, this, 10, inst);
			case 11: return new Dialogue_Alternatives(this, this, 11, inst);
			case 12: return new ContentForm_Group(this, this, 12, inst);
			case 13: return new Action_Group(this, this, 13, inst);
			case 14: return new CompoundDialogue_Alternatives(this, this, 14, inst);
			case 15: return new CollectionDialogue_Group(this, this, 15, inst);
			case 16: return new MasterDetail_Group(this, this, 16, inst);
			case 17: return new Process_Group(this, this, 17, inst);
			case 18: return new FormElement_Group(this, this, 18, inst);
			case 19: return new ActionDialogueCall_Group(this, this, 19, inst);
			case 20: return new DialogueCall_Group(this, this, 20, inst);
			case 21: return new Expression_Alternatives(this, this, 21, inst);
			case 22: return new ProcessCall_Group(this, this, 22, inst);
			case 23: return new OperationExpression_Group(this, this, 23, inst);
			case 24: return new SimpleProcessCall_Group(this, this, 24, inst);
			case 25: return new StandardExpression_TypeAssignment(this, this, 25, inst);
			case 26: return new ServiceExpression_Group(this, this, 26, inst);
			case 27: return new NavigationExpression_Group(this, this, 27, inst);
			case 28: return new DtoPropertyReference_NameAssignment(this, this, 28, inst);
			case 29: return new AssociationRoleReference_NameAssignment(this, this, 29, inst);
			case 30: return new UICall_Alternatives(this, this, 30, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule PresentationModel ****************
 *
 * PresentationModel:
 *   ApplicationModel|FormsAndProcesses; 
 * 
 * //IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
 *
 **/

// ApplicationModel|FormsAndProcesses 
// 
// //IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
protected class PresentationModel_Alternatives extends AlternativesToken {

	public PresentationModel_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PresentationModel_ApplicationModelParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PresentationModel_FormsAndProcessesParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPresentationModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ApplicationModel
protected class PresentationModel_ApplicationModelParserRuleCall_0 extends RuleCallToken {
	
	public PresentationModel_ApplicationModelParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getApplicationModelParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ApplicationModel_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getApplicationModelRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FormsAndProcesses
protected class PresentationModel_FormsAndProcessesParserRuleCall_1 extends RuleCallToken {
	
	public PresentationModel_FormsAndProcessesParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPresentationModelAccess().getFormsAndProcessesParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FormsAndProcesses_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFormsAndProcessesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PresentationModel ****************/


/************ begin Rule ApplicationModel ****************
 *
 * ApplicationModel returns PresentationModel:
 *   description=STRING? "application" name=ID ";" externalReferences+=ProcessReference*
 *   mainMenu=Menu;
 *
 **/

// description=STRING? "application" name=ID ";" externalReferences+=ProcessReference*
// mainMenu=Menu
protected class ApplicationModel_Group extends GroupToken {
	
	public ApplicationModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_MainMenuAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getApplicationModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class ApplicationModel_DescriptionAssignment_0 extends AssignmentToken  {
	
	public ApplicationModel_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getApplicationModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "application"
protected class ApplicationModel_ApplicationKeyword_1 extends KeywordToken  {
	
	public ApplicationModel_ApplicationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getApplicationKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class ApplicationModel_NameAssignment_2 extends AssignmentToken  {
	
	public ApplicationModel_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_ApplicationKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getApplicationModelAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ApplicationModel_SemicolonKeyword_3 extends KeywordToken  {
	
	public ApplicationModel_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ApplicationModel_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// externalReferences+=ProcessReference*
protected class ApplicationModel_ExternalReferencesAssignment_4 extends AssignmentToken  {
	
	public ApplicationModel_ExternalReferencesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getExternalReferencesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("externalReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("externalReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getApplicationModelAccess().getExternalReferencesProcessReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ApplicationModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ApplicationModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// mainMenu=Menu
protected class ApplicationModel_MainMenuAssignment_5 extends AssignmentToken  {
	
	public ApplicationModel_MainMenuAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getApplicationModelAccess().getMainMenuAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("mainMenu",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("mainMenu");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMenuRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getApplicationModelAccess().getMainMenuMenuParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ApplicationModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ApplicationModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ApplicationModel ****************/


/************ begin Rule ProcessReference ****************
 *
 * ProcessReference:
 *   "from" modelName=ID "process" name=ID ";";
 *
 **/

// "from" modelName=ID "process" name=ID ";"
protected class ProcessReference_Group extends GroupToken {
	
	public ProcessReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcessReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class ProcessReference_FromKeyword_0 extends KeywordToken  {
	
	public ProcessReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class ProcessReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public ProcessReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "process"
protected class ProcessReference_ProcessKeyword_2 extends KeywordToken  {
	
	public ProcessReference_ProcessKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessReferenceAccess().getProcessKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class ProcessReference_NameAssignment_3 extends AssignmentToken  {
	
	public ProcessReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessReference_ProcessKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ProcessReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public ProcessReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ProcessReference ****************/


/************ begin Rule FormsAndProcesses ****************
 *
 * FormsAndProcesses returns PresentationModel:
 *   description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
 *   * elements+=ModelElementWithContext*;
 *
 **/

// description=STRING? "presentation" name=ID ";" externalReferences+=ExternalReference
// * elements+=ModelElementWithContext*
protected class FormsAndProcesses_Group extends GroupToken {
	
	public FormsAndProcesses_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_ElementsAssignment_5(parent, this, 0, inst);
			case 1: return new FormsAndProcesses_ExternalReferencesAssignment_4(parent, this, 1, inst);
			case 2: return new FormsAndProcesses_SemicolonKeyword_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFormsAndProcessesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class FormsAndProcesses_DescriptionAssignment_0 extends AssignmentToken  {
	
	public FormsAndProcesses_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormsAndProcessesAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "presentation"
protected class FormsAndProcesses_PresentationKeyword_1 extends KeywordToken  {
	
	public FormsAndProcesses_PresentationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getPresentationKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class FormsAndProcesses_NameAssignment_2 extends AssignmentToken  {
	
	public FormsAndProcesses_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_PresentationKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormsAndProcessesAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class FormsAndProcesses_SemicolonKeyword_3 extends KeywordToken  {
	
	public FormsAndProcesses_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormsAndProcesses_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// externalReferences+=ExternalReference*
protected class FormsAndProcesses_ExternalReferencesAssignment_4 extends AssignmentToken  {
	
	public FormsAndProcesses_ExternalReferencesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getExternalReferencesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("externalReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("externalReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormsAndProcessesAccess().getExternalReferencesExternalReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormsAndProcesses_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new FormsAndProcesses_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=ModelElementWithContext*
protected class FormsAndProcesses_ElementsAssignment_5 extends AssignmentToken  {
	
	public FormsAndProcesses_ElementsAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormsAndProcessesAccess().getElementsAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElementWithContext_UIModelElementParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelElementWithContextRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormsAndProcessesAccess().getElementsModelElementWithContextParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormsAndProcesses_ElementsAssignment_5(parent, next, actIndex, consumed);
			case 1: return new FormsAndProcesses_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 2: return new FormsAndProcesses_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FormsAndProcesses ****************/


/************ begin Rule Menu ****************
 *
 * Menu:
 *   "application" "[" startProcesses+=SimpleProcessCall ";" (startProcesses+=
 *   SimpleProcessCall ";")* "]";
 *
 **/

// "application" "[" startProcesses+=SimpleProcessCall ";" (startProcesses+=
// SimpleProcessCall ";")* "]"
protected class Menu_Group extends GroupToken {
	
	public Menu_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMenuAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_RightSquareBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMenuRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "application"
protected class Menu_ApplicationKeyword_0 extends KeywordToken  {
	
	public Menu_ApplicationKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuAccess().getApplicationKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "["
protected class Menu_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public Menu_LeftSquareBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuAccess().getLeftSquareBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_ApplicationKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// startProcesses+=SimpleProcessCall
protected class Menu_StartProcessesAssignment_2 extends AssignmentToken  {
	
	public Menu_StartProcessesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuAccess().getStartProcessesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("startProcesses",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("startProcesses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMenuAccess().getStartProcessesSimpleProcessCallParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Menu_LeftSquareBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Menu_SemicolonKeyword_3 extends KeywordToken  {
	
	public Menu_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_StartProcessesAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (startProcesses+=SimpleProcessCall ";")*
protected class Menu_Group_4 extends GroupToken {
	
	public Menu_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMenuAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_SemicolonKeyword_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// startProcesses+=SimpleProcessCall
protected class Menu_StartProcessesAssignment_4_0 extends AssignmentToken  {
	
	public Menu_StartProcessesAssignment_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMenuAccess().getStartProcessesAssignment_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("startProcesses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("startProcesses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMenuAccess().getStartProcessesSimpleProcessCallParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Menu_Group_4(parent, next, actIndex, consumed);
			case 1: return new Menu_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Menu_SemicolonKeyword_4_1 extends KeywordToken  {
	
	public Menu_SemicolonKeyword_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuAccess().getSemicolonKeyword_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_StartProcessesAssignment_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class Menu_RightSquareBracketKeyword_5 extends KeywordToken  {
	
	public Menu_RightSquareBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMenuAccess().getRightSquareBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Menu_Group_4(parent, this, 0, inst);
			case 1: return new Menu_SemicolonKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Menu ****************/


/************ begin Rule ExternalReference ****************
 *
 * ExternalReference:
 *   DtoReference|ProcessReference|DialogueReference|ServiceReference;
 *
 **/

// DtoReference|ProcessReference|DialogueReference|ServiceReference
protected class ExternalReference_Alternatives extends AlternativesToken {

	public ExternalReference_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_DtoReferenceParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ExternalReference_ProcessReferenceParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ExternalReference_DialogueReferenceParserRuleCall_2(parent, this, 2, inst);
			case 3: return new ExternalReference_ServiceReferenceParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DtoReference
protected class ExternalReference_DtoReferenceParserRuleCall_0 extends RuleCallToken {
	
	public ExternalReference_DtoReferenceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getDtoReferenceParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DtoReference_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDtoReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ProcessReference
protected class ExternalReference_ProcessReferenceParserRuleCall_1 extends RuleCallToken {
	
	public ExternalReference_ProcessReferenceParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getProcessReferenceParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ProcessReference_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getProcessReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DialogueReference
protected class ExternalReference_DialogueReferenceParserRuleCall_2 extends RuleCallToken {
	
	public ExternalReference_DialogueReferenceParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getDialogueReferenceParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DialogueReference_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDialogueReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ServiceReference
protected class ExternalReference_ServiceReferenceParserRuleCall_3 extends RuleCallToken {
	
	public ExternalReference_ServiceReferenceParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getServiceReferenceParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ServiceReference_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getServiceReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ExternalReference ****************/


/************ begin Rule DtoReference ****************
 *
 * DtoReference:
 *   "from" modelName=ID "dto" name=ID ";";
 *
 **/

// "from" modelName=ID "dto" name=ID ";"
protected class DtoReference_Group extends GroupToken {
	
	public DtoReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class DtoReference_FromKeyword_0 extends KeywordToken  {
	
	public DtoReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class DtoReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public DtoReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "dto"
protected class DtoReference_DtoKeyword_2 extends KeywordToken  {
	
	public DtoReference_DtoKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getDtoKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class DtoReference_NameAssignment_3 extends AssignmentToken  {
	
	public DtoReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_DtoKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class DtoReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public DtoReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DtoReference ****************/


/************ begin Rule ServiceReference ****************
 *
 * ServiceReference:
 *   "from" modelName=ID "service" name=ID ";";
 *
 **/

// "from" modelName=ID "service" name=ID ";"
protected class ServiceReference_Group extends GroupToken {
	
	public ServiceReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getServiceReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class ServiceReference_FromKeyword_0 extends KeywordToken  {
	
	public ServiceReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class ServiceReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public ServiceReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "service"
protected class ServiceReference_ServiceKeyword_2 extends KeywordToken  {
	
	public ServiceReference_ServiceKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getServiceKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class ServiceReference_NameAssignment_3 extends AssignmentToken  {
	
	public ServiceReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_ServiceKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ServiceReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public ServiceReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ServiceReference ****************/


/************ begin Rule DialogueReference ****************
 *
 * DialogueReference:
 *   "from" modelName=ID "form" name=ID ";";
 *
 **/

// "from" modelName=ID "form" name=ID ";"
protected class DialogueReference_Group extends GroupToken {
	
	public DialogueReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDialogueReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDialogueReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class DialogueReference_FromKeyword_0 extends KeywordToken  {
	
	public DialogueReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelName=ID
protected class DialogueReference_ModelNameAssignment_1 extends AssignmentToken  {
	
	public DialogueReference_ModelNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueReferenceAccess().getModelNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDialogueReferenceAccess().getModelNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "form"
protected class DialogueReference_FormKeyword_2 extends KeywordToken  {
	
	public DialogueReference_FormKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueReferenceAccess().getFormKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueReference_ModelNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class DialogueReference_NameAssignment_3 extends AssignmentToken  {
	
	public DialogueReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueReference_FormKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDialogueReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class DialogueReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public DialogueReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DialogueReference ****************/


/************ begin Rule ModelElementWithContext ****************
 *
 * ModelElementWithContext:
 *   UIModelElement; 
 *     
 *   
 * 	  //| Link
 *
 **/

// UIModelElement 
// 	  //| Link
protected class ModelElementWithContext_UIModelElementParserRuleCall extends RuleCallToken {
	
	public ModelElementWithContext_UIModelElementParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelElementWithContextAccess().getUIModelElementParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelElementWithContextRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UIModelElement_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUIModelElementRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ModelElementWithContext ****************/


/************ begin Rule UIModelElement ****************
 *
 * UIModelElement:
 *   Dialogue|Process;
 *
 **/

// Dialogue|Process
protected class UIModelElement_Alternatives extends AlternativesToken {

	public UIModelElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIModelElement_DialogueParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UIModelElement_ProcessParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUIModelElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Dialogue
protected class UIModelElement_DialogueParserRuleCall_0 extends RuleCallToken {
	
	public UIModelElement_DialogueParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getDialogueParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dialogue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Dialogue_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Process
protected class UIModelElement_ProcessParserRuleCall_1 extends RuleCallToken {
	
	public UIModelElement_ProcessParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUIModelElementAccess().getProcessParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Process_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getProcessRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UIModelElement ****************/


/************ begin Rule Dialogue ****************
 *
 * Dialogue:
 *   ContentForm|CompoundDialogue;
 *
 **/

// ContentForm|CompoundDialogue
protected class Dialogue_Alternatives extends AlternativesToken {

	public Dialogue_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDialogueAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dialogue_ContentFormParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Dialogue_CompoundDialogueParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ContentForm
protected class Dialogue_ContentFormParserRuleCall_0 extends RuleCallToken {
	
	public Dialogue_ContentFormParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDialogueAccess().getContentFormParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ContentForm_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getContentFormRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompoundDialogue
protected class Dialogue_CompoundDialogueParserRuleCall_1 extends RuleCallToken {
	
	public Dialogue_CompoundDialogueParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDialogueAccess().getCompoundDialogueParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompoundDialogue_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompoundDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Dialogue ****************/


/************ begin Rule ContentForm ****************
 *
 * ContentForm:
 *   description=STRING? "form" name=ID "context" collectionContext?="list"? contextRef=[
 *   DtoReference] "[" ("readonly" (readonly?="true"|"false") ";")? formElements+=
 *   FormElement* ("actions" "[" (actions+=Action ";")* "]")? ("processes" "[" (processes+=
 *   SimpleProcessCall ";")* "]")? "]";
 *
 **/

// description=STRING? "form" name=ID "context" collectionContext?="list"? contextRef=[
// DtoReference] "[" ("readonly" (readonly?="true"|"false") ";")? formElements+=
// FormElement* ("actions" "[" (actions+=Action ";")* "]")? ("processes" "[" (processes+=
// SimpleProcessCall ";")* "]")? "]"
protected class ContentForm_Group extends GroupToken {
	
	public ContentForm_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_RightSquareBracketKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContentFormRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class ContentForm_DescriptionAssignment_0 extends AssignmentToken  {
	
	public ContentForm_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContentFormAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "form"
protected class ContentForm_FormKeyword_1 extends KeywordToken  {
	
	public ContentForm_FormKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getFormKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class ContentForm_NameAssignment_2 extends AssignmentToken  {
	
	public ContentForm_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_FormKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getContentFormAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class ContentForm_ContextKeyword_3 extends KeywordToken  {
	
	public ContentForm_ContextKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getContextKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// collectionContext?="list"?
protected class ContentForm_CollectionContextAssignment_4 extends AssignmentToken  {
	
	public ContentForm_CollectionContextAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getCollectionContextAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ContextKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collectionContext",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collectionContext");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getContentFormAccess().getCollectionContextListKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// contextRef=[DtoReference]
protected class ContentForm_ContextRefAssignment_5 extends AssignmentToken  {
	
	public ContentForm_ContextRefAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getContextRefAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_CollectionContextAssignment_4(parent, this, 0, inst);
			case 1: return new ContentForm_ContextKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContentFormAccess().getContextRefDtoReferenceCrossReference_5_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getContentFormAccess().getContextRefDtoReferenceCrossReference_5_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "["
protected class ContentForm_LeftSquareBracketKeyword_6 extends KeywordToken  {
	
	public ContentForm_LeftSquareBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getLeftSquareBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ContextRefAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("readonly" (readonly?="true"|"false") ";")?
protected class ContentForm_Group_7 extends GroupToken {
	
	public ContentForm_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_SemicolonKeyword_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class ContentForm_ReadonlyKeyword_7_0 extends KeywordToken  {
	
	public ContentForm_ReadonlyKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getReadonlyKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_LeftSquareBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class ContentForm_Alternatives_7_1 extends AlternativesToken {

	public ContentForm_Alternatives_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getContentFormAccess().getAlternatives_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyAssignment_7_1_0(parent, this, 0, inst);
			case 1: return new ContentForm_FalseKeyword_7_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class ContentForm_ReadonlyAssignment_7_1_0 extends AssignmentToken  {
	
	public ContentForm_ReadonlyAssignment_7_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getReadonlyAssignment_7_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getContentFormAccess().getReadonlyTrueKeyword_7_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class ContentForm_FalseKeyword_7_1_1 extends KeywordToken  {
	
	public ContentForm_FalseKeyword_7_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getFalseKeyword_7_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ReadonlyKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class ContentForm_SemicolonKeyword_7_2 extends KeywordToken  {
	
	public ContentForm_SemicolonKeyword_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getSemicolonKeyword_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Alternatives_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// formElements+=FormElement*
protected class ContentForm_FormElementsAssignment_8 extends AssignmentToken  {
	
	public ContentForm_FormElementsAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getFormElementsAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("formElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("formElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContentFormAccess().getFormElementsFormElementParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContentForm_FormElementsAssignment_8(parent, next, actIndex, consumed);
			case 1: return new ContentForm_Group_7(parent, next, actIndex, consumed);
			case 2: return new ContentForm_LeftSquareBracketKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("actions" "[" (actions+=Action ";")* "]")?
protected class ContentForm_Group_9 extends GroupToken {
	
	public ContentForm_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_RightSquareBracketKeyword_9_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "actions"
protected class ContentForm_ActionsKeyword_9_0 extends KeywordToken  {
	
	public ContentForm_ActionsKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getActionsKeyword_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_FormElementsAssignment_8(parent, this, 0, inst);
			case 1: return new ContentForm_Group_7(parent, this, 1, inst);
			case 2: return new ContentForm_LeftSquareBracketKeyword_6(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class ContentForm_LeftSquareBracketKeyword_9_1 extends KeywordToken  {
	
	public ContentForm_LeftSquareBracketKeyword_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getLeftSquareBracketKeyword_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ActionsKeyword_9_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (actions+=Action ";")*
protected class ContentForm_Group_9_2 extends GroupToken {
	
	public ContentForm_Group_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_9_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_SemicolonKeyword_9_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// actions+=Action
protected class ContentForm_ActionsAssignment_9_2_0 extends AssignmentToken  {
	
	public ContentForm_ActionsAssignment_9_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getActionsAssignment_9_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("actions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContentFormAccess().getActionsActionParserRuleCall_9_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContentForm_Group_9_2(parent, next, actIndex, consumed);
			case 1: return new ContentForm_LeftSquareBracketKeyword_9_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ContentForm_SemicolonKeyword_9_2_1 extends KeywordToken  {
	
	public ContentForm_SemicolonKeyword_9_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getSemicolonKeyword_9_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ActionsAssignment_9_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class ContentForm_RightSquareBracketKeyword_9_3 extends KeywordToken  {
	
	public ContentForm_RightSquareBracketKeyword_9_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getRightSquareBracketKeyword_9_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_9_2(parent, this, 0, inst);
			case 1: return new ContentForm_LeftSquareBracketKeyword_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("processes" "[" (processes+=SimpleProcessCall ";")* "]")?
protected class ContentForm_Group_10 extends GroupToken {
	
	public ContentForm_Group_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_RightSquareBracketKeyword_10_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class ContentForm_ProcessesKeyword_10_0 extends KeywordToken  {
	
	public ContentForm_ProcessesKeyword_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getProcessesKeyword_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_9(parent, this, 0, inst);
			case 1: return new ContentForm_FormElementsAssignment_8(parent, this, 1, inst);
			case 2: return new ContentForm_Group_7(parent, this, 2, inst);
			case 3: return new ContentForm_LeftSquareBracketKeyword_6(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class ContentForm_LeftSquareBracketKeyword_10_1 extends KeywordToken  {
	
	public ContentForm_LeftSquareBracketKeyword_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getLeftSquareBracketKeyword_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ProcessesKeyword_10_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processes+=SimpleProcessCall ";")*
protected class ContentForm_Group_10_2 extends GroupToken {
	
	public ContentForm_Group_10_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getContentFormAccess().getGroup_10_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_SemicolonKeyword_10_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=SimpleProcessCall
protected class ContentForm_ProcessesAssignment_10_2_0 extends AssignmentToken  {
	
	public ContentForm_ProcessesAssignment_10_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getContentFormAccess().getProcessesAssignment_10_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getContentFormAccess().getProcessesSimpleProcessCallParserRuleCall_10_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContentForm_Group_10_2(parent, next, actIndex, consumed);
			case 1: return new ContentForm_LeftSquareBracketKeyword_10_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ContentForm_SemicolonKeyword_10_2_1 extends KeywordToken  {
	
	public ContentForm_SemicolonKeyword_10_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getSemicolonKeyword_10_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_ProcessesAssignment_10_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class ContentForm_RightSquareBracketKeyword_10_3 extends KeywordToken  {
	
	public ContentForm_RightSquareBracketKeyword_10_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getRightSquareBracketKeyword_10_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_10_2(parent, this, 0, inst);
			case 1: return new ContentForm_LeftSquareBracketKeyword_10_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class ContentForm_RightSquareBracketKeyword_11 extends KeywordToken  {
	
	public ContentForm_RightSquareBracketKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getContentFormAccess().getRightSquareBracketKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ContentForm_Group_10(parent, this, 0, inst);
			case 1: return new ContentForm_Group_9(parent, this, 1, inst);
			case 2: return new ContentForm_FormElementsAssignment_8(parent, this, 2, inst);
			case 3: return new ContentForm_Group_7(parent, this, 3, inst);
			case 4: return new ContentForm_LeftSquareBracketKeyword_6(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ContentForm ****************/


/************ begin Rule Action ****************
 *
 * Action returns Process:
 *   description=STRING? type=ProcessType? name=ID ("label" label=STRING)? processElements
 *   +=ActionDialogueCall?;
 *
 **/

// description=STRING? type=ProcessType? name=ID ("label" label=STRING)? processElements
// +=ActionDialogueCall?
protected class Action_Group extends GroupToken {
	
	public Action_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_ProcessElementsAssignment_4(parent, this, 0, inst);
			case 1: return new Action_Group_3(parent, this, 1, inst);
			case 2: return new Action_NameAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class Action_DescriptionAssignment_0 extends AssignmentToken  {
	
	public Action_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// type=ProcessType?
protected class Action_TypeAssignment_1 extends AssignmentToken  {
	
	public Action_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getActionAccess().getTypeProcessTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class Action_NameAssignment_2 extends AssignmentToken  {
	
	public Action_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_TypeAssignment_1(parent, this, 0, inst);
			case 1: return new Action_DescriptionAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("label" label=STRING)?
protected class Action_Group_3 extends GroupToken {
	
	public Action_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_LabelAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "label"
protected class Action_LabelKeyword_3_0 extends KeywordToken  {
	
	public Action_LabelKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionAccess().getLabelKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=STRING
protected class Action_LabelAssignment_3_1 extends AssignmentToken  {
	
	public Action_LabelAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getLabelAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Action_LabelKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActionAccess().getLabelSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// processElements+=ActionDialogueCall?
protected class Action_ProcessElementsAssignment_4 extends AssignmentToken  {
	
	public Action_ProcessElementsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionAccess().getProcessElementsAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ActionDialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionAccess().getProcessElementsActionDialogueCallParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action_Group_3(parent, next, actIndex, consumed);
			case 1: return new Action_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Action ****************/


/************ begin Rule CompoundDialogue ****************
 *
 * CompoundDialogue:
 *   description=STRING? "CompoundDialogue" name=ID "context" contextRef=[DtoReference] (
 *   "readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (dialogues+=DialogueCall
 *   ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")?|CollectionDialogue|
 *   MasterDetail;
 *
 **/

// description=STRING? "CompoundDialogue" name=ID "context" contextRef=[DtoReference] (
// "readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (dialogues+=DialogueCall
// ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")?|CollectionDialogue|
// MasterDetail
protected class CompoundDialogue_Alternatives extends AlternativesToken {

	public CompoundDialogue_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0(parent, this, 0, inst);
			case 1: return new CompoundDialogue_CollectionDialogueParserRuleCall_1(parent, this, 1, inst);
			case 2: return new CompoundDialogue_MasterDetailParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING? "CompoundDialogue" name=ID "context" contextRef=[DtoReference] (
// "readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (dialogues+=DialogueCall
// ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class CompoundDialogue_Group_0 extends GroupToken {
	
	public CompoundDialogue_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_7(parent, this, 0, inst);
			case 1: return new CompoundDialogue_Group_0_6(parent, this, 1, inst);
			case 2: return new CompoundDialogue_Group_0_5(parent, this, 2, inst);
			case 3: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING?
protected class CompoundDialogue_DescriptionAssignment_0_0 extends AssignmentToken  {
	
	public CompoundDialogue_DescriptionAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDescriptionAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCompoundDialogueAccess().getDescriptionSTRINGTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "CompoundDialogue"
protected class CompoundDialogue_CompoundDialogueKeyword_0_1 extends KeywordToken  {
	
	public CompoundDialogue_CompoundDialogueKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getCompoundDialogueKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DescriptionAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class CompoundDialogue_NameAssignment_0_2 extends AssignmentToken  {
	
	public CompoundDialogue_NameAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getNameAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_CompoundDialogueKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCompoundDialogueAccess().getNameIDTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class CompoundDialogue_ContextKeyword_0_3 extends KeywordToken  {
	
	public CompoundDialogue_ContextKeyword_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getContextKeyword_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_NameAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[DtoReference]
protected class CompoundDialogue_ContextRefAssignment_0_4 extends AssignmentToken  {
	
	public CompoundDialogue_ContextRefAssignment_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getContextRefAssignment_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ContextKeyword_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompoundDialogueAccess().getContextRefDtoReferenceCrossReference_0_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getCompoundDialogueAccess().getContextRefDtoReferenceCrossReference_0_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false") ";")?
protected class CompoundDialogue_Group_0_5 extends GroupToken {
	
	public CompoundDialogue_Group_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_SemicolonKeyword_0_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class CompoundDialogue_ReadonlyKeyword_0_5_0 extends KeywordToken  {
	
	public CompoundDialogue_ReadonlyKeyword_0_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getReadonlyKeyword_0_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class CompoundDialogue_Alternatives_0_5_1 extends AlternativesToken {

	public CompoundDialogue_Alternatives_0_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getAlternatives_0_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyAssignment_0_5_1_0(parent, this, 0, inst);
			case 1: return new CompoundDialogue_FalseKeyword_0_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class CompoundDialogue_ReadonlyAssignment_0_5_1_0 extends AssignmentToken  {
	
	public CompoundDialogue_ReadonlyAssignment_0_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getReadonlyAssignment_0_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyKeyword_0_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getCompoundDialogueAccess().getReadonlyTrueKeyword_0_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class CompoundDialogue_FalseKeyword_0_5_1_1 extends KeywordToken  {
	
	public CompoundDialogue_FalseKeyword_0_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getFalseKeyword_0_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ReadonlyKeyword_0_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class CompoundDialogue_SemicolonKeyword_0_5_2 extends KeywordToken  {
	
	public CompoundDialogue_SemicolonKeyword_0_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getSemicolonKeyword_0_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Alternatives_0_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("dialogues" "[" (dialogues+=DialogueCall ";")* "]")?
protected class CompoundDialogue_Group_0_6 extends GroupToken {
	
	public CompoundDialogue_Group_0_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_RightSquareBracketKeyword_0_6_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "dialogues"
protected class CompoundDialogue_DialoguesKeyword_0_6_0 extends KeywordToken  {
	
	public CompoundDialogue_DialoguesKeyword_0_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDialoguesKeyword_0_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_5(parent, this, 0, inst);
			case 1: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CompoundDialogue_LeftSquareBracketKeyword_0_6_1 extends KeywordToken  {
	
	public CompoundDialogue_LeftSquareBracketKeyword_0_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getLeftSquareBracketKeyword_0_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DialoguesKeyword_0_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (dialogues+=DialogueCall ";")*
protected class CompoundDialogue_Group_0_6_2 extends GroupToken {
	
	public CompoundDialogue_Group_0_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_SemicolonKeyword_0_6_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dialogues+=DialogueCall
protected class CompoundDialogue_DialoguesAssignment_0_6_2_0 extends AssignmentToken  {
	
	public CompoundDialogue_DialoguesAssignment_0_6_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getDialoguesAssignment_0_6_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dialogues",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dialogues");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundDialogueAccess().getDialoguesDialogueCallParserRuleCall_0_6_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_6_2(parent, next, actIndex, consumed);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CompoundDialogue_SemicolonKeyword_0_6_2_1 extends KeywordToken  {
	
	public CompoundDialogue_SemicolonKeyword_0_6_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getSemicolonKeyword_0_6_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_DialoguesAssignment_0_6_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CompoundDialogue_RightSquareBracketKeyword_0_6_3 extends KeywordToken  {
	
	public CompoundDialogue_RightSquareBracketKeyword_0_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getRightSquareBracketKeyword_0_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_6_2(parent, this, 0, inst);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class CompoundDialogue_Group_0_7 extends GroupToken {
	
	public CompoundDialogue_Group_0_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_RightSquareBracketKeyword_0_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class CompoundDialogue_ProcessesKeyword_0_7_0 extends KeywordToken  {
	
	public CompoundDialogue_ProcessesKeyword_0_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getProcessesKeyword_0_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_6(parent, this, 0, inst);
			case 1: return new CompoundDialogue_Group_0_5(parent, this, 1, inst);
			case 2: return new CompoundDialogue_ContextRefAssignment_0_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CompoundDialogue_LeftSquareBracketKeyword_0_7_1 extends KeywordToken  {
	
	public CompoundDialogue_LeftSquareBracketKeyword_0_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getLeftSquareBracketKeyword_0_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ProcessesKeyword_0_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processes+=ProcessCall ";")*
protected class CompoundDialogue_Group_0_7_2 extends GroupToken {
	
	public CompoundDialogue_Group_0_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getGroup_0_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_SemicolonKeyword_0_7_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall
protected class CompoundDialogue_ProcessesAssignment_0_7_2_0 extends AssignmentToken  {
	
	public CompoundDialogue_ProcessesAssignment_0_7_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getProcessesAssignment_0_7_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompoundDialogueAccess().getProcessesProcessCallParserRuleCall_0_7_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_7_2(parent, next, actIndex, consumed);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CompoundDialogue_SemicolonKeyword_0_7_2_1 extends KeywordToken  {
	
	public CompoundDialogue_SemicolonKeyword_0_7_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getSemicolonKeyword_0_7_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_ProcessesAssignment_0_7_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CompoundDialogue_RightSquareBracketKeyword_0_7_3 extends KeywordToken  {
	
	public CompoundDialogue_RightSquareBracketKeyword_0_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getRightSquareBracketKeyword_0_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompoundDialogue_Group_0_7_2(parent, this, 0, inst);
			case 1: return new CompoundDialogue_LeftSquareBracketKeyword_0_7_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



// CollectionDialogue
protected class CompoundDialogue_CollectionDialogueParserRuleCall_1 extends RuleCallToken {
	
	public CompoundDialogue_CollectionDialogueParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getCollectionDialogueParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CollectionDialogue_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCollectionDialogueRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// MasterDetail
protected class CompoundDialogue_MasterDetailParserRuleCall_2 extends RuleCallToken {
	
	public CompoundDialogue_MasterDetailParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompoundDialogueAccess().getMasterDetailParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MasterDetail_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMasterDetailRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule CompoundDialogue ****************/


/************ begin Rule CollectionDialogue ****************
 *
 * CollectionDialogue:
 *   description=STRING? "CollectionDialogue" name=ID "context" contextRef=[DtoReference]
 *   "[" ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (dialogues+=
 *   DialogueCall ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")? "]";
 *
 **/

// description=STRING? "CollectionDialogue" name=ID "context" contextRef=[DtoReference]
// "[" ("readonly" (readonly?="true"|"false") ";")? ("dialogues" "[" (dialogues+=
// DialogueCall ";")* "]")? ("processes" "[" (processes+=ProcessCall ";")* "]")? "]"
protected class CollectionDialogue_Group extends GroupToken {
	
	public CollectionDialogue_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_RightSquareBracketKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCollectionDialogueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class CollectionDialogue_DescriptionAssignment_0 extends AssignmentToken  {
	
	public CollectionDialogue_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCollectionDialogueAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "CollectionDialogue"
protected class CollectionDialogue_CollectionDialogueKeyword_1 extends KeywordToken  {
	
	public CollectionDialogue_CollectionDialogueKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getCollectionDialogueKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class CollectionDialogue_NameAssignment_2 extends AssignmentToken  {
	
	public CollectionDialogue_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_CollectionDialogueKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCollectionDialogueAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class CollectionDialogue_ContextKeyword_3 extends KeywordToken  {
	
	public CollectionDialogue_ContextKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getContextKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[DtoReference]
protected class CollectionDialogue_ContextRefAssignment_4 extends AssignmentToken  {
	
	public CollectionDialogue_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ContextKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCollectionDialogueAccess().getContextRefDtoReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getCollectionDialogueAccess().getContextRefDtoReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "["
protected class CollectionDialogue_LeftSquareBracketKeyword_5 extends KeywordToken  {
	
	public CollectionDialogue_LeftSquareBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getLeftSquareBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("readonly" (readonly?="true"|"false") ";")?
protected class CollectionDialogue_Group_6 extends GroupToken {
	
	public CollectionDialogue_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_SemicolonKeyword_6_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class CollectionDialogue_ReadonlyKeyword_6_0 extends KeywordToken  {
	
	public CollectionDialogue_ReadonlyKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getReadonlyKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_LeftSquareBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class CollectionDialogue_Alternatives_6_1 extends AlternativesToken {

	public CollectionDialogue_Alternatives_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getAlternatives_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyAssignment_6_1_0(parent, this, 0, inst);
			case 1: return new CollectionDialogue_FalseKeyword_6_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class CollectionDialogue_ReadonlyAssignment_6_1_0 extends AssignmentToken  {
	
	public CollectionDialogue_ReadonlyAssignment_6_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getReadonlyAssignment_6_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getCollectionDialogueAccess().getReadonlyTrueKeyword_6_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class CollectionDialogue_FalseKeyword_6_1_1 extends KeywordToken  {
	
	public CollectionDialogue_FalseKeyword_6_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getFalseKeyword_6_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ReadonlyKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class CollectionDialogue_SemicolonKeyword_6_2 extends KeywordToken  {
	
	public CollectionDialogue_SemicolonKeyword_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getSemicolonKeyword_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Alternatives_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("dialogues" "[" (dialogues+=DialogueCall ";")* "]")?
protected class CollectionDialogue_Group_7 extends GroupToken {
	
	public CollectionDialogue_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_RightSquareBracketKeyword_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "dialogues"
protected class CollectionDialogue_DialoguesKeyword_7_0 extends KeywordToken  {
	
	public CollectionDialogue_DialoguesKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDialoguesKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_6(parent, this, 0, inst);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CollectionDialogue_LeftSquareBracketKeyword_7_1 extends KeywordToken  {
	
	public CollectionDialogue_LeftSquareBracketKeyword_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getLeftSquareBracketKeyword_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DialoguesKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (dialogues+=DialogueCall ";")*
protected class CollectionDialogue_Group_7_2 extends GroupToken {
	
	public CollectionDialogue_Group_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_SemicolonKeyword_7_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dialogues+=DialogueCall
protected class CollectionDialogue_DialoguesAssignment_7_2_0 extends AssignmentToken  {
	
	public CollectionDialogue_DialoguesAssignment_7_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getDialoguesAssignment_7_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dialogues",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dialogues");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCollectionDialogueAccess().getDialoguesDialogueCallParserRuleCall_7_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectionDialogue_Group_7_2(parent, next, actIndex, consumed);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_7_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CollectionDialogue_SemicolonKeyword_7_2_1 extends KeywordToken  {
	
	public CollectionDialogue_SemicolonKeyword_7_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getSemicolonKeyword_7_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_DialoguesAssignment_7_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CollectionDialogue_RightSquareBracketKeyword_7_3 extends KeywordToken  {
	
	public CollectionDialogue_RightSquareBracketKeyword_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getRightSquareBracketKeyword_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_7_2(parent, this, 0, inst);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_7_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class CollectionDialogue_Group_8 extends GroupToken {
	
	public CollectionDialogue_Group_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_RightSquareBracketKeyword_8_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class CollectionDialogue_ProcessesKeyword_8_0 extends KeywordToken  {
	
	public CollectionDialogue_ProcessesKeyword_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getProcessesKeyword_8_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_7(parent, this, 0, inst);
			case 1: return new CollectionDialogue_Group_6(parent, this, 1, inst);
			case 2: return new CollectionDialogue_LeftSquareBracketKeyword_5(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class CollectionDialogue_LeftSquareBracketKeyword_8_1 extends KeywordToken  {
	
	public CollectionDialogue_LeftSquareBracketKeyword_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getLeftSquareBracketKeyword_8_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ProcessesKeyword_8_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processes+=ProcessCall ";")*
protected class CollectionDialogue_Group_8_2 extends GroupToken {
	
	public CollectionDialogue_Group_8_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getGroup_8_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_SemicolonKeyword_8_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall
protected class CollectionDialogue_ProcessesAssignment_8_2_0 extends AssignmentToken  {
	
	public CollectionDialogue_ProcessesAssignment_8_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getProcessesAssignment_8_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCollectionDialogueAccess().getProcessesProcessCallParserRuleCall_8_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CollectionDialogue_Group_8_2(parent, next, actIndex, consumed);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_8_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CollectionDialogue_SemicolonKeyword_8_2_1 extends KeywordToken  {
	
	public CollectionDialogue_SemicolonKeyword_8_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getSemicolonKeyword_8_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_ProcessesAssignment_8_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CollectionDialogue_RightSquareBracketKeyword_8_3 extends KeywordToken  {
	
	public CollectionDialogue_RightSquareBracketKeyword_8_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getRightSquareBracketKeyword_8_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_8_2(parent, this, 0, inst);
			case 1: return new CollectionDialogue_LeftSquareBracketKeyword_8_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class CollectionDialogue_RightSquareBracketKeyword_9 extends KeywordToken  {
	
	public CollectionDialogue_RightSquareBracketKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCollectionDialogueAccess().getRightSquareBracketKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CollectionDialogue_Group_8(parent, this, 0, inst);
			case 1: return new CollectionDialogue_Group_7(parent, this, 1, inst);
			case 2: return new CollectionDialogue_Group_6(parent, this, 2, inst);
			case 3: return new CollectionDialogue_LeftSquareBracketKeyword_5(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CollectionDialogue ****************/


/************ begin Rule MasterDetail ****************
 *
 * MasterDetail:
 *   description=STRING? "MasterDetail" name=ID "context" contextRef=[DtoReference] (
 *   "readonly" (readonly?="true"|"false") ";")? "master" master=DialogueCall ";" "detail"
 *   detail=DialogueCall ";" ("processes" "[" (processes+=ProcessCall ";")* "]")?;
 *
 **/

// description=STRING? "MasterDetail" name=ID "context" contextRef=[DtoReference] (
// "readonly" (readonly?="true"|"false") ";")? "master" master=DialogueCall ";" "detail"
// detail=DialogueCall ";" ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class MasterDetail_Group extends GroupToken {
	
	public MasterDetail_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group_12(parent, this, 0, inst);
			case 1: return new MasterDetail_SemicolonKeyword_11(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMasterDetailRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class MasterDetail_DescriptionAssignment_0 extends AssignmentToken  {
	
	public MasterDetail_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMasterDetailAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "MasterDetail"
protected class MasterDetail_MasterDetailKeyword_1 extends KeywordToken  {
	
	public MasterDetail_MasterDetailKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterDetailKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class MasterDetail_NameAssignment_2 extends AssignmentToken  {
	
	public MasterDetail_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_MasterDetailKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMasterDetailAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class MasterDetail_ContextKeyword_3 extends KeywordToken  {
	
	public MasterDetail_ContextKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getContextKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contextRef=[DtoReference]
protected class MasterDetail_ContextRefAssignment_4 extends AssignmentToken  {
	
	public MasterDetail_ContextRefAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getContextRefAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ContextKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMasterDetailAccess().getContextRefDtoReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getMasterDetailAccess().getContextRefDtoReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("readonly" (readonly?="true"|"false") ";")?
protected class MasterDetail_Group_5 extends GroupToken {
	
	public MasterDetail_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class MasterDetail_ReadonlyKeyword_5_0 extends KeywordToken  {
	
	public MasterDetail_ReadonlyKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getReadonlyKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ContextRefAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class MasterDetail_Alternatives_5_1 extends AlternativesToken {

	public MasterDetail_Alternatives_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getAlternatives_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyAssignment_5_1_0(parent, this, 0, inst);
			case 1: return new MasterDetail_FalseKeyword_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class MasterDetail_ReadonlyAssignment_5_1_0 extends AssignmentToken  {
	
	public MasterDetail_ReadonlyAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getReadonlyAssignment_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getMasterDetailAccess().getReadonlyTrueKeyword_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class MasterDetail_FalseKeyword_5_1_1 extends KeywordToken  {
	
	public MasterDetail_FalseKeyword_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getFalseKeyword_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ReadonlyKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class MasterDetail_SemicolonKeyword_5_2 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_5_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Alternatives_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "master"
protected class MasterDetail_MasterKeyword_6 extends KeywordToken  {
	
	public MasterDetail_MasterKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group_5(parent, this, 0, inst);
			case 1: return new MasterDetail_ContextRefAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// master=DialogueCall
protected class MasterDetail_MasterAssignment_7 extends AssignmentToken  {
	
	public MasterDetail_MasterAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getMasterAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("master",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("master");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getMasterDialogueCallParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_MasterKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MasterDetail_SemicolonKeyword_8 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_MasterAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "detail"
protected class MasterDetail_DetailKeyword_9 extends KeywordToken  {
	
	public MasterDetail_DetailKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDetailKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// detail=DialogueCall
protected class MasterDetail_DetailAssignment_10 extends AssignmentToken  {
	
	public MasterDetail_DetailAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getDetailAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("detail",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("detail");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getDetailDialogueCallParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_DetailKeyword_9(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MasterDetail_SemicolonKeyword_11 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_DetailAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("processes" "[" (processes+=ProcessCall ";")* "]")?
protected class MasterDetail_Group_12 extends GroupToken {
	
	public MasterDetail_Group_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_RightSquareBracketKeyword_12_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "processes"
protected class MasterDetail_ProcessesKeyword_12_0 extends KeywordToken  {
	
	public MasterDetail_ProcessesKeyword_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getProcessesKeyword_12_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class MasterDetail_LeftSquareBracketKeyword_12_1 extends KeywordToken  {
	
	public MasterDetail_LeftSquareBracketKeyword_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getLeftSquareBracketKeyword_12_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ProcessesKeyword_12_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processes+=ProcessCall ";")*
protected class MasterDetail_Group_12_2 extends GroupToken {
	
	public MasterDetail_Group_12_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getGroup_12_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_SemicolonKeyword_12_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processes+=ProcessCall
protected class MasterDetail_ProcessesAssignment_12_2_0 extends AssignmentToken  {
	
	public MasterDetail_ProcessesAssignment_12_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getProcessesAssignment_12_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMasterDetailAccess().getProcessesProcessCallParserRuleCall_12_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MasterDetail_Group_12_2(parent, next, actIndex, consumed);
			case 1: return new MasterDetail_LeftSquareBracketKeyword_12_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MasterDetail_SemicolonKeyword_12_2_1 extends KeywordToken  {
	
	public MasterDetail_SemicolonKeyword_12_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getSemicolonKeyword_12_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_ProcessesAssignment_12_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class MasterDetail_RightSquareBracketKeyword_12_3 extends KeywordToken  {
	
	public MasterDetail_RightSquareBracketKeyword_12_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMasterDetailAccess().getRightSquareBracketKeyword_12_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MasterDetail_Group_12_2(parent, this, 0, inst);
			case 1: return new MasterDetail_LeftSquareBracketKeyword_12_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule MasterDetail ****************/


/************ begin Rule Process ****************
 *
 * Process:
 *   description=STRING? "process" (type=ProcessType|type=ProcessTypeLink link=
 *   AssociationRoleReference)? name=ID "context" collectionContext?="list"? contextRef=[
 *   DtoReference] (";"|"[" (processElements+=UICall ";")* "]");
 *
 **/

// description=STRING? "process" (type=ProcessType|type=ProcessTypeLink link=
// AssociationRoleReference)? name=ID "context" collectionContext?="list"? contextRef=[
// DtoReference] (";"|"[" (processElements+=UICall ";")* "]")
protected class Process_Group extends GroupToken {
	
	public Process_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_Alternatives_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcessRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class Process_DescriptionAssignment_0 extends AssignmentToken  {
	
	public Process_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "process"
protected class Process_ProcessKeyword_1 extends KeywordToken  {
	
	public Process_ProcessKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessAccess().getProcessKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// (type=ProcessType|type=ProcessTypeLink link=AssociationRoleReference)?
protected class Process_Alternatives_2 extends AlternativesToken {

	public Process_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_TypeAssignment_2_0(parent, this, 0, inst);
			case 1: return new Process_Group_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=ProcessType
protected class Process_TypeAssignment_2_0 extends AssignmentToken  {
	
	public Process_TypeAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessAccess().getTypeAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_ProcessKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getProcessAccess().getTypeProcessTypeEnumRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// type=ProcessTypeLink link=AssociationRoleReference
protected class Process_Group_2_1 extends GroupToken {
	
	public Process_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_LinkAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=ProcessTypeLink
protected class Process_TypeAssignment_2_1_0 extends AssignmentToken  {
	
	public Process_TypeAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessAccess().getTypeAssignment_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_ProcessKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getProcessAccess().getTypeProcessTypeLinkEnumRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// link=AssociationRoleReference
protected class Process_LinkAssignment_2_1_1 extends AssignmentToken  {
	
	public Process_LinkAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessAccess().getLinkAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationRoleReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("link",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("link");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProcessAccess().getLinkAssociationRoleReferenceParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Process_TypeAssignment_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// name=ID
protected class Process_NameAssignment_3 extends AssignmentToken  {
	
	public Process_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_Alternatives_2(parent, this, 0, inst);
			case 1: return new Process_ProcessKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "context"
protected class Process_ContextKeyword_4 extends KeywordToken  {
	
	public Process_ContextKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessAccess().getContextKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// collectionContext?="list"?
protected class Process_CollectionContextAssignment_5 extends AssignmentToken  {
	
	public Process_CollectionContextAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessAccess().getCollectionContextAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_ContextKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collectionContext",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collectionContext");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getProcessAccess().getCollectionContextListKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// contextRef=[DtoReference]
protected class Process_ContextRefAssignment_6 extends AssignmentToken  {
	
	public Process_ContextRefAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessAccess().getContextRefAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_CollectionContextAssignment_5(parent, this, 0, inst);
			case 1: return new Process_ContextKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessAccess().getContextRefDtoReferenceCrossReference_6_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getProcessAccess().getContextRefDtoReferenceCrossReference_6_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"|"[" (processElements+=UICall ";")* "]"
protected class Process_Alternatives_7 extends AlternativesToken {

	public Process_Alternatives_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessAccess().getAlternatives_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_SemicolonKeyword_7_0(parent, this, 0, inst);
			case 1: return new Process_Group_7_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class Process_SemicolonKeyword_7_0 extends KeywordToken  {
	
	public Process_SemicolonKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessAccess().getSemicolonKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_ContextRefAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "[" (processElements+=UICall ";")* "]"
protected class Process_Group_7_1 extends GroupToken {
	
	public Process_Group_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessAccess().getGroup_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_RightSquareBracketKeyword_7_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class Process_LeftSquareBracketKeyword_7_1_0 extends KeywordToken  {
	
	public Process_LeftSquareBracketKeyword_7_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessAccess().getLeftSquareBracketKeyword_7_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_ContextRefAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (processElements+=UICall ";")*
protected class Process_Group_7_1_1 extends GroupToken {
	
	public Process_Group_7_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessAccess().getGroup_7_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_SemicolonKeyword_7_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// processElements+=UICall
protected class Process_ProcessElementsAssignment_7_1_1_0 extends AssignmentToken  {
	
	public Process_ProcessElementsAssignment_7_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessAccess().getProcessElementsAssignment_7_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UICall_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("processElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("processElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUICallRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProcessAccess().getProcessElementsUICallParserRuleCall_7_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Process_Group_7_1_1(parent, next, actIndex, consumed);
			case 1: return new Process_LeftSquareBracketKeyword_7_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Process_SemicolonKeyword_7_1_1_1 extends KeywordToken  {
	
	public Process_SemicolonKeyword_7_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessAccess().getSemicolonKeyword_7_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_ProcessElementsAssignment_7_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class Process_RightSquareBracketKeyword_7_1_2 extends KeywordToken  {
	
	public Process_RightSquareBracketKeyword_7_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessAccess().getRightSquareBracketKeyword_7_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Process_Group_7_1_1(parent, this, 0, inst);
			case 1: return new Process_LeftSquareBracketKeyword_7_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule Process ****************/


/************ begin Rule FormElement ****************
 *
 * FormElement:
 *   description=STRING? "element" references=DtoPropertyReference ("label" label=STRING)
 *   ? ("readonly" (readonly?="true"|"false"))? ";"; 
 * 	
 *   
 * 	  
 * 	 
 * //	("navigate" LinkRef "to")?
 *
 **/

// description=STRING? "element" references=DtoPropertyReference ("label" label=STRING)
// ? ("readonly" (readonly?="true"|"false"))? ";" 
// 	  
// 	 
// //	("navigate" LinkRef "to")?
protected class FormElement_Group extends GroupToken {
	
	public FormElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFormElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class FormElement_DescriptionAssignment_0 extends AssignmentToken  {
	
	public FormElement_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormElementAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "element" 
// 	 
// //	("navigate" LinkRef "to")?
protected class FormElement_ElementKeyword_1 extends KeywordToken  {
	
	public FormElement_ElementKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getElementKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// references=DtoPropertyReference  
// //	("navigate" LinkRef "to")?
protected class FormElement_ReferencesAssignment_2 extends AssignmentToken  {
	
	public FormElement_ReferencesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReferencesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoPropertyReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDtoPropertyReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormElementAccess().getReferencesDtoPropertyReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormElement_ElementKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("label" label=STRING)?
protected class FormElement_Group_3 extends GroupToken {
	
	public FormElement_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_LabelAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "label"
protected class FormElement_LabelKeyword_3_0 extends KeywordToken  {
	
	public FormElement_LabelKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getLabelKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReferencesAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=STRING
protected class FormElement_LabelAssignment_3_1 extends AssignmentToken  {
	
	public FormElement_LabelAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getLabelAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_LabelKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormElementAccess().getLabelSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ("readonly" (readonly?="true"|"false"))?
protected class FormElement_Group_4 extends GroupToken {
	
	public FormElement_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFormElementAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Alternatives_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "readonly"
protected class FormElement_ReadonlyKeyword_4_0 extends KeywordToken  {
	
	public FormElement_ReadonlyKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReadonlyKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group_3(parent, this, 0, inst);
			case 1: return new FormElement_ReferencesAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"|"false"
protected class FormElement_Alternatives_4_1 extends AlternativesToken {

	public FormElement_Alternatives_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getFormElementAccess().getAlternatives_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyAssignment_4_1_0(parent, this, 0, inst);
			case 1: return new FormElement_FalseKeyword_4_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// readonly?="true"
protected class FormElement_ReadonlyAssignment_4_1_0 extends AssignmentToken  {
	
	public FormElement_ReadonlyAssignment_4_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFormElementAccess().getReadonlyAssignment_4_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readonly",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFormElementAccess().getReadonlyTrueKeyword_4_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class FormElement_FalseKeyword_4_1_1 extends KeywordToken  {
	
	public FormElement_FalseKeyword_4_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getFalseKeyword_4_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_ReadonlyKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// ";"
protected class FormElement_SemicolonKeyword_5 extends KeywordToken  {
	
	public FormElement_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFormElementAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormElement_Group_4(parent, this, 0, inst);
			case 1: return new FormElement_Group_3(parent, this, 1, inst);
			case 2: return new FormElement_ReferencesAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FormElement ****************/


/************ begin Rule ActionDialogueCall ****************
 *
 * ActionDialogueCall returns DialogueCall:
 *   contextExp=Expression? "form" referredDialogue=[AbstractDialogue]; 
 * 	
 *     
 *            
 *         
 * //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
 *
 **/

// contextExp=Expression? "form" referredDialogue=[AbstractDialogue] 
//            
//         
// //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
protected class ActionDialogueCall_Group extends GroupToken {
	
	public ActionDialogueCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActionDialogueCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ActionDialogueCall_ReferredDialogueAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActionDialogueCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// contextExp=Expression?
protected class ActionDialogueCall_ContextExpAssignment_0 extends AssignmentToken  {
	
	public ActionDialogueCall_ContextExpAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionDialogueCallAccess().getContextExpAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextExp",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextExp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActionDialogueCallAccess().getContextExpExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "form"
protected class ActionDialogueCall_FormKeyword_1 extends KeywordToken  {
	
	public ActionDialogueCall_FormKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActionDialogueCallAccess().getFormKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ActionDialogueCall_ContextExpAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// referredDialogue=[AbstractDialogue]  
//         
// //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
protected class ActionDialogueCall_ReferredDialogueAssignment_2 extends AssignmentToken  {
	
	public ActionDialogueCall_ReferredDialogueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActionDialogueCallAccess().getReferredDialogueAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ActionDialogueCall_FormKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referredDialogue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referredDialogue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionDialogueCallAccess().getReferredDialogueAbstractDialogueCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getActionDialogueCallAccess().getReferredDialogueAbstractDialogueCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ActionDialogueCall ****************/


/************ begin Rule DialogueCall ****************
 *
 * DialogueCall:
 *   (label=STRING ":")? ("if" "(" condition=OperationExpression ")")? contextExp=
 *   Expression? "form" referredDialogue=[AbstractDialogue]; 
 * 
 *   
 *              
 *                
 *              
 *         
 * //    ("alias" alias = ID)? 
 * //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
 *
 **/

// (label=STRING ":")? ("if" "(" condition=OperationExpression ")")? contextExp=
// Expression? "form" referredDialogue=[AbstractDialogue] 
//              
//                
//              
//         
// //    ("alias" alias = ID)? 
// //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
protected class DialogueCall_Group extends GroupToken {
	
	public DialogueCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_ReferredDialogueAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (label=STRING ":")?
protected class DialogueCall_Group_0 extends GroupToken {
	
	public DialogueCall_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_ColonKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=STRING
protected class DialogueCall_LabelAssignment_0_0 extends AssignmentToken  {
	
	public DialogueCall_LabelAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getLabelAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDialogueCallAccess().getLabelSTRINGTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class DialogueCall_ColonKeyword_0_1 extends KeywordToken  {
	
	public DialogueCall_ColonKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getColonKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_LabelAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("if" "(" condition=OperationExpression ")")?
protected class DialogueCall_Group_1 extends GroupToken {
	
	public DialogueCall_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "if"
protected class DialogueCall_IfKeyword_1_0 extends KeywordToken  {
	
	public DialogueCall_IfKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getIfKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// "("
protected class DialogueCall_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public DialogueCall_LeftParenthesisKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getLeftParenthesisKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_IfKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// condition=OperationExpression
protected class DialogueCall_ConditionAssignment_1_2 extends AssignmentToken  {
	
	public DialogueCall_ConditionAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getConditionAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOperationExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDialogueCallAccess().getConditionOperationExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DialogueCall_LeftParenthesisKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class DialogueCall_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public DialogueCall_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getRightParenthesisKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_ConditionAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// contextExp=Expression?
protected class DialogueCall_ContextExpAssignment_2 extends AssignmentToken  {
	
	public DialogueCall_ContextExpAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getContextExpAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextExp",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextExp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDialogueCallAccess().getContextExpExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DialogueCall_Group_1(parent, next, actIndex, consumed);
			case 1: return new DialogueCall_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// "form"
protected class DialogueCall_FormKeyword_3 extends KeywordToken  {
	
	public DialogueCall_FormKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getFormKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_ContextExpAssignment_2(parent, this, 0, inst);
			case 1: return new DialogueCall_Group_1(parent, this, 1, inst);
			case 2: return new DialogueCall_Group_0(parent, this, 2, inst);
			default: return parent.createParentFollower(this, index, index - 3, inst);
		}	
	}	
		
}

// referredDialogue=[AbstractDialogue]  
//         
// //    ("alias" alias = ID)? 
// //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
protected class DialogueCall_ReferredDialogueAssignment_4 extends AssignmentToken  {
	
	public DialogueCall_ReferredDialogueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDialogueCallAccess().getReferredDialogueAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_FormKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referredDialogue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referredDialogue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDialogueCallAccess().getReferredDialogueAbstractDialogueCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDialogueCallAccess().getReferredDialogueAbstractDialogueCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule DialogueCall ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 *   ServiceExpression|NavigationExpression|StandardExpression|OperationExpression;
 *
 **/

// ServiceExpression|NavigationExpression|StandardExpression|OperationExpression
protected class Expression_Alternatives extends AlternativesToken {

	public Expression_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_ServiceExpressionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Expression_NavigationExpressionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Expression_StandardExpressionParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Expression_OperationExpressionParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ServiceExpression
protected class Expression_ServiceExpressionParserRuleCall_0 extends RuleCallToken {
	
	public Expression_ServiceExpressionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getServiceExpressionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ServiceExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getServiceExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NavigationExpression
protected class Expression_NavigationExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Expression_NavigationExpressionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getNavigationExpressionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NavigationExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNavigationExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StandardExpression
protected class Expression_StandardExpressionParserRuleCall_2 extends RuleCallToken {
	
	public Expression_StandardExpressionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getStandardExpressionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StandardExpression_TypeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StandardExpression_TypeAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStandardExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// OperationExpression
protected class Expression_OperationExpressionParserRuleCall_3 extends RuleCallToken {
	
	public Expression_OperationExpressionParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getOperationExpressionParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OperationExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOperationExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression ****************/


/************ begin Rule ProcessCall ****************
 *
 * ProcessCall:
 *   (label=STRING ":")? ("if" "(" condition=OperationExpression ")")? contextExp=
 *   Expression? "process" referredProcess=[AbstractProcess] ("label" label=ID)?; 
 *    	
 *   
 *              
 *                
 *          
 *            
 *            
 * //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
 *
 **/

// (label=STRING ":")? ("if" "(" condition=OperationExpression ")")? contextExp=
// Expression? "process" referredProcess=[AbstractProcess] ("label" label=ID)? 
//              
//                
//          
//            
//            
// //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
protected class ProcessCall_Group extends GroupToken {
	
	public ProcessCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group_5(parent, this, 0, inst);
			case 1: return new ProcessCall_ReferredProcessAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (label=STRING ":")?
protected class ProcessCall_Group_0 extends GroupToken {
	
	public ProcessCall_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_ColonKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=STRING
protected class ProcessCall_LabelAssignment_0_0 extends AssignmentToken  {
	
	public ProcessCall_LabelAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getLabelAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessCallAccess().getLabelSTRINGTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class ProcessCall_ColonKeyword_0_1 extends KeywordToken  {
	
	public ProcessCall_ColonKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getColonKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_LabelAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("if" "(" condition=OperationExpression ")")?
protected class ProcessCall_Group_1 extends GroupToken {
	
	public ProcessCall_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "if"
protected class ProcessCall_IfKeyword_1_0 extends KeywordToken  {
	
	public ProcessCall_IfKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getIfKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// "("
protected class ProcessCall_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public ProcessCall_LeftParenthesisKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getLeftParenthesisKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_IfKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// condition=OperationExpression
protected class ProcessCall_ConditionAssignment_1_2 extends AssignmentToken  {
	
	public ProcessCall_ConditionAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getConditionAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("condition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOperationExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProcessCallAccess().getConditionOperationExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessCall_LeftParenthesisKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ProcessCall_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public ProcessCall_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getRightParenthesisKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_ConditionAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// contextExp=Expression?
protected class ProcessCall_ContextExpAssignment_2 extends AssignmentToken  {
	
	public ProcessCall_ContextExpAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getContextExpAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contextExp",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contextExp");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProcessCallAccess().getContextExpExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessCall_Group_1(parent, next, actIndex, consumed);
			case 1: return new ProcessCall_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// "process"
protected class ProcessCall_ProcessKeyword_3 extends KeywordToken  {
	
	public ProcessCall_ProcessKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getProcessKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_ContextExpAssignment_2(parent, this, 0, inst);
			case 1: return new ProcessCall_Group_1(parent, this, 1, inst);
			case 2: return new ProcessCall_Group_0(parent, this, 2, inst);
			default: return parent.createParentFollower(this, index, index - 3, inst);
		}	
	}	
		
}

// referredProcess=[AbstractProcess]
protected class ProcessCall_ReferredProcessAssignment_4 extends AssignmentToken  {
	
	public ProcessCall_ReferredProcessAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getReferredProcessAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_ProcessKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referredProcess",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referredProcess");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessCallAccess().getReferredProcessAbstractProcessCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getProcessCallAccess().getReferredProcessAbstractProcessCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("label" label=ID)?
protected class ProcessCall_Group_5 extends GroupToken {
	
	public ProcessCall_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_LabelAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "label"
protected class ProcessCall_LabelKeyword_5_0 extends KeywordToken  {
	
	public ProcessCall_LabelKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getLabelKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_ReferredProcessAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=ID
protected class ProcessCall_LabelAssignment_5_1 extends AssignmentToken  {
	
	public ProcessCall_LabelAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessCallAccess().getLabelAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_LabelKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProcessCallAccess().getLabelIDTerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule ProcessCall ****************/


/************ begin Rule OperationExpression ****************
 *
 * OperationExpression:
 *   "call" name=ID;
 *
 **/

// "call" name=ID
protected class OperationExpression_Group extends GroupToken {
	
	public OperationExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOperationExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOperationExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "call"
protected class OperationExpression_CallKeyword_0 extends KeywordToken  {
	
	public OperationExpression_CallKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOperationExpressionAccess().getCallKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class OperationExpression_NameAssignment_1 extends AssignmentToken  {
	
	public OperationExpression_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationExpressionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OperationExpression_CallKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOperationExpressionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OperationExpression ****************/


/************ begin Rule SimpleProcessCall ****************
 *
 * SimpleProcessCall returns ProcessCall:
 *   referredProcess=[AbstractProcess] ("label" label=STRING)?; 
 *     
 *       
 *         
 * //     name = ID
 *             
 * //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
 *
 **/

// referredProcess=[AbstractProcess] ("label" label=STRING)? 
//         
// //     name = ID
//             
// //    ("(" (arguments += Expression) ("," arguments += Expression)*  ")")?
protected class SimpleProcessCall_Group extends GroupToken {
	
	public SimpleProcessCall_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleProcessCallAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcessCall_Group_1(parent, this, 0, inst);
			case 1: return new SimpleProcessCall_ReferredProcessAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleProcessCallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// referredProcess=[AbstractProcess] 
//         
// //     name = ID
protected class SimpleProcessCall_ReferredProcessAssignment_0 extends AssignmentToken  {
	
	public SimpleProcessCall_ReferredProcessAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleProcessCallAccess().getReferredProcessAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referredProcess",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referredProcess");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleProcessCallAccess().getReferredProcessAbstractProcessCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSimpleProcessCallAccess().getReferredProcessAbstractProcessCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("label" label=STRING)?
protected class SimpleProcessCall_Group_1 extends GroupToken {
	
	public SimpleProcessCall_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleProcessCallAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcessCall_LabelAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "label"
protected class SimpleProcessCall_LabelKeyword_1_0 extends KeywordToken  {
	
	public SimpleProcessCall_LabelKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleProcessCallAccess().getLabelKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcessCall_ReferredProcessAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// label=STRING
protected class SimpleProcessCall_LabelAssignment_1_1 extends AssignmentToken  {
	
	public SimpleProcessCall_LabelAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleProcessCallAccess().getLabelAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProcessCall_LabelKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleProcessCallAccess().getLabelSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule SimpleProcessCall ****************/


/************ begin Rule StandardExpression ****************
 *
 * StandardExpression:
 *   type=ExpressionType;
 *
 **/

// type=ExpressionType
protected class StandardExpression_TypeAssignment extends AssignmentToken  {
	
	public StandardExpression_TypeAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStandardExpressionAccess().getTypeAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStandardExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStandardExpressionAccess().getTypeExpressionTypeEnumRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule StandardExpression ****************/


/************ begin Rule ServiceExpression ****************
 *
 * ServiceExpression:
 *   "service" service=[ServiceReference] "." serviceMethod=ID;
 *
 **/

// "service" service=[ServiceReference] "." serviceMethod=ID
protected class ServiceExpression_Group extends GroupToken {
	
	public ServiceExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_ServiceMethodAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getServiceExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "service"
protected class ServiceExpression_ServiceKeyword_0 extends KeywordToken  {
	
	public ServiceExpression_ServiceKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getServiceKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// service=[ServiceReference]
protected class ServiceExpression_ServiceAssignment_1 extends AssignmentToken  {
	
	public ServiceExpression_ServiceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getServiceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_ServiceKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("service",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("service");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getServiceExpressionAccess().getServiceServiceReferenceCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getServiceExpressionAccess().getServiceServiceReferenceCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class ServiceExpression_FullStopKeyword_2 extends KeywordToken  {
	
	public ServiceExpression_FullStopKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getFullStopKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_ServiceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// serviceMethod=ID
protected class ServiceExpression_ServiceMethodAssignment_3 extends AssignmentToken  {
	
	public ServiceExpression_ServiceMethodAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceExpressionAccess().getServiceMethodAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceExpression_FullStopKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("serviceMethod",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("serviceMethod");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceExpressionAccess().getServiceMethodIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ServiceExpression ****************/


/************ begin Rule NavigationExpression ****************
 *
 * NavigationExpression:
 *   composition?="composite"? "navigate" references+=AssociationRoleReference; 
 * 
 *   
 *                   
 * // TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
 *
 **/

// composition?="composite"? "navigate" references+=AssociationRoleReference 
//                   
// // TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
protected class NavigationExpression_Group extends GroupToken {
	
	public NavigationExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_ReferencesAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNavigationExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// composition?="composite"?
protected class NavigationExpression_CompositionAssignment_0 extends AssignmentToken  {
	
	public NavigationExpression_CompositionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getCompositionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("composition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("composition");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getNavigationExpressionAccess().getCompositionCompositeKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "navigate"
protected class NavigationExpression_NavigateKeyword_1 extends KeywordToken  {
	
	public NavigationExpression_NavigateKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getNavigateKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NavigationExpression_CompositionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// references+=AssociationRoleReference         
// // TODO: Only single reference for now, should become multiple    ( "." references += AssociationRoleReference ) *
protected class NavigationExpression_ReferencesAssignment_2 extends AssignmentToken  {
	
	public NavigationExpression_ReferencesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNavigationExpressionAccess().getReferencesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationRoleReference_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNavigationExpressionAccess().getReferencesAssociationRoleReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NavigationExpression_NavigateKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NavigationExpression ****************/


/************ begin Rule DtoPropertyReference ****************
 *
 * DtoPropertyReference:
 *   name=ID;
 *
 **/

// name=ID
protected class DtoPropertyReference_NameAssignment extends AssignmentToken  {
	
	public DtoPropertyReference_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoPropertyReferenceAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoPropertyReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoPropertyReferenceAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DtoPropertyReference ****************/


/************ begin Rule AssociationRoleReference ****************
 *
 * AssociationRoleReference:
 *   name=ID;
 *
 **/

// name=ID
protected class AssociationRoleReference_NameAssignment extends AssignmentToken  {
	
	public AssociationRoleReference_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationRoleReferenceAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssociationRoleReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationRoleReferenceAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule AssociationRoleReference ****************/


/************ begin Rule UICall ****************
 *
 * UICall:
 *   DialogueCall|ProcessCall;
 *
 **/

// DialogueCall|ProcessCall
protected class UICall_Alternatives extends AlternativesToken {

	public UICall_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUICallAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UICall_DialogueCallParserRuleCall_0(parent, this, 0, inst);
			case 1: return new UICall_ProcessCallParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUICallRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DialogueCall
protected class UICall_DialogueCallParserRuleCall_0 extends RuleCallToken {
	
	public UICall_DialogueCallParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUICallAccess().getDialogueCallParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DialogueCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DialogueCall_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDialogueCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ProcessCall
protected class UICall_ProcessCallParserRuleCall_1 extends RuleCallToken {
	
	public UICall_ProcessCallParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getUICallAccess().getProcessCallParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProcessCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ProcessCall_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getProcessCallRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UICall ****************/

}
