/*
* generated by Xtext
*/
package org.mod4j.dsl.presentation.xtext.contentassist;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor;
import org.mod4j.crossx.broker.CrossxBroker;
import org.mod4j.crossx.mm.crossx.ModelInfo;
import org.mod4j.crossx.mm.crossx.Symbol;
import org.mod4j.dsl.presentation.mm.PresentationDsl.DialogueReference;
import org.mod4j.dsl.presentation.mm.PresentationDsl.DtoReference;
import org.mod4j.dsl.presentation.mm.PresentationDsl.ExternalReference;
import org.mod4j.dsl.presentation.mm.PresentationDsl.ProcessReference;
import org.mod4j.dsl.presentation.mm.PresentationDsl.ServiceReference;
import org.mod4j.dsl.presentation.xtext.scoping.PresentationProposals;
import org.mod4j.eclipse.util.EclipseUtil;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class PresentationProposalProvider extends AbstractPresentationProposalProvider {

    /**
     * Get rid of the "Name - ID" default proposals
     */
    @Override
    protected boolean doCreateIdProposals(){
        return false;
    }

    /**
     * Get rid of the "Description" default proposals
     */
    @Override
    protected boolean doCreateStringProposals(){
        return false;
    }
    
    /** 
     * Limit the keywords shown for "from <model> ***  based on the type of model that has been typed.
     */
    @Override
    public void completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext, ICompletionProposalAcceptor acceptor) {
//        System.out.println("completeKeyword '" + keyword.getValue()+ "' for model '" + contentAssistContext.getCurrentModel()
//                + "' and getCurrentNode()'"+ contentAssistContext.getCurrentNode().getParent().getElement() + "'");
        EObject element = contentAssistContext.getCurrentNode().getParent().getElement();
        String keyValue = keyword.getValue();
        if( (element instanceof DtoReference) ){
            if( keyValue.equals("dto") ){
                acceptKeywordProposal(keyword, contentAssistContext, acceptor);
                return;
            }
        } else if( element instanceof ServiceReference ){
            if( keyValue.equals("service") ){
                acceptKeywordProposal(keyword, contentAssistContext, acceptor);
                return;
            }
        } else if( element instanceof ProcessReference ){
            if( keyValue.equals("form") || keyValue.equals("process") ){
                acceptKeywordProposal(keyword, contentAssistContext, acceptor);
                return;
            }
        } else if( element instanceof DialogueReference ){
            if( keyValue.equals("form") || keyValue.equals("process") ){
                acceptKeywordProposal(keyword, contentAssistContext, acceptor);
                return;
            }
        } else {
            acceptKeywordProposal(keyword, contentAssistContext, acceptor);
        }
    }

    // accept the keyword as proposal
    private void acceptKeywordProposal(Keyword keyword, ContentAssistContext contentAssistContext,
            ICompletionProposalAcceptor acceptor) {
        ICompletionProposal proposal = createCompletionProposal(keyword, keyword.getValue(), contentAssistContext);
        adjustPriority(proposal, contentAssistContext.getPrefix(), getKeywordPriority());
        acceptor.accept(proposal);
    }


    @Override
    public void completeDtoReference_ModelName(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        List<ModelInfo> models = CrossxBroker.findAllModelsInProject(EclipseUtil.getProjectName(context.getRootModel()), Arrays.asList("DataContractDsl") );
        for (ModelInfo foundModel : models) {
            propose(foundModel.getModelname(), context, acceptor);
        }
    }

    @Override
    public void completeDtoReference_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        ExternalReference externalReference = (ExternalReference)model;
        List<Symbol> symbols = CrossxBroker.findAllFromModel(externalReference.getModelName(), "Dto");
        for (Symbol symbol : symbols) {
            propose(symbol.getName(), context, acceptor);
        }
    }

    @Override
    public void completeServiceReference_ModelName(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        List<ModelInfo> models = CrossxBroker.findAllModelsInProject(EclipseUtil.getProjectName(context.getRootModel()), Arrays.asList("ServiceDsl") );
        for (ModelInfo foundModel : models) {
            propose(foundModel.getModelname(), context, acceptor);
        }
    }

    @Override
    public void completeServiceReference_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        ExternalReference externalReference = (ExternalReference)model;
        List<Symbol> symbols = CrossxBroker.findAllFromModel(externalReference.getModelName(), "Service");
        // There is only one Service in a model !
        Symbol service = symbols.get(0);
        List<Symbol> methods = service.getSubSymbols();
        for (Symbol symbol : methods) {
            propose(symbol.getName(), context, acceptor);
        }
    }

    @Override
    public void completeProcessReference_ModelName(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        List<ModelInfo> models = CrossxBroker.findAllModelsInProject(EclipseUtil.getProjectName(context.getRootModel()), Arrays.asList("PresentationDsl") );
        for (ModelInfo foundModel : models) {
            propose(foundModel.getModelname(), context, acceptor);
        }
    }

    @Override
    public void completeProcessReference_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        ExternalReference externalReference = (ExternalReference)model;
        List<Symbol> symbols = CrossxBroker.findAllFromModel(externalReference.getModelName(), Arrays.asList("Process"));
        for (Symbol symbol : symbols) {
            propose(symbol.getName(), context, acceptor);
        }
    }

    @Override
    public void completeDialogueReference_ModelName(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        List<ModelInfo> models = CrossxBroker.findAllModelsInProject(EclipseUtil.getProjectName(context.getRootModel()), Arrays.asList("PresentationDsl") );
        for (ModelInfo foundModel : models) {
            propose(foundModel.getModelname(), context, acceptor);
        }
    }

    @Override
    public void completeDialogueReference_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        ExternalReference externalReference = (ExternalReference)model;
        List<Symbol> symbols = CrossxBroker.findAllFromModel(externalReference.getModelName(), Arrays.asList("Form"));
        for (Symbol symbol : symbols) {
            propose(symbol.getName(), context, acceptor);
        }
    }


    /**
     * collect the DtoProperties belonging to the Dto in the context of the given FormElement
     */
    @Override public void completeDtoPropertyReference_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        List<String> propoals = PresentationProposals.getFormElementReferenceProposals(model);
        for (String name : propoals) {
            propose(name, context, acceptor);
        }
    }

//    @Override public void completeAssociationRoleReference_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        List<String> names = PresentationProposals.getLinkStepReferencesProposals(model);
//        for (String name : names) {
//            propose(name, context, acceptor);
//        }
//    }
    
//    @Override public void completeLinkRef_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        List<String> names = PresentationProposals.getLinkReferenceProposals(model);
//        for (String name : names) {
//            propose(name, context, acceptor);
//        }
//    }

//    @Override public void complete_LinkedDialogueCall(EObject model, org.eclipse.xtext.RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        List<String> names = PresentationProposals.getLinkedDialogueCallProposals(model, new ArrayList<String>());        
//        for (String name : names) {
//            propose(name, context, acceptor);
//        }
//    }

//    @Override public void completeLinkedDialogueCall_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        List<String> names = PresentationProposals.getLinkedDialogueCallProposals(model, new ArrayList<String>());        
//        for (String name : names) {
//            propose(name, context, acceptor);
//        }
//    }
    
//    @Override public void completeLinkedProcessCall_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//        List<String> names = PresentationProposals.getLinkedProcessCallProposals(model, new ArrayList<String>());        
//        for (String name : names) {
//            propose(name, context, acceptor);
//        }
//    }
    
    /** Create and register the proposal
     * 
     * @param name
     * @param context
     * @param acceptor
     */
    public void propose(String name, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
        String proposal = name;
        proposal = getValueConverter().toString(proposal, "reference");
        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
        acceptor.accept(completionProposal);
    }
    
}
