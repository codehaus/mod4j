«REM»
	  Copyright (c) 2009 Ordina and committers to Mod4j
	  All rights reserved. This program and the accompanying materials
	  are made available under the terms of the Eclipse Public License v1.0
	  which accompanies this distribution, and is available at
	  http://www.eclipse.org/legal/epl-v10.html
	 
	  Contributors:
	      Ordina - initial implementation
«ENDREM»
«IMPORT DataContractDsl»

«EXTENSION org::mod4j::dsl::datacontract::generator::xtend::Dto»

«DEFINE instanceVariable FOR DtoProperty»
    «EXPAND Javadoc::addInstanceVarJavaDoc FOR this -»
    private «javaType(this)» «name»;
«ENDDEFINE»

«DEFINE addGetter FOR DtoProperty»
	/**
	*
	* @return «name» («javaType(this)») «description»
	*/
	public «javaType(this)» get«name.toFirstUpper()» () {
   		return this.«name»;
	}
«ENDDEFINE»

«DEFINE addGetter FOR DtoBooleanProperty»
	/**
	*
	* @return «name» («javaType(this)») «description»
	*/
	public «javaType(this)» is«name.toFirstUpper()» () {
   		return this.«name»;
	}
«ENDDEFINE»

«DEFINE addSetter FOR DtoProperty»
   «EXPAND Javadoc::addSetterJavaDoc FOR this -»
    public void set«name.toFirstUpper()» (final «javaType(this)» «name») {
        this.«name» = «name»;
    }
«ENDDEFINE»

«DEFINE addAttribute FOR DtoProperty»
    /**
     *  Unknown Property type. It is not a subclass of Property or it is not expanded by this generator.
     *  Name: «name» 
     *  Description: «description»
     */
«ENDDEFINE»

«DEFINE addIdAttribute FOR Dto»
    /**
     *  id: The identifier of this object.
     */
     private Long id;
«ENDDEFINE»

«DEFINE addIdAccessors FOR Dto»
    /**
     *
     * @return id (Long) The identifier of this object.
     */
     public Long getId() {
         return this.id;
     }
    /**
     *
     * @param id (Long) The identifier of this object.
     */
     public void setId(Long id) {
         this.id = id;
     }
«ENDDEFINE»

«DEFINE instanceVariableNew(DtoAssociationRoleProperty associationRole) FOR Dto»
    «REM»Nothing to xpand«ENDREM»
«ENDDEFINE»

«DEFINE instanceVariableNew(DtoAssociationRoleProperty associationRole) FOR ListDto»
    «EXPAND Javadoc::addInstanceVarJavaDoc FOR this -»
    «IF associationRole.ordered»
        // ORDERED     
        private List<«baseDto.name.toFirstUpper()»> «associationRole.name» = new ArrayList<«baseDto.name.toFirstUpper()»>();
    «ELSE »
        private Set<«baseDto.name.toFirstUpper()»> «associationRole.name» = new HashSet<«baseDto.name.toFirstUpper()»>();
    «ENDIF»
«ENDDEFINE»

«DEFINE instanceVariableNew(DtoAssociationRoleProperty associationRole) FOR BusinessClassDto»
    «EXPAND Javadoc::addInstanceVarJavaDoc FOR this -»
    private «name.toFirstUpper()» «associationRole.name» = null;
«ENDDEFINE»


«DEFINE addAssociationRoleAccessors(DtoAssociationRoleProperty associationRole) FOR Dto»
    «REM»Nothing to xpand, is there to allow polymorfic call of this operation.«ENDREM»
«ENDDEFINE»

«DEFINE addAssociationRoleAccessors(DtoAssociationRoleProperty associationRole) FOR ListDto»
    «IF associationRole.ordered»
        «EXPAND addAssociationRoleAccessorsOrdered(associationRole) FOR this»
    «ELSE»
        «EXPAND addAssociationRoleAccessorsUnOrdered(associationRole) FOR this»
    «ENDIF»
«ENDDEFINE»

«DEFINE addAssociationRoleAccessorsUnOrdered(DtoAssociationRoleProperty associationRole) FOR ListDto»
	/**
	 * @return «associationRole.name» (Set<«baseDto.name.toFirstUpper()»>) 
	 */
	public Set<«baseDto.name.toFirstUpper()»> get«associationRole.name.toFirstUpper()»() {
		return Collections.unmodifiableSet(this.«associationRole.name»);
	}

    «EXPAND addToCollection(associationRole.name) FOR this»

	/**
	 * Removes a single element from the «associationRole.name» collection.
	 * 
	 * @param element The element to be removed.
	 */
	public void removeFrom«associationRole.name.toFirstUpper()»(«baseDto.name.toFirstUpper()» element) {

		if (element == null) {
			return;
		}
		this.«associationRole.name».remove(element);
	}
«ENDDEFINE»

«DEFINE addAssociationRoleAccessorsOrdered(DtoAssociationRoleProperty associationRole) FOR ListDto»
	/** ORDERED
	 * @return «associationRole.name» (List<«baseDto.name.toFirstUpper()»>) 
	 */
	public List<«baseDto.name.toFirstUpper()»> get«associationRole.name.toFirstUpper()»() {
		return Collections.unmodifiableList(this.«associationRole.name»);
	}

    «EXPAND addToCollection(associationRole.name) FOR this»

	/** ORDERED
	 * Removes a single element from the «associationRole.name» collection.
	 * 
	 * @param element The element to be removed.
	 */
	public void removeFrom«associationRole.name.toFirstUpper()»(«baseDto.name.toFirstUpper()» element) {

		if (element == null) {
			return;
		}
		this.«associationRole.name».remove(element);
	}
«ENDDEFINE»

«DEFINE addAssociationRoleAccessors(DtoAssociationRoleProperty associationRole) FOR BusinessClassDto»
    /**
	 * @return «name» («name.toFirstUpper()») «description»
	 */
	 public «name.toFirstUpper()» get«associationRole.name.toFirstUpper()» () {
   	 	return this.«associationRole.name»;
	 }
	
	/**  
	 * @param «associationRole.name» («name.toFirstUpper()») «description»
	 */
     public void set«associationRole.name.toFirstUpper()» (final «name.toFirstUpper()» «associationRole.name») {
         this.«associationRole.name» = «associationRole.name»;
     }
«ENDDEFINE»

«DEFINE addToCollection(String associationRolName) FOR ListDto»
    /**
     * Adds a single element to the «associationRolName» collection
     *
     * @param element The element to add.
     */
    public void addTo«associationRolName.toFirstUpper()»(«baseDto.name.toFirstUpper()» element) {

        if (element == null || this.«associationRolName».contains(element)) {
            return;
        }
        this.«associationRolName».add(element);
    }
«ENDDEFINE»