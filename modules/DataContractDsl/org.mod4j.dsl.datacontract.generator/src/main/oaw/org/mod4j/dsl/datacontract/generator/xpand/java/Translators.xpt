«IMPORT DataContractDsl»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::dsl::datacontract::generator::xtend::Dto»

«DEFINE createTranslator FOR Dto»
    «REM»No generation for this super type«ENDREM»
«ENDDEFINE»

«DEFINE createTranslator FOR BusinessClassDto»
    «FILE generate(javaPathFileName(getTranslatorsPackage(), javaTranslatorName(javaClassName(name))))»
        /**
         * Generated by Mod4j DataContract DSL in Translators.xpt at: «timestamp()»
         */
         package «getTranslatorsPackage()»;
         
         import «getDomainRootPackage()».«javaClassName(base.name)»;
         import «getDtoPackage()».«javaClassName(name)»;
         
        /**
         * «description»
         *
         * @author generated by Mod4j
         */
         public class «javaTranslatorName(javaClassName(name))» {
           
            /**
             * @param source The {@link «javaClassName(name)»} object to translate.
             * @param target The {@link «javaClassName(base.name)»} object translated from source.
             */
             public void fromDto(final «javaClassName(name)» source, «javaClassName(base.name)» target){
                 «FOREACH properties.typeSelect(DtoDataProperty) AS dataProperty -»
                     target.set«javaClassName(dataProperty.name)»(source.«getterPrefix(dataProperty)»«javaClassName(dataProperty.name)»());
                 «ENDFOREACH»
             }
             
            /**
             * @param source The {@link «javaClassName(base.name)»} object to translate.
             * @return «javaClassName(name)» The {@link «javaClassName(name)»} object translated from source.
             */
             public «javaClassName(name)» toDto(final «javaClassName(base.name)» source){
                 
                 «javaClassName(name)» result = new «javaClassName(name)»();
                 
                 result.setId(source.getId());
                 «FOREACH properties.typeSelect(DtoDataProperty) AS dataProperty -»
                     result.set«javaClassName(dataProperty.name)»(source.«getterPrefix(dataProperty)»«javaClassName(dataProperty.name)»());
                 «ENDFOREACH»
                 return result;
             }
         }
    «ENDFILE»
«ENDDEFINE»