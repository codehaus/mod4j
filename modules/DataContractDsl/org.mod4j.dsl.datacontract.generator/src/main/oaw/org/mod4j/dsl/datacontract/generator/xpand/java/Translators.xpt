«IMPORT DataContractDsl»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::dsl::datacontract::generator::xtend::Dto»

«DEFINE createTranslator FOR Dto»
    «REM»No generation for this super type«ENDREM»
«ENDDEFINE»

«DEFINE createTranslator FOR BusinessClassDto»
    «FILE generate(javaPathFileName(getTranslatorsPackage(), javaTranslatorName(javaClassName(name))))»
        /**
         * Generated by Mod4j DataContract DSL in Translators.xpt at: «timestamp()»
         */
         package «getTranslatorsPackage()»;
         
         import «getDomainRootPackage()».«javaClassName(base.name)»;
         import «getDtoPackage()».«javaClassName(name)»;
         «FOREACH properties.typeSelect(DtoEnumerationProperty) AS enumDto -»
             import «getDomainRootPackage()».«javaClassName(enumDto.type.base.name)»;
             import «getDtoPackage()».«javaClassName(enumDto.type.name)»;
         «ENDFOREACH»
         «FOREACH associationReferences AS assRef -»    
             import «getDomainRootPackage()».«EXPAND getBaseDtoBaseName FOR assRef.dtoType -»;
             import «getDtoPackage()».«EXPAND getBaseDtoName FOR assRef.dtoType -»;
         «ENDFOREACH»  
         
        /**
         * «description»
         *
         * @author generated by Mod4j
         */
         public class «javaTranslatorName(javaClassName(name))» {
         
         «FOREACH associationReferences AS assRef -»    
             «EXPAND getBaseDtoName FOR assRef.dtoType»Translator «assRef.name»Translator = new «EXPAND getBaseDtoName FOR assRef.dtoType»Translator();
         «ENDFOREACH»  
             /**
              * Translates a dto object into a business class. All properties in the dto will be mapped to the 
              * corresponding property in the <code>target</code> business class. Association references in the dto 
              * wil not be translated into the <code>target</code> bussiness class.
              * If the given <code>target</code> parameter is null, a«IF this.creatable» new business class will be created and returned«ELSE»NullPointerException is thrown«ENDIF».
              *
              * @param source The {@link «javaClassName(name)»} object to translate.
              * @param target The {@link «javaClassName(base.name)»} object translated from source.
              *
              * @return {@link «javaClassName(base.name)»}, the resulting business class.
              */
              public «javaClassName(base.name)» fromDto(final «javaClassName(name)» source, «javaClassName(base.name)» target){
                 
                  «IF this.creatable»
                      if (target == null) {
                          target = new «javaClassName(base.name)»(«EXPAND Constructors::addConstructorArgumentsList -»);
                      }
                  «ELSE»
                      if (target == null ) {
                          throw new NullPointerException("Parameter target is null! Translation of the source dto must be based on a existing target business class");
                      }
                  «ENDIF»                  
                  «FOREACH properties.typeSelect(DtoDataProperty) AS dataProperty -»
                      «IF dataProperty.metaType == DtoEnumerationProperty -»
                          target.set«javaClassName(dataProperty.name)»(«javaClassName(((DtoEnumerationProperty)dataProperty).type.base.name)».value(source.get«javaClassName(dataProperty.name)»().id()));
                      «ELSE»
                          target.set«javaClassName(dataProperty.name)»(source.«getterPrefix(dataProperty)»«javaClassName(dataProperty.name)»());
                      «ENDIF -»
                  «ENDFOREACH»
                  
                  return target;
              }
             
             /**
              * @param source The {@link «javaClassName(base.name)»} object to translate.
              * @return «javaClassName(name)» The {@link «javaClassName(name)»} object translated from source.
              */
              public «javaClassName(name)» toDto(final «javaClassName(base.name)» source){
                 
                  «javaClassName(name)» result = new «javaClassName(name)»();
                 
                  result.setId(source.getId());
                  «FOREACH properties.typeSelect(DtoDataProperty) AS dataProperty -»
                      «IF dataProperty.metaType == DtoEnumerationProperty -»
                          result.set«javaClassName(dataProperty.name)»(«javaClassName(((DtoEnumerationProperty)dataProperty).type.name)».value(source.get«javaClassName(dataProperty.name)»().id()));
                      «ELSE»
                          result.set«javaClassName(dataProperty.name)»(source.«getterPrefix(dataProperty)»«javaClassName(dataProperty.name)»());
                      «ENDIF»
                  «ENDFOREACH»
                  «FOREACH associationReferences AS assRef -»
                     «IF assRef.dtoType.metaType == ListDto -»
                         «REM»2Many«ENDREM» 		              
 		                  for («EXPAND getBaseDtoBaseName FOR assRef.dtoType» element: source.get«assRef.name.toFirstUpper()»()) {
		                      result.addTo«assRef.name.toFirstUpper()»(«assRef.name»Translator.toDto(element));
		                  }
		             «ELSE»
		                 «REM»2One«ENDREM»
		                 result.set«assRef.name.toFirstUpper()»(«assRef.name»Translator.toDto(source.get«assRef.name.toFirstUpper()»()));
		             «ENDIF»
		          «ENDFOREACH»
                  return result;
              }
          }
    «ENDFILE»
«ENDDEFINE»

«DEFINE getBaseDtoName FOR Dto -»
    «REM»Nothing to generate for this superclass«ENDREM»
«ENDDEFINE»

«DEFINE getBaseDtoName FOR ListDto -»
    «javaClassName(baseDto.name) -»
«ENDDEFINE»

«DEFINE getBaseDtoName FOR BusinessClassDto -»
    «javaClassName(name) -»
«ENDDEFINE»

«DEFINE getBaseDtoName FOR ListDto -»
    «javaClassName(baseDto.name) -»
«ENDDEFINE»

«DEFINE getBaseDtoBaseName FOR Dto -»
    «REM»Nothing to generate for this superclass«ENDREM»
«ENDDEFINE»

«DEFINE getBaseDtoBaseName FOR BusinessClassDto -»
    «javaClassName(base.name) -»
«ENDDEFINE»

«DEFINE getBaseDtoBaseName FOR ListDto -»
    «EXPAND getBaseDtoBaseName FOR baseDto -»
«ENDDEFINE»