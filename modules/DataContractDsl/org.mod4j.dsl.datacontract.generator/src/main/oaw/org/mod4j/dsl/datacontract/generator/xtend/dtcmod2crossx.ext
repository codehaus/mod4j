/* 
   This file contains the code to create a Crossx model from a BusinesDomainDsl model.
   Needed for crosssreference purposes.
*/

import crossx;
import DataContractDsl;

create ModelInfo exportModel(DataContractModel dtcModel, String modelFile) :
    this.setDslname("DataContractDsl")->
    this.setModelname(dtcModel.name)->
    this.setResource(modelFile)->
    this.symbols.addAll(dtcModel.dtos.toElement())->
    this.symbols.addAll(dtcModel.enumerations.toElement());
        
create Symbol toElement(EnumerationDto dto) :
    this.setName(dto.name) ->
    this.setType("EnumerationDto")
    ;

create Symbol toElement(Dto dto) :
    this.setName(dto.name) ->
    this.setType("Dto") ->
    this.properties.add( newProperty(dto) ) 
    ;

create Symbol toElement(ListDto dto) :
    this.setName(dto.name) ->
    this.setType("Dto") ->
    this.properties.add( newProperty(dto) ) ->
    this.properties.add( baseProperty(dto) ) 
   ;

create Symbol toElement(BusinessClassDto dto) :
    this.setName(dto.name) ->
    this.setType("Dto") ->
    this.properties.add( newProperty(dto) ) ->
    this.properties.add( businessClassProperty(dto) )->
    this.properties.add( newProperty("Creatable", (dto.creatable ? "true" : "false" ) ))
    ;

create LiteralSymbolProperty newProperty(Dto dto) :
    this.setName("dtoType")->
    switch( dto.metaType ){
        case DataContractDsl::ListDto          : this.setValue("ListDto")
        case DataContractDsl::BusinessClassDto : this.setValue("BusinessClassDto")
        case DataContractDsl::CustomDto        : this.setValue("CustomDto")
        default : this.setValue("UNKNOWN")
    }
    ;

create LiteralSymbolProperty baseProperty(ListDto dto) :
    this.setName("baseDto")->
    this.setValue(dto.baseDto.name)
    ;
    
create LiteralSymbolProperty businessClassProperty(BusinessClassDto dto) :
    this.setName("businessClass")->
    this.setValue(dto.base.name)
    ;

crossx::LiteralSymbolProperty newProperty(String name, String value) :
    let result = new LiteralSymbolProperty :
    result.setName(name)->
    result.setValue(value)->
    result
    ;
    
    