/*******************************************************************************
 * Copyright (c) 2009 Ordina and committers to Mod4j
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Ordina - initial implementation
 *******************************************************************************/
import datacontractdsl;
import codeassist;
import emf;
import crossx;
 
extension org::mod4j::dsl::datacontract::xtext::Extensions;
extension org::mod4j::dsl::datacontract::xtext::GenContentAssist reexport;
//extension org::mod4j::dsl::datacontract::xtext::EclipseUtil;
extension org::mod4j::eclipse::xtend::EclipseUtil;
extension org::mod4j::crossx::broker::xtend::Crossx;

List[String] getBusinessClassReferenceProposals(emf::EObject ctx) : JAVA
    org.mod4j.dsl.datacontract.xtext.Proposals.getBusinessClassReferenceProposals(org.eclipse.emf.ecore.EObject);
    
List[String] getBusinessClassAssociationRoleReferenceProposals(emf::EObject ctx) : JAVA
    org.mod4j.dsl.datacontract.xtext.Proposals.getBusinessClassAssociationRoleReferenceProposals(org.eclipse.emf.ecore.EObject);

List[String] getBusinessClassAssociationReferenceDtoProposals(emf::EObject ctx) : JAVA
    org.mod4j.dsl.datacontract.xtext.Proposals.getBusinessClassAssociationReferenceDtoProposals(org.eclipse.emf.ecore.EObject);
    
List[String] getBusinessClassBaseProposals(emf::EObject ctx) : JAVA
    org.mod4j.dsl.datacontract.xtext.Proposals.getBusinessClassBaseProposals(org.eclipse.emf.ecore.EObject);
    
List[String] getEnumerationBaseProposals(emf::EObject ctx) : JAVA
    org.mod4j.dsl.datacontract.xtext.Proposals.getEnumerationBaseProposals(org.eclipse.emf.ecore.EObject);
    
/* proposals for ListDto::baseDto */
List[Proposal] completeListDto_baseDto(emf::EObject ctx, String prefix) :
    let current = (DataContractDsl::Dto)ctx :
	current.datacontractModel.dtos.select(d | d != ctx).collect(x | newProposal(x.name));
//	ctx.allVisibleElements().typeSelect(DataContractDsl::Dto).collect(x|newProposal(x.label(),x.id(),x.image()));


/*
 * There are two types of extensions one can define
 *
 * completeMetaType_feature(ModelElement ele, String prefix)
 * This one is called for assignments only. It gets the underlying Modelelement and the current prefix passed in.
 *
 * Note that only proposals with 'Proposal.toInsert.toLowerCase().startsWith(prefix.toLowerCase())' will be proposed in the editor
 * 
 * you can sort and/or filter the proposals by overwriting 'List[Proposal] sortProposals(List[Proposal] proposalsToSort)'
 */

/* proposals for Feature ExternalReference::modelname */
List[Proposal] completeExternalReference_modelname(emf::EObject ctx, String prefix) :
	findAllModelsInProject( ctx.getProjectName()).select(m | m.dslname == "BusinessDomainDsl").modelname .collect(x|newProposal(x)) ;
 
/* proposals for Feature BusinessClassReference::name */
List[Proposal] completeExternalReference_name(emf::EObject ctx, String prefix) :
	findAllFromModel( ((DataContractDsl::ExternalReference)ctx).modelname, "BusinessClass").name.union(
	findAllFromModel( ((DataContractDsl::ExternalReference)ctx).modelname, "Enumeration").name).
	          collect(x|newProposal(x)); //.add(newProposal("empty"));

/* proposals for BusinessClassDto::base */
List[Proposal] completeBusinessClassDto_base(emf::EObject ctx, String prefix) :
    getBusinessClassBaseProposals(ctx).collect(p |  newProposal( p) );

/* proposals for EnumerationDto::base */
List[Proposal] completeEnumerationDto_base(emf::EObject ctx, String prefix) :
    getEnumerationBaseProposals(ctx).collect(p |  newProposal( p) );

/* proposals for Feature BusinessClassDto::properties */
List[Proposal] completeBusinessClassDto_propertyReferences(emf::EObject ctx, String prefix) :
    getBusinessClassReferenceProposals(ctx).collect(p |  newProposal( p) )
	;

/* proposals for Feature BusinessClassAssociationRoleReference::name */
List[Proposal] completeBusinessClassAssociationRoleReference_name(emf::EObject ctx, String prefix) :
    getBusinessClassAssociationRoleReferenceProposals(ctx).collect(p |  newProposal( p) )
    ;

/* proposals for BusinessClassAssociationRoleReference::dtoType */
List[Proposal] completeBusinessClassAssociationRoleReference_dtoType(emf::EObject ctx, String prefix) :
    getBusinessClassAssociationReferenceDtoProposals(ctx).collect(p |  newProposal( p) )
    ;

	
// GET RID OF ALL THE DESCRIPTION PROPOSALS
/* proposals for Feature DataContractModel::description */
List[Proposal] completeDataContractModel_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature DtoProperty::description */
List[Proposal] completeDtoProperty_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature ExternalReference::description */
List[Proposal] completeExternalReference_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature ListDto::description */
List[Proposal] completeListDto_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature CustomDto::description */
List[Proposal] completeCustomDto_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature BusinessClassDto::description */
List[Proposal] completeBusinessClassDto_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature EnumerationDto::description */
List[Proposal] completeEnumerationDto_description(emf::EObject ctx, String prefix) :
	{};

/** Filter out all proiposals that end with Description. 
 *  This eliminates the descritions from all proposals.
 *  Also put a space at the end of all proposals
 *  Leave out the default BusinessClassPropertyReferenceName propsal
 */
List[Proposal] sortProposals(List[Proposal] proposalsToSort):
	proposalsToSort.select( p | p.label != "BusinessClassPropertyReferenceName")
    .reject(p | p.label.endsWith("Description"))
    .select(p | (! p.toInsert.endsWith(" ") ? p.setToInsert(p.toInsert + " ") : null)->true)
	;
	