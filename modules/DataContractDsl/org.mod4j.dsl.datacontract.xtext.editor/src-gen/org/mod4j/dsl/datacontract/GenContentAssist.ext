import DataContractDsl;
import codeassist;

extension org::mod4j::dsl::datacontract::EditorExtensions;

/* proposals for Feature CustomDto::name */
List[Proposal] completeCustomDto_name(emf::EObject ctx, String prefix) :
	{newProposal("CustomDtoName")};

/* proposals for Feature DataContractModel::name */
List[Proposal] completeDataContractModel_name(emf::EObject ctx, String prefix) :
	{newProposal("DataContractModelName")};

/* proposals for Feature StringProperty::description */
List[Proposal] completeStringProperty_description(emf::EObject ctx, String prefix) :
	{newProposal("StringPropertyDescription")};

/* proposals for Feature ListDto::name */
List[Proposal] completeListDto_name(emf::EObject ctx, String prefix) :
	{newProposal("ListDtoName")};

/* proposals for Feature BooleanProperty::description */
List[Proposal] completeBooleanProperty_description(emf::EObject ctx, String prefix) :
	{newProposal("BooleanPropertyDescription")};

/* proposals for Feature DomainClassDto::name */
List[Proposal] completeDomainClassDto_name(emf::EObject ctx, String prefix) :
	{newProposal("DomainClassDtoName")};

/* proposals for Feature DomainClassReference::name */
List[Proposal] completeDomainClassReference_name(emf::EObject ctx, String prefix) :
	{newProposal("DomainClassReferenceName")};

/* proposals for Feature BooleanProperty::name */
List[Proposal] completeBooleanProperty_name(emf::EObject ctx, String prefix) :
	{newProposal("BooleanPropertyName")};

/* proposals for Feature StringProperty::name */
List[Proposal] completeStringProperty_name(emf::EObject ctx, String prefix) :
	{newProposal("StringPropertyName")};



/* proposals for Feature DataContractModel::dtos */
List[Proposal] completeDataContractModel_dtos(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature CustomDto::properties */
List[Proposal] completeCustomDto_properties(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature DataContractModel::domainClasses */
List[Proposal] completeDataContractModel_domainClasses(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature DomainClassDto::properties */
List[Proposal] completeDomainClassDto_properties(emf::EObject ctx, String prefix) :
	{};





/* proposals for DomainClassDto::base */
List[Proposal] completeDomainClassDto_base(emf::EObject ctx, String prefix) :
	ctx.allVisibleElements().typeSelect(DataContractDsl::DomainClassReference).collect(x|newProposal(x.label(),x.id(),x.image()));

/* proposals for ListDto::baseDto */
List[Proposal] completeListDto_baseDto(emf::EObject ctx, String prefix) :
	ctx.allVisibleElements().typeSelect(DataContractDsl::Dto).collect(x|newProposal(x.label(),x.id(),x.image()));


List[Proposal] sortProposals(List[Proposal] proposalsToSort):
	proposalsToSort;

isKeywordProposal(Proposal this):
	type == codeassist::Type::KEYWORD;

isAssignmentProposal(Proposal this):
	type == codeassist::Type::ASSIGNMENT;
	
isEnumProposal(Proposal this):
	type == codeassist::Type::ENUM_LITERAL;

// create extensions
Proposal newProposal(String proposal) :
	newProposal(proposal,proposal);
	
Proposal newProposal(String label, String toReplace) :
	newProposal(label,toReplace,"default.gif");
	
create Proposal newProposal(String label, String replace, String image) :
	setLabel(label==null?"ERROR":label)->
	setToInsert(replace==null?"ERROR":replace)->
	setImage(image);
