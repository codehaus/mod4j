/*******************************************************************************
 * Copyright (c) 2008 Ordina and committers to Mod4j
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Ordina - initial implementation
 *******************************************************************************/
import DataContractDsl;
import crossx; 

extension org::mod4j::crossx::broker::xtend::Crossx;

context BusinessClassReference ERROR "BusinessClass [" + this.name + "] not defined in model [" + this.modelname + "]":
       lookupSymbol(this.modelname, this.name, "BusinessClass") != null;

/*
context DtoProperty ERROR "Property " + this.name + " must have type [" + "]" :
    if this.businessClassDto != null then 
       (let refSymbol = lookupSymbol(this.businessClassDto.base.modelname,
                                     this.businessClassDto.base.name, "BusinessClass") :
          this.name == refSymbolgetPropertyValue()
       )
    else  true;
      */    

context BusinessClassPropertyReference ERROR "Property [" + this.name + "] must be defined in the corresponding business class" :
    let sym1 = lookupSymbolWithSubsymbol(dto.base.modelname, dto.base.name, "BusinessClass",
                                         "Property", this.name) :
    (sym1 != null) ;
    
context BusinessClassAssociationRoleReference ERROR 
    "[" + this.name + "] must be a role name in an association for [" + this.dto.base.name  + "]":
    let symbol = lookupSymbolWithSubsymbol(dto.base.modelname, dto.base.name, "BusinessClass",
                                         "Association", this.name) :
    symbol != null;
    
context BusinessClassAssociationRoleReference ERROR 
    "[" + this.name + "] incorrect type [" + this.dtoType.name + "] (must be BusinessClassDto or ListDto) " :
    let symbol = lookupSymbol(this.dto.base.modelname, this.dto.base.name, "BusinessClass") :
    let props = (symbol == null ? {} : symbol.subSymbols.select(s|s.type.matches("Association") && (s.name == this.name)) ):
    let prop = (props == null ? null : props.first() ):
    let mult = (prop == null ? null : getPropertyValue(prop, "Multiplicity") ):
    if (mult == null) || (this.dtoType == null) then
        true
    else (
	    if (mult == "0..1") || (mult == "1") then 
	        this.dtoType.metaType == DataContractDsl::BusinessClassDto 
	     else (
	        this.dtoType.metaType == DataContractDsl::ListDto 
	    )
	)
    ;
