/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package BusinessDomainDsl.provider;

import BusinessDomainDsl.util.BusinessDomainDslAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BusinessDomainDslItemProviderAdapterFactory extends BusinessDomainDslAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BusinessDomainDslItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.NamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedElementItemProvider namedElementItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.NamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedElementAdapter() {
		if (namedElementItemProvider == null) {
			namedElementItemProvider = new NamedElementItemProvider(this);
		}

		return namedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.BusinessDomainModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessDomainModelItemProvider businessDomainModelItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.BusinessDomainModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessDomainModelAdapter() {
		if (businessDomainModelItemProvider == null) {
			businessDomainModelItemProvider = new BusinessDomainModelItemProvider(this);
		}

		return businessDomainModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.BusinessClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessClassItemProvider businessClassItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.BusinessClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessClassAdapter() {
		if (businessClassItemProvider == null) {
			businessClassItemProvider = new BusinessClassItemProvider(this);
		}

		return businessClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.Comment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentItemProvider commentItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.Comment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentAdapter() {
		if (commentItemProvider == null) {
			commentItemProvider = new CommentItemProvider(this);
		}

		return commentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.Enumeration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationItemProvider enumerationItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.Enumeration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationAdapter() {
		if (enumerationItemProvider == null) {
			enumerationItemProvider = new EnumerationItemProvider(this);
		}

		return enumerationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.EnumerationLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationLiteralItemProvider enumerationLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.EnumerationLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationLiteralAdapter() {
		if (enumerationLiteralItemProvider == null) {
			enumerationLiteralItemProvider = new EnumerationLiteralItemProvider(this);
		}

		return enumerationLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.CommentableElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentableElementItemProvider commentableElementItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.CommentableElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentableElementAdapter() {
		if (commentableElementItemProvider == null) {
			commentableElementItemProvider = new CommentableElementItemProvider(this);
		}

		return commentableElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.BusinessRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessRuleItemProvider businessRuleItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.BusinessRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessRuleAdapter() {
		if (businessRuleItemProvider == null) {
			businessRuleItemProvider = new BusinessRuleItemProvider(this);
		}

		return businessRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.BoolProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoolPropertyItemProvider boolPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.BoolProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoolPropertyAdapter() {
		if (boolPropertyItemProvider == null) {
			boolPropertyItemProvider = new BoolPropertyItemProvider(this);
		}

		return boolPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.DateTimeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTimePropertyItemProvider dateTimePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.DateTimeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTimePropertyAdapter() {
		if (dateTimePropertyItemProvider == null) {
			dateTimePropertyItemProvider = new DateTimePropertyItemProvider(this);
		}

		return dateTimePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.CustomProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomPropertyItemProvider customPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.CustomProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomPropertyAdapter() {
		if (customPropertyItemProvider == null) {
			customPropertyItemProvider = new CustomPropertyItemProvider(this);
		}

		return customPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.NumberProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberPropertyItemProvider numberPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.NumberProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberPropertyAdapter() {
		if (numberPropertyItemProvider == null) {
			numberPropertyItemProvider = new NumberPropertyItemProvider(this);
		}

		return numberPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.StringProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringPropertyItemProvider stringPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.StringProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringPropertyAdapter() {
		if (stringPropertyItemProvider == null) {
			stringPropertyItemProvider = new StringPropertyItemProvider(this);
		}

		return stringPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.CustomDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomDataTypeItemProvider customDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.CustomDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomDataTypeAdapter() {
		if (customDataTypeItemProvider == null) {
			customDataTypeItemProvider = new CustomDataTypeItemProvider(this);
		}

		return customDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.PropertyContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyContainerItemProvider propertyContainerItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.PropertyContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyContainerAdapter() {
		if (propertyContainerItemProvider == null) {
			propertyContainerItemProvider = new PropertyContainerItemProvider(this);
		}

		return propertyContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.BlobBinaryProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlobBinaryPropertyItemProvider blobBinaryPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.BlobBinaryProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlobBinaryPropertyAdapter() {
		if (blobBinaryPropertyItemProvider == null) {
			blobBinaryPropertyItemProvider = new BlobBinaryPropertyItemProvider(this);
		}

		return blobBinaryPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.BlobTextProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlobTextPropertyItemProvider blobTextPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.BlobTextProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlobTextPropertyAdapter() {
		if (blobTextPropertyItemProvider == null) {
			blobTextPropertyItemProvider = new BlobTextPropertyItemProvider(this);
		}

		return blobTextPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BusinessDomainDsl.association} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected associationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a {@link BusinessDomainDsl.association}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createassociationAdapter() {
		if (associationItemProvider == null) {
			associationItemProvider = new associationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (namedElementItemProvider != null) namedElementItemProvider.dispose();
		if (businessDomainModelItemProvider != null) businessDomainModelItemProvider.dispose();
		if (businessClassItemProvider != null) businessClassItemProvider.dispose();
		if (commentItemProvider != null) commentItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (enumerationItemProvider != null) enumerationItemProvider.dispose();
		if (enumerationLiteralItemProvider != null) enumerationLiteralItemProvider.dispose();
		if (commentableElementItemProvider != null) commentableElementItemProvider.dispose();
		if (businessRuleItemProvider != null) businessRuleItemProvider.dispose();
		if (boolPropertyItemProvider != null) boolPropertyItemProvider.dispose();
		if (dateTimePropertyItemProvider != null) dateTimePropertyItemProvider.dispose();
		if (customPropertyItemProvider != null) customPropertyItemProvider.dispose();
		if (numberPropertyItemProvider != null) numberPropertyItemProvider.dispose();
		if (stringPropertyItemProvider != null) stringPropertyItemProvider.dispose();
		if (customDataTypeItemProvider != null) customDataTypeItemProvider.dispose();
		if (propertyContainerItemProvider != null) propertyContainerItemProvider.dispose();
		if (blobBinaryPropertyItemProvider != null) blobBinaryPropertyItemProvider.dispose();
		if (blobTextPropertyItemProvider != null) blobTextPropertyItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (associationItemProvider != null) associationItemProvider.dispose();
	}

}
