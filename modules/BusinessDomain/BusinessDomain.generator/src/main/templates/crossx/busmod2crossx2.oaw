<?xml version="1.0"?>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 - Copyright (c) 2008 Ordina and committers to Mod4j
 - All rights reserved. This program and the accompanying materials
 - are made available under the terms of the Eclipse Public License v1.0
 - which accompanies this distribution, and is available at
 - http://www.eclipse.org/legal/epl-v10.html
 -
 - Contributors:
 -     Ordina - initial implementation
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<workflow>
    <!--  
        This workflow taken a BusinessDomainDsl model and extracts the Crossx model from it.
        Arguments / properties expected:
          - modelfile : the file containing the BusinessDomainDsl model
          - crossxfile : the file to which the crossx model will be written
    -->
<!--
    <component class="org.openarchitectureware.util.stdlib.ExtIssueReporter"/>
-->	
    <property name="nsUriPrefix" value="appelmoes"/>
 
 	<!-- set up EMF for standalone execution -->
	<bean class="org.eclipse.mwe.emf.StandaloneSetup" >
		<platformUri value=".."/>
	</bean>

	<!-- added beans for teh BusinessDomainDsl and the Crossx metamodels
	     Don't use the filenames of the ecore files, because they won't work when the
	     plugins are exported and installed.
	-->
	<bean id="crossx" class="oaw.type.emf.EmfMetaModel">
		<metaModelPackage value="org.mod4j.crossx.mm.crossx.CrossxPackage" />   
	</bean>

	<!-- Initialize the issues reporting feature of oAW
	     TODO 3 May 2008 : Check whether this is still neccesary
	-->

    <bean class="org.mod4j.businessdomain.xtext.MetaModelRegistration"/>
    <bean id="BusinessDomainDsl" class="oaw.type.emf.EmfMetaModel">
        <metaModelPackage value="BusinessDomainDsl.BusinessDomainDslPackage" />   
    </bean>
<!--
    <component id="BusinessDomainDsl-parser" class="org.mod4j.businessdomain.xtext.parser.ParserComponent">
        <modelFile value="${modelfile}"/>
        <outputSlot value="model"/>
    </component>
-->

	<!-- load the BusinessClassDsl model and store it in slot 'model' -->
	<component class="org.eclipse.mwe.emf.Reader">
		<uri value="${modelfile}" />
		<modelSlot value="model" />
	</component>

    <component id="BusinessDomainWorkflow-XtextChecks" class="org.openarchitectureware.check.CheckComponent">
        <metaModel idRef="BusinessDomainDsl" />
        <checkFile value="org::mod4j::businessdomain::xtext::GenChecks" />
        <emfAllChildrenSlot value="model" />
    </component>
    <component id="BusinessDomainWorkflow-ModelChecks" class="org.openarchitectureware.check.CheckComponent">
        <metaModel idRef="BusinessDomainDsl" />
        <checkFile value="BusinessDomainDsl::validation::BusinessModelChecks" />
        <emfAllChildrenSlot value="model" />
    </component>
 
 	<!-- Call the Xtend model-to-model transformation that takes a BusinessDomainModel as its input
 	     and returns a Crossx model in the outputSlot
 	-->
	<component id="XtendComponent.busmodel2crossx" class="oaw.xtend.XtendComponent">
		<!-- again, we need the two meta models introduced above; we reference
		     them using XML's idRef mechanism -->
	   <metaModel idRef="BusinessDomainDsl"/>
	   <metaModel idRef="crossx"/>
	   <globalVarDef name="nsUriPrefix" value="'${nsUriPrefix}'"/>
	   <invoke value="busmod2crossx::exportModel(model, '${modelfile}' )"/>
	   <outputSlot value="crossxModel"/>
	</component>

	<!-- Is used to write the model. The model is put in the modelSlot 'model' -->
	<component class="org.mod4j.dslcommon.openarchitectureware.CrossxWorkflowComponent">
		<modelSlot value="crossxModel"/>
  		<outputFile value="${crossxfile}"></outputFile>
	</component>

	<!-- last but not least, we write the Ecore model file. We specify the workflow
	     slot where we expect the model as well as the file name of the
	     to-be-written file.
	     This stel isn't neccesary, but migtb be helpfulkl for debugging purposes to check what
	     the Crosssx model looks like.

	<component class="org.eclipse.mwe.emf.Writer">
		<uri value="${crossxmodelfile}" />
		<modelSlot value="crossxModel" />
	</component>
    -->

</workflow>

