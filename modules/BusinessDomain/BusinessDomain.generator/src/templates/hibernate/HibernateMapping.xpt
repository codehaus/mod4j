«IMPORT BusinessDomainDsl»

«EXTENSION BusinessClass»
«EXTENSION util»
«EXTENSION ProjectProperties»

«DEFINE header FOR BusinessDomainDsl::BusinessClass»
<?xml version="1.0"?>
<!-- Generated by Mod4j Hibernate Generator at «timestamp()» -->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
«ENDDEFINE»

«DEFINE mapping FOR BusinessDomainDsl::BusinessClass»
«FILE javaClassName(this.name) + ".hbm.xml"»
«EXPAND header FOR this»

<!-- Mapping for class «this.name»
     Description «this.description»
  -->
<hibernate-mapping>
    <class name="«getDomainRootPackage()».«javaClassName(this)»"
        table="«javaClassName(this)»_TABLE">
        <cache usage="read-write" />
        <id name="id" column="id" type="java.lang.Long">
            <generator class="native" />
        </id>
		«EXPAND mapping      FOREACH this.properties»
		«EXPAND mappingsTo   FOREACH this.associationsTo»
		«EXPAND mappingsFrom FOREACH this.associationsFrom.select(a | a.targetNavigability)»

    </class>
</hibernate-mapping>
«ENDFILE»
«ENDDEFINE»

«DEFINE mapping FOR BusinessDomainDsl::Property»
        <property name="«this.name»" />
«ENDDEFINE»

«DEFINE mappingsTo FOR Association»
    «IF isOne2Many(this)»
		«EXPAND one2manyMappingTo FOR this»
	«ELSEIF isOne2One(this)»
	«ELSEIF isMany2One(this)»
	«ELSEIF isMany2Many(this)»
    «ELSE»
	<!-- WARNING mappingsTo(Association) no generation for : «this.name» -->
    «ENDIF»
«ENDDEFINE»

«DEFINE mappingsFrom FOR Association»
«REM»TODO: one2many is the WRONG WAY round !!«ENDREM»
    «IF isOne2Many(this)»
		«EXPAND one2manyMappingFrom FOR this»
	«ELSEIF isOne2One(this)»
	«ELSEIF isMany2One(this)»
	«ELSEIF isMany2Many(this)»
    «ELSE»
	<!-- WARNING mappingsFrom(Association) no generation for : «this.name» -->
    «ENDIF»

«ENDDEFINE»

«DEFINE one2manyMappingTo FOR Association»
        <set name="«this.targetRoleName»" inverse="false" lazy="false"
            cascade="save-update">
            <key>
                <column name="«this.targetRoleName»_ID" />
            </key>
            <one-to-many
                class="«getDomainRootPackage()».«javaClassName(this.target)»" 
                column="«this.targetRoleName»_ID"  />
        </set>
«ENDDEFINE»

«DEFINE one2manyMappingFrom FOR Association»
	«IF this.targetNavigability»
		<set name="«this.sourceRoleName»" inverse="true"
		<key>
		    <column name="«this.sourceRoleName»_ID" />
		</key>
        <many-to-one 
            class="«getDomainRootPackage()».«javaClassName(this.source)»"
            not-null="false" column="«this.targetRoleName»_ID" />
	«ENDIF»
«ENDDEFINE»

«DEFINE many2manyTo FOR Association»
«REM»Unidirectional Many persons to many events with crosstable called PERSON_EVENT«ENDREM»
<class name="events.Person" table="PERSON">
    <id name="id" column="PERSON_ID">
        <generator class="native"/>
    </id>
    <property name="age"/>
    <property name="firstname"/>
    <property name="lastname"/>

    <set name="events" table="PERSON_EVENT">
        <key column="PERSON_ID"/>
        <many-to-many column="EVENT_ID" class="events.Event"/>
    </set>
«ENDDEFINE»

«DEFINE many2manyFrom FOR Association»
«REM»Add to Event.hbm  «ENDREM»
<set name="participants" table="PERSON_EVENT" inverse="true">
    <key column="EVENT_ID"/>
    <many-to-many column="PERSON_ID" class="events.Person"/>
</set>
«ENDDEFINE»

«DEFINE primitiveCollection FOR Association»
private Set emailAddresses = new HashSet(); /// type String

public Set getEmailAddresses() {
    return emailAddresses;
}

public void setEmailAddresses(Set emailAddresses) {
    this.emailAddresses = emailAddresses;
}

// The mapping of this Set:

<set name="emailAddresses" table="PERSON_EMAIL_ADDR">
    <key column="PERSON_ID"/>
    <element type="string" column="EMAIL_ADDR"/>
</set>
«ENDDEFINE»