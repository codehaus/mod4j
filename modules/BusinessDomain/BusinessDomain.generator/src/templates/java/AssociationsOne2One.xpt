«IMPORT BusinessDomainDsl»

«EXTENSION BusinessClass»
«EXTENSION Association»

«REM»
    Adds the accessor methods at the source side of a one to one association
    If the association is bidirectional, code is generated to uodate the target side as well.
«ENDREM»
«DEFINE one2OneAccessorsTo FOR Association»
    /**
     * @return «targetRoleName» (Set<«target.name»>) 
     */
    public «javaClassName(target)» get«targetRoleName.toFirstUpper()» () {
        return this.«targetRoleName»;
    }

    /** Implements adding single element to a collection
     */
    public void set«targetRoleName.toFirstUpper()»(«javaClassName(target)» element) {
        if ( this.«targetRoleName» != element) {       // prevent infinite loop
«IF this.bidirectional»
            if( this.«targetRoleName» != null ) {      // there is a previous link X
                this.«targetRoleName».z_internalRemove«sourceRoleName»( («javaClassName(this.source)») this );
            }
«ENDIF»
            this.«targetRoleName» = element;               // set the field to the new value
«IF this.bidirectional»
            if ( element != null ) {
                // make the new link aware of this 
                element.set«sourceRoleName.toFirstUpper()»( («javaClassName(this.source)») this );
            }
«ENDIF»
        }
    }

    /** This operation should NOT be used by clients.
     *  It implements the correct setting of an element in an association.
     * 
     * @param element 
     */
    public void z_internalSet«targetRoleName»(«javaClassName(target)» element) {
        this.«targetRoleName» = null;
    }

    /** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
     * 
     * @param element 
     */
    public void z_internalRemove«targetRoleName»(«javaClassName(target)» element) {
        this.«targetRoleName» = null;
    }
«ENDDEFINE»

«REM»
    Adds the accessor methods at the target side of a bidirectional one to one association.
    Note that this code is identivcal to the other side of the association
«ENDREM»
«DEFINE one2OneAccessorsFrom FOR Association»
    /**
     * @return «sourceRoleName» (Set<«source.name»>) «source.description»
     */
    public «javaClassName(source)» get«sourceRoleName.toFirstUpper()» () {
        return this.«sourceRoleName»;
    }

    /** Implements adding single element to a collection
     */
    public void set«sourceRoleName.toFirstUpper()»(«javaClassName(source)» element) {
        if ( this.«sourceRoleName» != element) {       // prevent infinite loop
«IF this.bidirectional»
            if( this.«sourceRoleName» != null ) {      // there is a previous link Y
                this.«sourceRoleName».z_internalRemove«targetRoleName»( («javaClassName(target)») this );
            }
«ENDIF»
            this.«sourceRoleName» = element;               // set the field to the new value
«IF this.bidirectional»
            if ( element != null ) {
                // make the new link aware of this 
                element.set«targetRoleName.toFirstUpper()»( («javaClassName(target)») this );
            }
«ENDIF»
        }
    }
«REM»
    /** This operation should NOT be used by clients.
     *  It implements the correct setting of an element in an association.
     * 
     * @param element 
     */
    public void z_internalSet«sourceRoleName»(«javaClassName(source)» element) {
        this.«sourceRoleName» = null;
    }
«ENDREM»
    /** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
     * 
     * @param element 
     */
    public void z_internalRemove«sourceRoleName»(«javaClassName(source)» element) {
        this.«sourceRoleName» = null;
    }
«ENDDEFINE»
