«IMPORT BusinessDomainDsl»
«IMPORT src::templates::java»

«EXTENSION util»
«EXTENSION BusinessClass»
«EXTENSION ProjectProperties»

«REM»Generation of Businessrules classes for this BusinessClass«ENDREM»
«DEFINE BusinessRulesImplBases (String rootPackage) FOR BusinessClass»
    «FOREACH businessRules AS br»
        «EXPAND BusinessRules::BusinessRuleImplBase (rootPackage + ".businessrules", this) FOR br»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE BusinessRulesImplBases (String rootPackage) FOR AbstractType»
«REM»No generation of BusinessRulesExtentionPoints for AbastractTypes«ENDREM»
«ENDDEFINE»

«DEFINE BusinessRuleImplBase (String package, BusinessClass bc) FOR BusinessRule»
    «FILE (package).replaceAll("\\.", "/") + "/" + name + "ImplBase" +  ".java"»
       /**
        * BusinessRule «name» initially generated by Mod4j BusinessDomain DSL at: «timestamp()»
        */

        package «package»;
        
        «EXPAND Imports::addImports»
        import «getDomainRootPackage()».«javaClassName(bc)»;
        
        /**
        * «description»
        *
        * @author Generated by Mod4j
        */
        public abstract class «name»ImplBase implements Validator {
              
            /**
             * {@inheritDoc}
             */
            @SuppressWarnings("unchecked")
            public boolean supports(Class clazz) {
                return «bc.name».class.isAssignableFrom(clazz);
            }                
        }
    «ENDFILE»
«ENDDEFINE»

«DEFINE BusinessRulesExtentionPoints (String srcPath, String package) FOR AbstractType»
«REM»No generation of BusinessRulesExtentionPoints for AbastractTypes«ENDREM»
«ENDDEFINE»

«DEFINE BusinessRulesExtentionPoints (String srcPath, String rootPackage) FOR BusinessClass»
  «FOREACH businessRules AS br»
        «EXPAND BusinessRuleExtensionPoint (srcPath, rootPackage + ".businessrules") FOR br»
  «ENDFOREACH»
«ENDDEFINE»

«DEFINE BusinessRuleExtensionPoint (String srcPath, String package) FOR BusinessRule»
    «IF !fileExist(srcPath + "/" + package.replaceAll("\\.", "/") + "/" + name +  ".java")»
        «FILE package.replaceAll("\\.", "/") + "/" + name +  ".java"»
            /**
             * Extension Point initially generated by Mod4j at: «timestamp()»
             */

            package «package»;
            
            import org.springframework.validation.Errors;
                        
            /**
             * «description»
             * 
             * This ExtensionPoint is intended to be manually changed by developers.
             * 
             */
            public class «name» extends «name»ImplBase {

                /**
                 *  {@inheritDoc} 
                 */
                public void validate(Object target, Errors errors) {
                    // TODO Implement validation code for «name».
                }

            }   
        «ENDFILE»
    «ENDIF»
«ENDDEFINE»

«DEFINE addBusinessRulesValidators FOR BusinessClass»
    «EXPAND addPropertyValidator (this) FOREACH properties -»
    «FOREACH businessRules AS br -»
        validation.addValidator(new «br.name»());
    «ENDFOREACH» 
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR Property»
«REM»Nothing to expand«ENDREM»
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR IntegerProperty»
    «IF minValue != -2147483648 -»
        validation.addValidator(new MinValueValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_MINVALUE));
    «ENDIF»
    «IF maxValue != 2147483647 -»
        validation.addValidator(new MaxValueValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_MAXVALUE));
    «ENDIF»    
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR StringProperty»
    «IF minLength > -1 -»
        validation.addValidator(new MinLengthValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_MINLENGTH));
    «ENDIF»
    «IF maxLength > -1 -»
        validation.addValidator(new MaxLengthValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_MAXLENGTH));
    «ENDIF»
    «IF regularExpression.length > 0 -»
        validation.addValidator(new RegExpValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_REGEXP));
    «ENDIF»
«ENDDEFINE»
