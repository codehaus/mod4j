/*
* generated by Xtext
*/
grammar InternalBusinessDomain;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.mod4j.dsl.businessdomain.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mod4j.dsl.businessdomain.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.mod4j.dsl.businessdomain.xtext.services.BusinessDomainGrammarAccess;

}

@parser::members {
 
 	private BusinessDomainGrammarAccess grammarAccess;
 	
    public InternalBusinessDomainParser(TokenStream input, IAstFactory factory, BusinessDomainGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/mod4j/dsl/businessdomain/xtext/parser/antlr/internal/InternalBusinessDomain.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BusinessDomainModel";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBusinessDomainModel
entryRuleBusinessDomainModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBusinessDomainModelRule(), currentNode); }
	 iv_ruleBusinessDomainModel=ruleBusinessDomainModel 
	 { $current=$iv_ruleBusinessDomainModel.current; } 
	 EOF 
;

// Rule BusinessDomainModel
ruleBusinessDomainModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getBusinessDomainModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessDomainModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'domain' 
    {
        createLeafNode(grammarAccess.getBusinessDomainModelAccess().getDomainKeyword_1(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getBusinessDomainModelAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessDomainModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getBusinessDomainModelAccess().getSemicolonKeyword_3(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBusinessDomainModelAccess().getTypesBusinessClassParserRuleCall_4_0_0(), currentNode); 
	    }
	    lv_types_4=ruleBusinessClass 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessDomainModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "types", lv_types_4, "BusinessClass", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBusinessDomainModelAccess().getEnumerationsIntegerEnumerationParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_enumerations_5=ruleIntegerEnumeration 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessDomainModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "enumerations", lv_enumerations_5, "IntegerEnumeration", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBusinessDomainModelAccess().getAssociationsAssociationParserRuleCall_4_2_0(), currentNode); 
	    }
	    lv_associations_6=ruleAssociation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessDomainModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "associations", lv_associations_6, "Association", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssociationRule(), currentNode); }
	 iv_ruleAssociation=ruleAssociation 
	 { $current=$iv_ruleAssociation.current; } 
	 EOF 
;

// Rule Association
ruleAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAssociationAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'association' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getAssociationKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getSourceBusinessClassCrossReference_2_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)(	
	
	    lv_sourceRoleName_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getSourceRoleNameIDTerminalRuleCall_3_0(), "sourceRoleName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sourceRoleName", lv_sourceRoleName_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('foreign key' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getForeignKeyKeyword_4_0(), null); 
    }
(	
	
	    lv_sourceForeignKey_5=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getSourceForeignKeyIDTerminalRuleCall_4_1_0(), "sourceForeignKey"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sourceForeignKey", lv_sourceForeignKey_5, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('references' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getReferencesKeyword_5_0(), null); 
    }
(	
	
	    lv_sourceAlternateKey_7=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getSourceAlternateKeyIDTerminalRuleCall_5_1_0(), "sourceAlternateKey"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sourceAlternateKey", lv_sourceAlternateKey_7, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getSourceMultiplicityMultiplicityEnumRuleCall_6_0(), currentNode); 
	    }
	    lv_sourceMultiplicity_8=ruleMultiplicity 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "sourceMultiplicity", lv_sourceMultiplicity_8, "Multiplicity", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    lv_bidirectional_9='<->' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_7_0_0(), "bidirectional"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "bidirectional", true, "<->", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |'->' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getHyphenMinusGreaterThanSignKeyword_7_1(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getTargetMultiplicityMultiplicityEnumRuleCall_8_0(), currentNode); 
	    }
	    lv_targetMultiplicity_11=ruleMultiplicity 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "targetMultiplicity", lv_targetMultiplicity_11, "Multiplicity", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('table' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getTableKeyword_9_0(), null); 
    }
(	
	
	    lv_table_13=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getTableIDTerminalRuleCall_9_1_0(), "table"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "table", lv_table_13, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getTargetAbstractBusinessClassCrossReference_10_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
)(	
	
	    lv_targetRoleName_15=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getTargetRoleNameIDTerminalRuleCall_11_0(), "targetRoleName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "targetRoleName", lv_targetRoleName_15, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('foreign key' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getForeignKeyKeyword_12_0(), null); 
    }
(	
	
	    lv_targetForeignKey_17=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getTargetForeignKeyIDTerminalRuleCall_12_1_0(), "targetForeignKey"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "targetForeignKey", lv_targetForeignKey_17, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('references' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getReferencesKeyword_13_0(), null); 
    }
(	
	
	    lv_targetAlternateKey_19=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getTargetAlternateKeyIDTerminalRuleCall_13_1_0(), "targetAlternateKey"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "targetAlternateKey", lv_targetAlternateKey_19, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?((	
	
	    lv_ordered_20='ordered' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getOrderedOrderedKeyword_14_0_0(), "ordered"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ordered", true, "ordered", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('column' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getColumnKeyword_14_1_0(), null); 
    }
(	
	
	    lv_orderingColumn_22=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getOrderingColumnIDTerminalRuleCall_14_1_1_0(), "orderingColumn"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "orderingColumn", lv_orderingColumn_22, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?)?';' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getSemicolonKeyword_15(), null); 
    }
);





// Entry rule entryRuleBusinessClass
entryRuleBusinessClass returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBusinessClassRule(), currentNode); }
	 iv_ruleBusinessClass=ruleBusinessClass 
	 { $current=$iv_ruleBusinessClass.current; } 
	 EOF 
;

// Rule BusinessClass
ruleBusinessClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getBusinessClassAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'class' 
    {
        createLeafNode(grammarAccess.getBusinessClassAccess().getClassKeyword_1(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getBusinessClassAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('inherits' 
    {
        createLeafNode(grammarAccess.getBusinessClassAccess().getInheritsKeyword_3_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBusinessClassAccess().getSuperclassBusinessClassCrossReference_3_1_0(), "superclass"); 
	}

		// TODO assign feature to currentNode
	
))?('table' 
    {
        createLeafNode(grammarAccess.getBusinessClassAccess().getTableKeyword_4_0(), null); 
    }
(	
	
	    lv_table_6=	RULE_ID
	{
		createLeafNode(grammarAccess.getBusinessClassAccess().getTableIDTerminalRuleCall_4_1_0(), "table"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "table", lv_table_6, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?'[' 
    {
        createLeafNode(grammarAccess.getBusinessClassAccess().getLeftSquareBracketKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBusinessClassAccess().getPropertiesPropertyParserRuleCall_6_0(), currentNode); 
	    }
	    lv_properties_8=ruleProperty 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "properties", lv_properties_8, "Property", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*('rules' 
    {
        createLeafNode(grammarAccess.getBusinessClassAccess().getRulesKeyword_7_0(), null); 
    }
'[' 
    {
        createLeafNode(grammarAccess.getBusinessClassAccess().getLeftSquareBracketKeyword_7_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBusinessClassAccess().getBusinessRulesAbstractBusinessRuleParserRuleCall_7_2_0(), currentNode); 
	    }
	    lv_businessRules_11=ruleAbstractBusinessRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "businessRules", lv_businessRules_11, "AbstractBusinessRule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*']' 
    {
        createLeafNode(grammarAccess.getBusinessClassAccess().getRightSquareBracketKeyword_7_3(), null); 
    }
)?']' 
    {
        createLeafNode(grammarAccess.getBusinessClassAccess().getRightSquareBracketKeyword_8(), null); 
    }
);





// Entry rule entryRuleIntegerEnumeration
entryRuleIntegerEnumeration returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntegerEnumerationRule(), currentNode); }
	 iv_ruleIntegerEnumeration=ruleIntegerEnumeration 
	 { $current=$iv_ruleIntegerEnumeration.current; } 
	 EOF 
;

// Rule IntegerEnumeration
ruleIntegerEnumeration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getIntegerEnumerationAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'enumeration' 
    {
        createLeafNode(grammarAccess.getIntegerEnumerationAccess().getEnumerationKeyword_1(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getIntegerEnumerationAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'[' 
    {
        createLeafNode(grammarAccess.getIntegerEnumerationAccess().getLeftSquareBracketKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getIntegerEnumerationAccess().getEnumerationLiteralsIntegerEnumerationLiteralParserRuleCall_4_0(), currentNode); 
	    }
	    lv_enumerationLiterals_4=ruleIntegerEnumerationLiteral 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "enumerationLiterals", lv_enumerationLiterals_4, "IntegerEnumerationLiteral", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+']' 
    {
        createLeafNode(grammarAccess.getIntegerEnumerationAccess().getRightSquareBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleIntegerEnumerationLiteral
entryRuleIntegerEnumerationLiteral returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntegerEnumerationLiteralRule(), currentNode); }
	 iv_ruleIntegerEnumerationLiteral=ruleIntegerEnumerationLiteral 
	 { $current=$iv_ruleIntegerEnumerationLiteral.current; } 
	 EOF 
;

// Rule IntegerEnumerationLiteral
ruleIntegerEnumerationLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getIntegerEnumerationLiteralAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('=' 
    {
        createLeafNode(grammarAccess.getIntegerEnumerationLiteralAccess().getEqualsSignKeyword_1_0(), null); 
    }
(	
	
	    lv_persistedValue_2=	RULE_INT
	{
		createLeafNode(grammarAccess.getIntegerEnumerationLiteralAccess().getPersistedValueINTTerminalRuleCall_1_1_0(), "persistedValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "persistedValue", lv_persistedValue_2, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))';' 
    {
        createLeafNode(grammarAccess.getIntegerEnumerationLiteralAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleAbstractBusinessRule
entryRuleAbstractBusinessRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAbstractBusinessRuleRule(), currentNode); }
	 iv_ruleAbstractBusinessRule=ruleAbstractBusinessRule 
	 { $current=$iv_ruleAbstractBusinessRule.current; } 
	 EOF 
;

// Rule AbstractBusinessRule
ruleAbstractBusinessRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractBusinessRuleAccess().getBusinessRuleParserRuleCall_0(), currentNode); 
    }
    this_BusinessRule_0=ruleBusinessRule
    { 
        $current = $this_BusinessRule_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractBusinessRuleAccess().getUniqueRuleParserRuleCall_1(), currentNode); 
    }
    this_UniqueRule_1=ruleUniqueRule
    { 
        $current = $this_UniqueRule_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBusinessRule
entryRuleBusinessRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBusinessRuleRule(), currentNode); }
	 iv_ruleBusinessRule=ruleBusinessRule 
	 { $current=$iv_ruleBusinessRule.current; } 
	 EOF 
;

// Rule BusinessRule
ruleBusinessRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getBusinessRuleAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getBusinessRuleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBusinessRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getBusinessRuleAccess().getSemicolonKeyword_2(), null); 
    }
);





// Entry rule entryRuleUniqueRule
entryRuleUniqueRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUniqueRuleRule(), currentNode); }
	 iv_ruleUniqueRule=ruleUniqueRule 
	 { $current=$iv_ruleUniqueRule.current; } 
	 EOF 
;

// Rule UniqueRule
ruleUniqueRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getUniqueRuleAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUniqueRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'unique' 
    {
        createLeafNode(grammarAccess.getUniqueRuleAccess().getUniqueKeyword_1(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getUniqueRuleAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUniqueRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'[' 
    {
        createLeafNode(grammarAccess.getUniqueRuleAccess().getLeftSquareBracketKeyword_3(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getUniqueRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getUniqueRuleAccess().getPropertiesPropertyCrossReference_4_0(), "properties"); 
	}

		// TODO assign feature to currentNode
	
)(',' 
    {
        createLeafNode(grammarAccess.getUniqueRuleAccess().getCommaKeyword_5_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getUniqueRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getUniqueRuleAccess().getPropertiesPropertyCrossReference_5_1_0(), "properties"); 
	}

		// TODO assign feature to currentNode
	
))*']' 
    {
        createLeafNode(grammarAccess.getUniqueRuleAccess().getRightSquareBracketKeyword_6(), null); 
    }
);





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRule(), currentNode); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getBoolPropertyParserRuleCall_0_0(), currentNode); 
    }
    this_BoolProperty_0=ruleBoolProperty
    { 
        $current = $this_BoolProperty_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getStringPropertyParserRuleCall_0_1(), currentNode); 
    }
    this_StringProperty_1=ruleStringProperty
    { 
        $current = $this_StringProperty_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getDateTimePropertyParserRuleCall_0_2(), currentNode); 
    }
    this_DateTimeProperty_2=ruleDateTimeProperty
    { 
        $current = $this_DateTimeProperty_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getIntegerPropertyParserRuleCall_0_3(), currentNode); 
    }
    this_IntegerProperty_3=ruleIntegerProperty
    { 
        $current = $this_IntegerProperty_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getDecimalPropertyParserRuleCall_0_4(), currentNode); 
    }
    this_DecimalProperty_4=ruleDecimalProperty
    { 
        $current = $this_DecimalProperty_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getEnumerationPropertyParserRuleCall_0_5(), currentNode); 
    }
    this_EnumerationProperty_5=ruleEnumerationProperty
    { 
        $current = $this_EnumerationProperty_5.current; 
        currentNode = currentNode.getParent();
    }
)(	
	
	    lv_nullable_6='nullable' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getNullableNullableKeyword_1_0(), "nullable"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "nullable", true, "nullable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?((	
	
	    lv_derived_7='derived' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getDerivedDerivedKeyword_2_0_0(), "derived"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "derived", true, "derived", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_writable_8='writable' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getWritableWritableKeyword_2_1_0(), "writable"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "writable", true, "writable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?)?('column' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getColumnKeyword_3_0(), null); 
    }
(	
	
	    lv_column_10=	RULE_ID
	{
		createLeafNode(grammarAccess.getPropertyAccess().getColumnIDTerminalRuleCall_3_1_0(), "column"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "column", lv_column_10, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleBoolProperty
entryRuleBoolProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBoolPropertyRule(), currentNode); }
	 iv_ruleBoolProperty=ruleBoolProperty 
	 { $current=$iv_ruleBoolProperty.current; } 
	 EOF 
;

// Rule BoolProperty
ruleBoolProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getBoolPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBoolPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_dataType_1='boolean' 
    {
        createLeafNode(grammarAccess.getBoolPropertyAccess().getDataTypeBooleanKeyword_1_0(), "dataType"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBoolPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dataType", /* lv_dataType_1 */ input.LT(-1), "boolean", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getBoolPropertyAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBoolPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
	    lv_hasDefault_3='default' 
    {
        createLeafNode(grammarAccess.getBoolPropertyAccess().getHasDefaultDefaultKeyword_3_0_0(), "hasDefault"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBoolPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
	    lv_defaultValue_4='true' 
    {
        createLeafNode(grammarAccess.getBoolPropertyAccess().getDefaultValueTrueKeyword_3_1_0_0(), "defaultValue"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBoolPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "defaultValue", true, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |'false' 
    {
        createLeafNode(grammarAccess.getBoolPropertyAccess().getFalseKeyword_3_1_1(), null); 
    }
))?);





// Entry rule entryRuleStringProperty
entryRuleStringProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringPropertyRule(), currentNode); }
	 iv_ruleStringProperty=ruleStringProperty 
	 { $current=$iv_ruleStringProperty.current; } 
	 EOF 
;

// Rule StringProperty
ruleStringProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStringPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_dataType_1='string' 
    {
        createLeafNode(grammarAccess.getStringPropertyAccess().getDataTypeStringKeyword_1_0(), "dataType"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dataType", /* lv_dataType_1 */ input.LT(-1), "string", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getStringPropertyAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
	    lv_hasDefault_3='default' 
    {
        createLeafNode(grammarAccess.getStringPropertyAccess().getHasDefaultDefaultKeyword_3_0_0(), "hasDefault"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_defaultValue_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStringPropertyAccess().getDefaultValueSTRINGTerminalRuleCall_3_1_0(), "defaultValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "defaultValue", lv_defaultValue_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('minlength' 
    {
        createLeafNode(grammarAccess.getStringPropertyAccess().getMinlengthKeyword_4_0(), null); 
    }
(	
	
	    lv_minLength_6=	RULE_INT
	{
		createLeafNode(grammarAccess.getStringPropertyAccess().getMinLengthINTTerminalRuleCall_4_1_0(), "minLength"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "minLength", lv_minLength_6, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('maxlength' 
    {
        createLeafNode(grammarAccess.getStringPropertyAccess().getMaxlengthKeyword_5_0(), null); 
    }
(	
	
	    lv_maxLength_8=	RULE_INT
	{
		createLeafNode(grammarAccess.getStringPropertyAccess().getMaxLengthINTTerminalRuleCall_5_1_0(), "maxLength"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "maxLength", lv_maxLength_8, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('regexp' 
    {
        createLeafNode(grammarAccess.getStringPropertyAccess().getRegexpKeyword_6_0(), null); 
    }
(	
	
	    lv_regularExpression_10=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStringPropertyAccess().getRegularExpressionSTRINGTerminalRuleCall_6_1_0(), "regularExpression"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "regularExpression", lv_regularExpression_10, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Entry rule entryRuleDateTimeProperty
entryRuleDateTimeProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDateTimePropertyRule(), currentNode); }
	 iv_ruleDateTimeProperty=ruleDateTimeProperty 
	 { $current=$iv_ruleDateTimeProperty.current; } 
	 EOF 
;

// Rule DateTimeProperty
ruleDateTimeProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getDateTimePropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimePropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_dataType_1='datetime' 
    {
        createLeafNode(grammarAccess.getDateTimePropertyAccess().getDataTypeDatetimeKeyword_1_0(), "dataType"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimePropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dataType", /* lv_dataType_1 */ input.LT(-1), "datetime", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getDateTimePropertyAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimePropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
	    lv_hasDefault_3='default' 
    {
        createLeafNode(grammarAccess.getDateTimePropertyAccess().getHasDefaultDefaultKeyword_3_0_0(), "hasDefault"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimePropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_defaultValue_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getDateTimePropertyAccess().getDefaultValueSTRINGTerminalRuleCall_3_1_0(), "defaultValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimePropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "defaultValue", lv_defaultValue_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Entry rule entryRuleIntegerProperty
entryRuleIntegerProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntegerPropertyRule(), currentNode); }
	 iv_ruleIntegerProperty=ruleIntegerProperty 
	 { $current=$iv_ruleIntegerProperty.current; } 
	 EOF 
;

// Rule IntegerProperty
ruleIntegerProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getIntegerPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_dataType_1='integer' 
    {
        createLeafNode(grammarAccess.getIntegerPropertyAccess().getDataTypeIntegerKeyword_1_0(), "dataType"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dataType", /* lv_dataType_1 */ input.LT(-1), "integer", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getIntegerPropertyAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
	    lv_hasDefault_3='default' 
    {
        createLeafNode(grammarAccess.getIntegerPropertyAccess().getHasDefaultDefaultKeyword_3_0_0(), "hasDefault"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_defaultValue_4=	RULE_INT
	{
		createLeafNode(grammarAccess.getIntegerPropertyAccess().getDefaultValueINTTerminalRuleCall_3_1_0(), "defaultValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "defaultValue", lv_defaultValue_4, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('min' 
    {
        createLeafNode(grammarAccess.getIntegerPropertyAccess().getMinKeyword_4_0(), null); 
    }
(	
	
	    lv_minValue_6=	RULE_INT
	{
		createLeafNode(grammarAccess.getIntegerPropertyAccess().getMinValueINTTerminalRuleCall_4_1_0(), "minValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "minValue", lv_minValue_6, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('max' 
    {
        createLeafNode(grammarAccess.getIntegerPropertyAccess().getMaxKeyword_5_0(), null); 
    }
(	
	
	    lv_maxValue_8=	RULE_INT
	{
		createLeafNode(grammarAccess.getIntegerPropertyAccess().getMaxValueINTTerminalRuleCall_5_1_0(), "maxValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "maxValue", lv_maxValue_8, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Entry rule entryRuleDecimalProperty
entryRuleDecimalProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDecimalPropertyRule(), currentNode); }
	 iv_ruleDecimalProperty=ruleDecimalProperty 
	 { $current=$iv_ruleDecimalProperty.current; } 
	 EOF 
;

// Rule DecimalProperty
ruleDecimalProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getDecimalPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_dataType_1='decimal' 
    {
        createLeafNode(grammarAccess.getDecimalPropertyAccess().getDataTypeDecimalKeyword_1_0(), "dataType"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dataType", /* lv_dataType_1 */ input.LT(-1), "decimal", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getDecimalPropertyAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecimalPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleEnumerationProperty
entryRuleEnumerationProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationPropertyRule(), currentNode); }
	 iv_ruleEnumerationProperty=ruleEnumerationProperty 
	 { $current=$iv_ruleEnumerationProperty.current; } 
	 EOF 
;

// Rule EnumerationProperty
ruleEnumerationProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getEnumerationPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEnumerationPropertyAccess().getTypeIntegerEnumerationCrossReference_1_0(), "type"); 
	}

		// TODO assign feature to currentNode
	
)(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getEnumerationPropertyAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
	    lv_hasDefault_3='default' 
    {
        createLeafNode(grammarAccess.getEnumerationPropertyAccess().getHasDefaultDefaultKeyword_3_0_0(), "hasDefault"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasDefault", true, "default", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_defaultValueAsString_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getEnumerationPropertyAccess().getDefaultValueAsStringIDTerminalRuleCall_3_1_0(), "defaultValueAsString"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "defaultValueAsString", lv_defaultValueAsString_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Rule Multiplicity
ruleMultiplicity returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'many' 
	{
        $current = grammarAccess.getMultiplicityAccess().getZeroManyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultiplicityAccess().getZeroManyEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'one' 
	{
        $current = grammarAccess.getMultiplicityAccess().getZeroOneEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultiplicityAccess().getZeroOneEnumLiteralDeclaration_1(), null); 
    }
));







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


