«IMPORT BusinessDomainDsl»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION BusinessClass»
«EXTENSION BusinessRule»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«REM»Generation of Businessrules classes for this BusinessClass«ENDREM»
«DEFINE BusinessRulesImplBases FOR BusinessClass»
    «FOREACH businessRules.typeSelect(BusinessRule) AS br»
        «EXPAND BusinessRules::BusinessRuleImplBase (this) FOR br»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE BusinessRulesImplBases FOR AbstractType»
«REM»No generation of BusinessRulesExtentionPoints for AbastractTypes«ENDREM»
«ENDDEFINE»

«DEFINE BusinessRuleImplBase (BusinessClass bc) FOR BusinessRule»
«REM»
    «FILE generate( getBusinessRulesPackageAsPath() + "/" + implBaseClassName(this) + ".java")» 
«ENDREM»

    «FILE generate(getDomainModuleName(), javaPathFileName(javaBusinessRuleBaseClassPath(this.name) ))»
       /**
        * BusinessRule «name» initial generated by Mod4j BusinessDomain DSL at: «timestamp()»
        */
 
        package «getBusinessRulesPackage()»;
        
        «EXPAND Imports::addImports»
        import «getDomainRootPackage()».«javaClassName(bc)»;
        
        /**
         * «description»
         *
         * @author Generated by Mod4j
         */
        public abstract class «javaBusinessRuleBaseClass(this.name)» implements Validator {
              
            /**
             * {@inheritDoc}
             */
            @SuppressWarnings("unchecked")
            public boolean supports(Class clazz) {
                return «bc.name».class.isAssignableFrom(clazz);
            }                
        }
    «ENDFILE»
«ENDDEFINE»

«DEFINE BusinessRulesExtentionPoints FOR AbstractType»
«REM»No generation of BusinessRulesExtentionPoints for AbastractTypes«ENDREM»
«ENDDEFINE»

«DEFINE BusinessRulesExtentionPoints FOR BusinessClass»
  «FOREACH businessRules.typeSelect(BusinessRule) AS br»
        «EXPAND BusinessRuleExtensionPoint FOR br»
  «ENDFOREACH»
«ENDDEFINE»

«DEFINE BusinessRuleExtensionPoint FOR BusinessRule»
«REM»
    «IF !fileExist(getDomainModulePath() + "/" + getSrcManPath() + "/" + getBusinessRulesPackageAsPath() + "/" + javaClassName() + ".java")»
        «FILE getBusinessRulesPackageAsPath() + "/" + javaClassName() + ".java"»
«ENDREM»
	«IF fileExist(fullExtendPath(getDomainModuleName(), javaPathFileName(javaBusinessRuleClassPath(this.name) )))»
		«extend(getDomainModuleName(), javaPathFileName(javaBusinessRuleClassPath(this.name) ))»
	«ELSE»
		«FILE extend(getDomainModuleName(), javaPathFileName(javaBusinessRuleClassPath(this.name) ))»
            /**
             * Extension Point initial generated by Mod4j at: «timestamp()»
             */
            package «getBusinessRulesPackage()»;
            
            import org.springframework.validation.Errors;

            /**
             * «description»
             * 
             * This ExtensionPoint is intended to be manually changed by developers.
             * 
             */
            public class «javaBusinessRuleClass(this.name)» extends «javaBusinessRuleBaseClass(this.name)» {

                /**
                 *  {@inheritDoc} 
                 */
                public void validate(Object target, Errors errors) {
                    // TODO Implement validation code for business rule «name».
                }

            }   
        «ENDFILE»
    «ENDIF»
«ENDDEFINE»

«DEFINE addBusinessRulesValidators FOR BusinessClass»
    «EXPAND addPropertyValidator (this) FOREACH properties -»
    «FOREACH businessRules.typeSelect(BusinessRule) AS br -»
        validation.addValidator(new «br.name»());
    «ENDFOREACH» 
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR Property»
«REM»Nothing to expand«ENDREM»
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR IntegerProperty»
    «IF minValue != -2147483648 -»
        validation.addValidator(new MinValueValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_MINVALUE));
    «ENDIF»
    «IF maxValue != 2147483647 -»
        validation.addValidator(new MaxValueValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_MAXVALUE));
    «ENDIF»    
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR StringProperty»
    «IF minLength > -1 -»
        validation.addValidator(new MinLengthValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_MINLENGTH));
    «ENDIF»
    «IF maxLength > -1 -»
        validation.addValidator(new MaxLengthValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_MAXLENGTH));
    «ENDIF»
    «IF regularExpression.length > 0 -»
        validation.addValidator(new RegExpValidator(«javaClassName(bC)».class, "«name»", «name.toUpperCase()»_REGEXP));
    «ENDIF»
«ENDDEFINE»
