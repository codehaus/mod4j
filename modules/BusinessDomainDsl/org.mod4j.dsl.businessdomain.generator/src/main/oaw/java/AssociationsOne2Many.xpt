«IMPORT BusinessDomainDsl»


«EXTENSION Association»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«REM»
    Adds the accessor methods at the source side of a one to many association
    If the association is bidirectional, code is generated to uodate the target side as well.
«ENDREM»
«DEFINE one2ManyAccessorsTo FOR Association»
    /**
     * @return «targetRoleName» (List<«target.name»>) 
     */
    public «getCollectionInterface()»<«javaDomainClass(target.name)»> get«targetRoleName.toFirstUpper()» () {
        return Collections.unmodifiable«getCollectionInterface()»(this.«targetRoleName»);
    }

    /**
     * Implements adding single element to a collection
     */
    public void addTo«targetRoleName.toFirstUpper()»(«javaDomainClass(target.name)» element) {
        if ( element == null ) {
            return;
        }
        if ( this.«targetRoleName».contains(element) ) {
            return;
        }
        this.«targetRoleName».add(element);
    «IF this.bidirectional»
        if ( element.«getterFrom(this)»() != null ) {
            element.«getterFrom(this)»().z_internalRemoveFrom«targetRoleName»(element);
        }
        element.z_internalAddTo«sourceRoleName»( («javaDomainClass(source.name)»)((«javaDomainClass(source.name)»)this) );
        validation.validate();
    «ENDIF»
    }

    /**
     * Implements removal of a single element from feature 
     * 
     * @param element 
     */
    public void removeFrom«this.targetRoleName.toFirstUpper()»(«javaDomainClass(this.target.name)» element) {
        if ( element == null ) {
            return;
        }
        this.«this.targetRoleName».remove(element);
    «IF this.bidirectional -»
        element.z_internalRemoveFrom«this.sourceRoleName»( («javaDomainClass(this.source.name)»)((«javaDomainClass(this.source.name)»)this) );
    «ENDIF»
        validation.validate();
    }
    
    /**
     * This operation should NOT be used by clients.  It implements the correct
     * addition of an element in an association.
     * 
     * @param element 
     */
    public void z_internalAddTo«this.targetRoleName»(«javaDomainClass(this.target.name)» element) {
        this.«this.targetRoleName».add(element);
    }
    
    /**
     * This operation should NOT be used by clients. It implements the correct
     * removal of an element in an association.
     * 
     * @param element 
     */
    public void z_internalRemoveFrom«this.targetRoleName»(«javaDomainClass(this.target.name)» element) {
        this.«this.targetRoleName».remove(element);
    }
«ENDDEFINE»

«REM»
    Adds the accessor methods at the target side of a bidirectional one to many association.
    Code to update the o=ther side si generated as well.
«ENDREM»
«DEFINE one2ManyAccessorsFrom FOR Association»
    /**
     * Implements the setter of association end 
     * 
     * @param element 
     */
    public «javaDomainClass(this.source.name)» get«this.sourceRoleName.toFirstUpper()»() {
        return this.«this.sourceRoleName»;
    }

    /**
     * Implements the setter of association end 
     * 
     * @param element 
     */
    public void set«this.sourceRoleName.toFirstUpper()»(«javaDomainClass(this.source.name)» element) {
        if ( this.«this.sourceRoleName» != element ) {
            if ( this.«this.sourceRoleName» != null ) {
                this.«this.sourceRoleName».z_internalRemoveFrom«this.targetRoleName»( 
                                              («javaDomainClass(this.target.name)») ( («javaDomainClass(this.target.name)»)this) );
            }
            this.«this.sourceRoleName» = element;
            if ( element != null ) {
                element.z_internalAddTo«this.targetRoleName»( («javaDomainClass(this.target.name)»)((«javaDomainClass(this.target.name)»)this) );
            }
        }
        validation.validate();
    }
    
    /**
     * Should NOT be used by clients! Implements the correct setting of the link
     * for + owner : Customer when a single element is added to it.
     * 
     * @param element 
     */
    public void z_internalAddTo«this.sourceRoleName»(«javaDomainClass(this.source.name)» element) {
        this.«this.sourceRoleName» = element;
    }
    
    /**
     * Should NOT be used by clients! Implements the correct setting of the link for + owner : Customer 
     *                  when a single element is removed to it.
     * 
     * @param element 
     */
    public void z_internalRemoveFrom«this.sourceRoleName» («javaDomainClass(this.source.name)» element) {
        this.«this.sourceRoleName» = null;
    }

«ENDDEFINE»
