«IMPORT BusinessDomainDsl»

«EXTENSION Association»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE addToReferenceVariable FOR Association»
	/**
     *  «targetRoleName»: «description»
     */ 
    «IF isOne2One(this) -»
		private «target.name» «targetRoleName»;
  		«EXPAND AssociationsOne2One::one2OneAccessorsTo FOR this»
    «ELSEIF isMany2One() -»
        private «target.name» «targetRoleName»;
        «EXPAND AssociationsMany2One::many2OneAccessorsTo FOR this»
    «ELSEIF isOne2Many() -»
		private Set<«javaDomainClass(target.name)»> «targetRoleName» = new HashSet<«javaDomainClass(target.name)»>();
        «EXPAND AssociationsOne2Many::one2ManyAccessorsTo FOR this»
    «ELSEIF isMany2Many() -»
        private Set<«javaDomainClass(target.name)»> «targetRoleName» = new HashSet<«javaDomainClass(target.name)»>();
        «EXPAND AssociationsMany2Many::many2ManyAccessorsTo FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE addFromReferenceVariable FOR Association»
    «IF isOne2One(this) -»
        private «source.name» «sourceRoleName»;
        «EXPAND AssociationsOne2One::one2OneAccessorsFrom FOR this»
    «ELSEIF isMany2One() -»
        private Set<«javaDomainClass(source.name)»> «sourceRoleName» = new HashSet<«javaDomainClass(source.name)»>();
        «EXPAND AssociationsMany2One::many2OneAccessorsFrom FOR this»
    «ELSEIF isOne2Many() -»
        private «source.name» «sourceRoleName»;
        «EXPAND AssociationsOne2Many::one2ManyAccessorsFrom FOR this»
    «ELSEIF isMany2Many() -»
        private Set<«javaDomainClass(source.name)»> «sourceRoleName» = new HashSet<«javaDomainClass(source.name)»>();
    «ENDIF»
«ENDDEFINE»

«DEFINE OUDaddToOneAccessorMethods FOR Association»
	/**
	 *
	 * @return «targetRoleName» («target.name»)  «target.description»
	 */
	public «target.name» get«targetRoleName.toFirstUpper()» () {
   		return this.«targetRoleName»;
	}
	
	/**
	 *
	 * @param «targetRoleName» («target.name»)  «target.description»
	 */
	public void set«targetRoleName.toFirstUpper()» (final «target.name» «targetRoleName») {
   		this.«targetRoleName» = «targetRoleName»;
	}
«ENDDEFINE»

«DEFINE OUDaddToManyAccessorMethods FOR Association»
	/**
	 *
	 * @return «targetRoleName» (Set<«target.name»>) «target.description»
	 */
	public Set<«javaDomainClass(target.name)»> get«targetRoleName.toFirstUpper()» () {
   		return this.«targetRoleName»;
	}

	/**
	 *
	 * @param a«javaDomainClass(target.name)» («target.name») «target.description»
	 */
	public void add«target.name.toFirstUpper()» (final «javaDomainClass(target.name)» a«target.name») {
   		this.«targetRoleName».add(a«target.name»);
	}
	
	/**
	 *
	 * @param a«target.name» («javaDomainClass(target.name)») «target.description»
	 */
	public void remove«target.name.toFirstUpper()» (final «javaDomainClass(target.name)» a«target.name») {
   		this.«targetRoleName».remove(a«target.name»);
	}
«ENDDEFINE»
