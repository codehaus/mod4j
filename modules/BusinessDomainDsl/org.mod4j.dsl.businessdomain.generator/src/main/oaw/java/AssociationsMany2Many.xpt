«IMPORT BusinessDomainDsl»

«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION Association»

«DEFINE many2ManyAccessorsTo FOR Association»
    /**
     * @return «targetRoleName» (Set<«target.name»>).
     */
    public Set<«target.name»> get«targetRoleName.toFirstUpper()» () {
        return Collections.unmodifiableSet(this.«targetRoleName»);
    }

    /**
     * Implements adding single element to a collection.
     */
    public void addTo«targetRoleName.toFirstUpper()»(«javaDomainClass(target.name)» element) {
		if ( element == null ) {
			return;
		}
        if (!«targetRoleName».contains(element)) {
            «targetRoleName».add(element);
    «IF this.bidirectional -»
            element.addTo«sourceRoleName.toFirstUpper()»((«javaDomainClass(source.name)») this);
    «ENDIF -»
            validation.validate();
        }
    }
    
    /**
     * Implements removing a single element from a collection.
     */
    public void removeFrom«targetRoleName.toFirstUpper()»(«javaDomainClass(this.target.name)» element) {
		if ( element == null ) {
			return;
		}
        if («targetRoleName».contains(element)) {
            this.«this.targetRoleName».remove(element);
    «IF this.bidirectional -»
            element.removeFrom«sourceRoleName.toFirstUpper()»((«javaDomainClass(source.name)») this);
    «ENDIF -»
            validation.validate();
        }
    }
«ENDDEFINE»

«DEFINE many2ManyAccessorsFrom FOR Association»
    /**
     * @return «sourceRoleName» (Set<«source.name»>).
     */
    public Set<«source.name»> get«sourceRoleName.toFirstUpper()» () {
        return Collections.unmodifiableSet(this.«sourceRoleName»);
    }

    /**
     * Implements adding single element to a collection.
     */
    public void addTo«sourceRoleName.toFirstUpper()»(«javaDomainClass(source.name)» element) {
		if ( element == null ) {
			return;
		}
        if (!«sourceRoleName».contains(element)) {
            «sourceRoleName».add(element);
            element.addTo«targetRoleName.toFirstUpper()»((«javaDomainClass(target.name)») this);
            validation.validate();
        }
    }
    
    /**
     * Implements removing a single element from a collection.
     */
    public void removeFrom«sourceRoleName.toFirstUpper()»(«javaDomainClass(source.name)» element) {
		if ( element == null ) {
			return;
		}
        if («sourceRoleName».contains(element)) {
            this.«sourceRoleName».remove(element);
            element.removeFrom«targetRoleName.toFirstUpper()»((«javaDomainClass(target.name)») this);
            validation.validate();
        }
    }
«ENDDEFINE»
