«REM»
 Copyright (c) 2009 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT BusinessDomainDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE daoImplementationBase FOR BusinessDomainDsl::BusinessClass»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j BusinessDomainDsl generator: DaoImplBase.xpt") FOR this»

package «getDaoImplPackage()»;

import java.sql.SQLException;
import java.util.List;

import «javaDomainClassPath(this.name)»;
import «javaDomainExampleClassPath(this.name)»;
import «javaDaoBaseInterfacePath(this.name)»;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.MatchMode;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

/**
 * «javaDomainClass(this.name)» Data Access Object (DAO) Implementation. Responsible for Creating,
 * Reading, Updating, Deleting and retrieving lists of «javaDomainClass(this.name)» objects in the database.
 * All database access is done here.
 *  
 * @author Generated by Mod4j
 */
public class «javaDaoBaseClass(this.name)» extends HibernateDaoSupport implements «javaDaoBaseInterface(this.name)» {

    /**
     * {@inheritDoc}
     */
    public «javaDomainClass(this.name)» retrieve(Long id) {
        Object o = getHibernateTemplate().get(«javaDomainClass(this.name)».class, id);
        if (o == null) {
            return null;
        }
        return («javaDomainClass(this.name)») o;
    }

    /**
     * {@inheritDoc}
     */
    public «javaDomainClass(this.name)» add(«javaDomainClass(this.name)» object) {
        getHibernateTemplate().save(object);
        return object;
    }

   /**
    * {@inheritDoc}
    * With Hibernate persisted objects are automatically updated within the session, so nothing should happen here.
    * 
    * @param object The object to update.
    * @return «javaDomainClass(this.name)»
    **/ 
    public «javaDomainClass(this.name)» update(«javaDomainClass(this.name)» object) {
        getHibernateTemplate().flush();
        return object;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(«javaDomainClass(this.name)» object ) {
        getHibernateTemplate().delete(object);
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> listAll() {
        return getHibernateTemplate().find("from «javaDomainClass(this.name)»");
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> listPage(final int firstResult, final int maxResults) {

        DetachedCriteria criteria = DetachedCriteria.forClass(«javaDomainClass(this.name)».class);
        return getHibernateTemplate().findByCriteria(criteria, firstResult, maxResults);
    }

    /**
     * {@inheritDoc}
     */
    public long count() {
        return ((Long) getHibernateTemplate().iterate("select count(*) from «javaDomainClass(this.name)»").next()).longValue();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> findByExample(final «javaDomainExampleClass(this.name)» example) {
        List<«javaDomainClass(this.name)»> result;
        result = getHibernateTemplate().executeFind(new HibernateCallback() {
            public Object doInHibernate(final Session session)
                    throws HibernateException, SQLException {
                return session.createCriteria(«javaDomainClass(this.name)».class)
                    .add(Example.create(example)
                         .enableLike(MatchMode.ANYWHERE)
                         .ignoreCase()
                        )
                    .list();
            }
        });
        return result;
     }
}
«ENDDEFINE»
