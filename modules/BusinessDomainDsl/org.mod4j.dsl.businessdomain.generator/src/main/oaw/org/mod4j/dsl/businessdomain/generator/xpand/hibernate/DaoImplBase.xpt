«REM»
 Copyright (c) 2009 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT BusinessDomainDsl»

«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE daoImplementationBase FOR BusinessDomainDsl::BusinessClass»
«FILE generate(getDataModuleName(), javaPathFileName(javaDaoBaseClassPath(this.name) ))»
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN 
 *
 * Generated by Mod4j BusinessDomain DSL in DaoImplBase.xpt at: «timestamp()»
 */
package «getDaoImplPackage()»;

import java.sql.SQLException;
import java.util.List;

import «javaDomainClassPath(this.name)»;
import «javaDomainExampleClassPath(this.name)»;
import «javaDaoBaseInterfacePath(this.name)»;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.MatchMode;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

/**
 * «javaDomainClass(this.name)» Data Access Object (DOA) Implementation. Responsible for Creating,
 * Reading, Updating and Deleting «javaDomainClass(this.name)» objects in the database. All database
 * access is done here.
 *  
 * @author Generated by Mod4j
 */
public class «javaDaoBaseClass(this.name)» extends HibernateDaoSupport implements «javaDaoBaseInterface(this.name)» {

    public «javaDomainClass(this.name)» retrieve(Long id) {
        Object o = getHibernateTemplate().get(«javaDomainClass(this.name)».class, id);
        if (o == null) {
            return null;
        }
        return («javaDomainClass(this.name)») o;
    }
«REM»
    Cannot generate this without knowing what string attribute must be used.
    @SuppressWarnings("unchecked")
    public Forum retrieve(String id) {

        Iterator it = getHibernateTemplate().iterate(
                "from Forum f where onderwerp like ? ", id);
        if (it.hasNext()) {
            return (Forum) it.next();

        }
        return null;
    }
«ENDREM»
    public «javaDomainClass(this.name)» add(«javaDomainClass(this.name)» object) {
        getHibernateTemplate().save(object);
        return object;
    }

    public «javaDomainClass(this.name)» update(«javaDomainClass(this.name)» object) {
        getHibernateTemplate().save(object);
        return object;
    }

    public void delete(«javaDomainClass(this.name)» object ) {
        getHibernateTemplate().delete(object);
    }

    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> listAll() {
        return getHibernateTemplate().find("from «javaDomainClass(this.name)»");
    }

    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> findByExample(final «javaDomainExampleClass(this.name)» example) {
        List<«javaDomainClass(this.name)»> result;
        result = getHibernateTemplate().executeFind(new HibernateCallback() {
            public Object doInHibernate(final Session session)
                    throws HibernateException, SQLException {
                return session.createCriteria(«javaDomainClass(this.name)».class)
                    .add(Example.create(example)
                         .enableLike(MatchMode.ANYWHERE)
                         .ignoreCase()
                        )
                    .list();
            }
        });
        return result;
     }
}
«ENDFILE»
«ENDDEFINE»
