/* 
   This file contains the code to create a Crossx model from a BusinesDomainDsl model.
   Needed for crosssreference purposes.
*/

import crossx;
import BusinessDomainDsl;

create ModelInfo exportModel(BusinessDomainModel busModel, String modelFile) :
    this.setDslname("BusinessDomainDsl")->
    this.setModelname(busModel.name)->
    this.setResource(modelFile)->
    this.symbols.addAll(busModel.types.typeSelect(BusinessClass).toElement());
    
Symbol toElement(BusinessClass cls) :
    let result = new Symbol :
    result.setName(cls.name) ->
    result.setType("BusinessClass")->
    result.subSymbols.addAll(cls.properties.toElement() )->
    (cls.superclass != null ? result.subSymbols.addAll( cls.superclass.properties.toElement()): null)->
    result
    ;

crossx::Symbol toElement(BusinessDomainDsl::Property prop) :
    let result = new Symbol :
    result.setName(prop.name) ->
    result.setType("Property") ->
    result.properties.add(prop.toLiteralProperty())->
    result
    ;
    
crossx::LiteralSymbolProperty toLiteralProperty(BusinessDomainDsl::Property prop) :
    let result = new LiteralSymbolProperty :
	result.setName("DataType")->
	result.setValue(prop.dataType)->
    result
    ;

crossx::Symbol toElement(BusinessDomainDsl::EnumerationProperty prop) :
    let result = new Symbol :
    result.setName(prop.name) ->
    result.setType("Property") ->
    result.properties.add(prop.toLiteralProperty())->
    result
    ;

crossx::LiteralSymbolProperty toLiteralProperty(BusinessDomainDsl::EnumerationProperty prop) :
    let result = new LiteralSymbolProperty :
    result.setName("DataType")->
    result.setValue(prop.type.name)->
    result
    ;

    
    