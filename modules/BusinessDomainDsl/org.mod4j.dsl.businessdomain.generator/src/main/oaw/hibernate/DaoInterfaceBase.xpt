«REM»
 Copyright (c) 2009 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT BusinessDomainDsl»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE daoInterfaceBase  FOR BusinessDomainDsl::BusinessClass»
«FILE generate(getDataModuleName(), javaPathFileName(javaDaoBaseInterfacePath(this.name) ))»
/**
 * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN 
 *
 * Generated by Mod4j BusinessDomain DSL in DaoInterfaceBase.xpt at: «timestamp()»
 */
package «getDaoPackage()»;

import java.util.List;

import «javaDomainClassPath(this.name)»;
import «javaDomainExampleClassPath(this.name)»;

/**
 * «javaDaoBaseInterface(this.name)»Data Access Object (DAO). Responsible for accessing database.
 * 
 * @author Mod4j generated
 * 
 */
public interface «javaDaoBaseInterface(this.name)» {

    /**
     * Retrieves a «javaDomainClass(this.name)» by its ID from the database.
     * 
     * @param id id of the «javaDomainClass(this.name)» to retrieve.
     * @return «javaDomainClass(this.name)» retrieved or null when no «javaDomainClass(this.name)» was found.
     */
    «javaDomainClass(this.name)» retrieve(Long id);

    /**
     * Adds a new «javaDomainClass(this.name)» to the database
     * 
     * @param object
     *                the «javaDomainClass(this.name)» to add to the database.
     * @return the stored «this.name».
     */
    «javaDomainClass(this.name)» add(«javaDomainClass(this.name)» object);

    /**
     * Stores/Updates the «this.name» in the database. Inclusive all its posts.
     * 
     * @param object
     *                the «javaDomainClass(this.name)» to store/update
     * @return
     */
    «javaDomainClass(this.name)» update(«javaDomainClass(this.name)» object);

    /**
     * Deletes a «this.name» from the database.
     * 
     * @param object
     *                the «javaDomainClass(this.name)» to delete
     */
    void delete(«javaDomainClass(this.name)» object);

    /**
     * Selects all «javaDomainClass(this.name)»s from the database.
     * 
     * @return a List of all «javaDomainClass(this.name)» objects.
     */
    List<«javaDomainClass(this.name)»> listAll();

    /**
     * Selects «javaDomainClass(this.name)»s from the database that matches an
     * example object using Query-by-Example(QBE).
     * 
     * @return a List of «javaDomainClass(this.name)» objects.
     */
    List<«javaDomainClass(this.name)»> findByExample(«javaDomainExampleClass(this.name)» example);
}
«ENDFILE»
«ENDDEFINE»
