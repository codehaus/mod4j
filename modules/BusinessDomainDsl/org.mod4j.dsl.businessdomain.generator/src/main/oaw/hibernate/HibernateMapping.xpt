«IMPORT BusinessDomainDsl»

«EXTENSION BusinessRule»
«EXTENSION Association»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE header FOR BusinessDomainDsl::BusinessClass»
<?xml version="1.0"?>
<!-- Generated by Mod4j Hibernate Generator at «timestamp()» -->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
«ENDDEFINE»

«DEFINE mapping FOR BusinessDomainDsl::BusinessClass»
«FILE generate(getDataModuleName(), hibernateMappingFile(this.name) )»
«EXPAND header FOR this»

<!-- Mapping for class «this.name»
     Description «this.description»
  -->
<hibernate-mapping
    default-access="field"
    package="«getDomainRootPackage()»">
    «IF superclass == null -»
        «EXPAND rootClassMapping FOR this -»
    «ELSE»
        «EXPAND subclassMapping FOR this -»
    «ENDIF»
</hibernate-mapping>
«ENDFILE»
«ENDDEFINE»

«DEFINE rootClassMapping FOR BusinessDomainDsl::BusinessClass -»
    <class name="«javaDomainClass(this.name)»"
           table="«javaDomainClass(this.name)»_TABLE"
           optimistic-lock="version">
        <cache usage="read-write" />
        <id name="id" column="id" type="java.lang.Long">
            <generator class="native" />
        </id>
        <version name="version" unsaved-value="negative" />
        «EXPAND featureMappings FOR this -»
    </class>
«ENDDEFINE»

«DEFINE subclassMapping FOR BusinessDomainDsl::BusinessClass -»
    <union-subclass
        name="«javaDomainClass(this.name)»"
        table="«javaDomainClass(this.name)»_TABLE"
        extends="«javaDomainClass(this.superclass.name)»">
        «EXPAND featureMappings FOR this -»
    </union-subclass>
«ENDDEFINE»

«DEFINE featureMappings FOR BusinessDomainDsl::BusinessClass»
    «EXPAND mapping      FOREACH this.properties -»
    «EXPAND mappingsTo   FOREACH this.associationsTo -»
    «EXPAND mappingsFrom FOREACH this.associationsFrom.select(a | a.bidirectional) -»
«ENDDEFINE»

«DEFINE mapping FOR BusinessDomainDsl::Property -»
        <property name="«this.name»" 
        «IF this.uniqueRule() != null -»
            unique-key="«uniqueRule().name»"
        «ENDIF -»
        «IF !this.nullable»
            not-null="true"
        «ENDIF -»
        />
«ENDDEFINE»

«DEFINE mapping FOR EnumerationProperty -»
        <property name="«this.name»"        
        «IF this.uniqueRule() != null -»
            unique-key="«uniqueRule().name»"
        «ENDIF -»
        «IF !this.nullable»
            not-null="true"
        «ENDIF -»>
            <type name="«getDataRootPackage()».GenericEnumUserType">
                <param name="enumClass">«getDomainRootPackage()».«this.type.name»</param>
            </type>
        </property>
«ENDDEFINE»

«DEFINE mapping FOR DateTimeProperty -»
        <property name="«this.name»"      
        «IF this.uniqueRule() != null -»
            unique-key="«uniqueRule().name»"
        «ENDIF -»
        «IF !this.nullable»
            not-null="true"
        «ENDIF -»
              type="org.joda.time.contrib.hibernate.PersistentDateTime" />
«ENDDEFINE»

«REM»mapping for outgoing associations«ENDREM»
«DEFINE mappingsTo FOR Association -»
    «IF isOne2Many(this)»
		«EXPAND one2manyMappingTo FOR this -»
	«ELSEIF isOne2One(this)»
		«EXPAND one2oneMappingTo FOR this -»
	«ELSEIF isMany2One(this)»
		«EXPAND many2oneMappingTo FOR this -»
	«ELSEIF isMany2Many(this)»
		«EXPAND many2manyMappingTo FOR this -»
    «ELSE»
	<!-- WARNING mappingsTo(Association) no generation for : «this.name» -->
    «ENDIF»
«ENDDEFINE»

«DEFINE mappingsFrom FOR Association -»
	«IF this.bidirectional»
	    «IF isOne2Many(this)»
			«EXPAND one2manyMappingFrom FOR this -»
		«ELSEIF isOne2One(this)»
			«EXPAND one2oneMappingFrom FOR this -»
		«ELSEIF isMany2One(this)»
			«EXPAND many2oneMappingFrom FOR this -»
		«ELSEIF isMany2Many(this)»
			«EXPAND many2manyMappingFrom FOR this -»
	    «ELSE»
		<!-- WARNING mappingsFrom(Association) no generation for : «this.name» -->
	    «ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE one2manyMappingTo FOR Association -»
		<!-- one2manyMappingTo -->
        <set name="«this.targetRoleName»" inverse="false"
            cascade="save-update">
            <key>
                <column name="«this.sourceRoleName»_ID" />
            </key>
            <one-to-many
                class="«javaDomainClass(this.target.name)»" 
             />
        </set>
«ENDDEFINE»

«REM»Reverse navigable association from the target.
     This is generat3ed in the target class.
«ENDREM»
«DEFINE one2manyMappingFrom FOR Association -»
		<!-- one2manyMappingFrom -->
        <many-to-one name="«sourceRoleName»"
            class="«javaDomainClass(this.source.name)»"
            not-null="false" column="«this.sourceRoleName»_ID" />
«ENDDEFINE»

«DEFINE many2oneMappingTo FOR Association -»
		<!-- many2oneMappingTo -->
        <many-to-one name="«targetRoleName»"
            class="«javaDomainClass(this.target.name)»" 
            not-null="false" column="«this.targetRoleName»_ID"
        />
«ENDDEFINE»

«REM»Reverse navigable association from the target.
     This is generat3ed in the target class.
«ENDREM»
«DEFINE many2oneMappingFrom FOR Association -»
        <!-- many2oneMappingFrom -->
        <set name="«this.sourceRoleName»" inverse="false"
            cascade="save-update">
            <key>
                <column name="«this.targetRoleName»_ID" />
            </key>
            <one-to-many
                class="«javaDomainClass(this.source.name)»" 
             />
        </set>
«ENDDEFINE»

«DEFINE one2oneMappingTo FOR Association -»
		<!-- one2oneMappingTo -->
        <one-to-one name="«targetRoleName»" 
                    class="«javaDomainClass(this.target.name)»"
         /> 
«ENDDEFINE»

«DEFINE one2oneMappingFrom FOR Association -»
		<!-- one2oneMappingFrom -->
        <one-to-one name="«sourceRoleName»" 
                    class="«javaDomainClass(this.source.name)»"
         /> 
«ENDDEFINE»

«DEFINE many2manyMappingTo FOR Association -»
        <set name="«this.targetRoleName»" table="«this.source.name»_«this.target.name»">
            <key column="«this.source.name»_ID" not-null="true" />
            <many-to-many class="«javaDomainClass(this.target.name)»" column="«this.target.name»_ID" />
        </set>
«ENDDEFINE»

«DEFINE many2manyMappingFrom FOR Association -»
«REM»TODO«ENDREM»
«ENDDEFINE»