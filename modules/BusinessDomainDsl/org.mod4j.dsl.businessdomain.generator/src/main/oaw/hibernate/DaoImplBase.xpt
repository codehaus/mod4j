«IMPORT BusinessDomainDsl»

«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE daoImplementationBase FOR BusinessDomainDsl::BusinessClass»
«FILE generate(getDataModuleName(), javaPathFileName(javaDaoBaseClassPath(this.name) ))»
/**
 * Generated by Mod4j at «timestamp()»
 */
package «getDaoPackage()»;

import java.util.List;

import «javaDomainClassPath(this.name)»;

import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

/**
 * «javaDomainClass(this.name)» Data Access Object (DOA) Implementation. Responsible for Creating,
 * Reading, Updating and Deleting «javaDomainClass(this.name)» objects in the database. All database
 * access is done here.
 *  
 * @author Generated by Mod4j
 */
public class «javaDaoBaseClass(this.name)» extends HibernateDaoSupport implements «javaDaoBaseInterface(this.name)» {

    public «javaDomainClass(this.name)» retrieve(long id) {
        Object o = getHibernateTemplate().get(«javaDomainClass(this.name)».class, new Long(id));
        if (o == null) {
            return null;
        }
        return («javaDomainClass(this.name)») o;
    }
«REM»
    Cannot generate this without knowing what string attribute must be used.
    @SuppressWarnings("unchecked")
    public Forum retrieve(String id) {

        Iterator it = getHibernateTemplate().iterate(
                "from Forum f where onderwerp like ? ", id);
        if (it.hasNext()) {
            return (Forum) it.next();

        }
        return null;
    }
«ENDREM»
    public «javaDomainClass(this.name)» add(«javaDomainClass(this.name)» object) {
        getHibernateTemplate().save(object);
        return object;
    }

    public «javaDomainClass(this.name)» update(«javaDomainClass(this.name)» object) {
        getHibernateTemplate().save(object);
        return object;
    }

    public void delete(«javaDomainClass(this.name)» object ) {
        getHibernateTemplate().delete(object);
    }

    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> listAll() {
        return getHibernateTemplate().find("from «javaDomainClass(this.name)»");
    }
}
«ENDFILE»
«ENDDEFINE»
