<?xml version="1.0"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
    <!--
        Please edit this file with the Eclipse XML editor, set your XML editor to a line length of 80 characters, indent-size of
        4 characters and not using tab-characters, and format the file (Ctrl-Shift-F) before checking in. This should minimize
        the number of non-significant differences when comparing versions.
    -->
<document>
    <properties>
        <title>Welcome to Mod4j</title>
    </properties>
    <body>
        <section name="Welcome to Mod4j">
            <p>
                Mod4j is a project that focuses on Model Driven Software Development. It's goal is to improve the productivity
                and quality
                of Java software development by using Domain Specific Languages (DSL's).
            </p>
            <p>
                The DSL's and the corresponding code generators are based on a reference architecture. This allows developers to
                model various aspects of the application and generate code that strictly follows this reference architecture.
            </p>
            <p>
                The reference architecture is described in a separate document which can be found at
                <a href="https://mod4j.smart-java.nl/docs/">https://mod4j.smart-java.nl/docs/</a>
                For a good understanding of the generated code it is useful to read this document.
            </p>
            <img src="images/mod4j-diagram.jpg" align="left" alt="" />
            <subsection name="About Mod4j">
                <ul>
                    <li>
                        <a href="guide-helping.html">Can I get involved?</a>
                    </li>
                    <li>
                        <a href="developer-guide.html">The Mod4j developer guide</a>
                    </li>
                    <li>
                        The Mod4j user guide (
                        <a href="documentation/user-guide/mod4j-user-guide.html">HTML</a>
                        ,
                        <a href="documentation/user-guide/mod4j-user-guide.pdf">PDF</a>
                        )
                    </li>
                </ul>
            </subsection>

            <subsection name="Getting started">
                <ol>
                    <li>
                        Make sure you've installed Java JDK version 5 (1.5.0_15 or higher). You can download one from the
                        <a href="http://java.sun.com/javase/downloads/index.jsp">Sun download site</a>
                        .
                    </li>
                    <li>
                        Install Eclipse Ganymede 3.4 SR1 for Java2EE Developers. You can download one from the Eclipse
                        <a href="http://www.eclipse.org/downloads">download site.</a>
                        <br />
                    </li>
                    <li>
                        Install, using the Update Manager, at least the following plugins into Eclipse:
                        <ul>
                            <li>
                                OpenArchitectureWare Eclipse 4.3.0 (4.3.0.20080508-1430PRD).
                                <b>
                                    Update site:
                                    <code>http://www.openarchitectureware.org/updatesite/milestone/site.xml</code>
                                </b>
                            </li>
                            <li>
                                QforEclipse 0.8.0 Eclipse plugin for Maven2 projects.
                                <b>
                                    Update site:
                                    <code>http://q4e.googlecode.com/svn/trunk/updatesite</code>
                                </b>
                            </li>
                        </ul>
                    </li>
                    <li>
                        Install Apache Maven 2.0.9 or higher. For download and install instructions see the
                        <a href="http://maven.apache.org">Apache Maven site</a>
                    </li>
                    <li>
                        Make sure you start Eclipse with de right jdk, e.g on a linux system:
                        <q>/path-to-eclipse-mod4j/Eclipse-europa/eclipse -vm
                            /path-to-jdk1.5.0_15/jre/bin/java</q>
                    </li>
                    <li>
                        Make sure the text file encoding in Eclipse is set to 'UTF-8'. You can verify and set this in the field
                        'Text file encoding' by navigating to 'Window -> Preferences... -> General -> Workspace'. For Linux
                        users UTF-8 is usually the platform encoding, and no change will be necessary.
                    </li>
                    <li>Install the Mod4j DSL Eclipse plug-in as described in the next section.</li>
                </ol>
            </subsection>

            <subsection name="Installing the Mod4j DSL Eclipse plug-in">
                <p>
                    The Mod4j DSL Eclipse plug-in can be installed from the Mod4j update site:
                    <br />
                    <br />
                    <b>
                        <big>
                            Mod4j update site:
                            <code>https://repo.smart-java.nl/mod4j/updatesite</code>
                        </big>
                    </b>
                </p>
                <ol>
                    <li>In Eclipse navigate to: Help, Software Updates, Find and Install...</li>
                    <li>Choose the option "Search for new features to install" and click on "Next".</li>
                    <li>To create a new remote site for Mod4j, click on "New Remote Site".</li>
                    <li>Enter a Name: "Mod4j update site"</li>
                    <li>Enter the URL: https://repo.smart-java.nl/mod4j/updatesite and click on "OK"</li>
                    <li>After clicking on "Finish" you will be prompted for your SMART-Java username and password</li>
                    <li>
                        Next you can select the Mod4j features of your choice. Complete the wizard to install the chosen
                        features.
                    </li>
                </ol>
            </subsection>

            <subsection name="Modelling">
                <p>If you've completed the installation steps above, you're ready for moddeling...</p>
                <p>
                    You can create the following Mod4j models in your project:
                    <br />
                    <br />
                    <img src="images/mod4j-business.ico" align="left" alt="" />
                    BusinessDomain model
                    <br />
                    <img src="images/mod4j-datacontract.ico" align="left" alt="" />
                    DataContract model
                    <br />
                    <img src="images/mod4j-service.ico" align="left" alt="" />
                    Service model
                    <br />
                    Presentation model -- NOT AVAILABLE YET
                </p>

                <ol>
                    <li>
                        First of all you need to create a new Eclipse project for the Mod4j DSL models you are going to create.
                        <br />
                        For instance if you want to create a new BusinessDomain model, choose:
                        <q>File, New, Project, Xtext DSL Wizards, Mod4j BusinessDomainDSL project</q>
                        .
                    </li>
                    <li>
                        Enter the Application name of the project. For instance:
                        <b>MyApplication</b>
                    </li>
                    <li>
                        Enter a Root package. For instance:
                        <b>org.mycompany.myapplication</b>
                    </li>
                    <li>
                        Uncheck the "Use default location" checkbox and choose a location where all model projects and modules
                        for your application can be placed.
                        <br />
                        While your project develops over time, this folder will contain the project modules you create,
                        all
                        generated project modules and the generated Maven parent-POM.
                        <br />
                        We suggest (commonly used) you use the following folder structure:
                        <br />
                        <code>
                            <b>path-to-your-projects/MyApplication/modules</b>
                        </code>
                    </li>
                    <li>
                        After finishing the wizard, a new project is created with the name
                        <b>MyApplication-dslModels</b>
                        and a directory structure like this:
                        <br />
                        <code>
                            <b>src/model/BusinessDomain/SampleModel.busmod</b>
                        </code>
                        (the model file containing the elements of your businessdomain model)
                        <br />
                        <code>
                            <b>src/model/dataContract/SampleModel.dtcmod</b>
                        </code>
                        (the model file containing the elements of your datacontract model)
                        <br />
                        <code>
                            <b>src/model/service/SampleModel.sermod</b>
                        </code>
                        (the model file containing the elements of your service model)
                        <br />
                        <code>
                            <b>src/model/mod4j.properties</b>
                        </code>
                        (the property file containing input parameters for code generation)
                    </li>
                    <li>
                        For modeling the businessdomain model of your application, open the file
                        <code>src/model/businessDomain/SampleModel.busmod</code>
                        with the
                        <code>BusinessDomain Model Editor</code>
                        .
                    </li>
                    <li>Here you can add the classes, attributes, businessrules, associations etc. of your BusinessDomain
                        model. See our usermanual for more information about how to setup your BusinessDomain model.</li>
                    <li>You can setup your DataContract- and Service model in the same way. </li>
                    <li>
                        After saving your models in Eclipse, the (re)sources for your application are automatically generated. See
                        next section.
                    </li>
                </ol>
            </subsection>

            <subsection name="Generating source code">
                <p>
                    If you've completed and saved your model(s) as described in the previous section, the source code and
                    resources for your
                    application are automatically generated out of the model(s). Here is were you can find
                    them:
                </p>
                <ol>
                    <li>
                        The generated sources and resources for the
                        <b>domain</b>
                        and
                        <b>data</b>
                        modules are generated into the location folder for your modules, right beside the
                        <code>MyApplication.dslModels</code>
                        folder. See:
                        <code>../MyApplication-domain</code>
                        and
                        <code>../MyApplication-data</code>
                    </li>
                    <li>
                        The generated sources are placed in the
                        <code>genertated-sources</code>
                        and
                        <code>genertated-resources</code>
                        folders
                        <code>MyApplication-domain/generated-sources</code>
                        and resources in
                        <code>MyApplication-data/generated-resources</code>
                        <br />
                        All Extension Points (see also next section) are initial generated into the src/main/.. folders.
                    </li>
                    <li>
                        Since the generated mdules are fully Mavenized you can import the generated modules as Maven projects
                        into Eclipse. But first you'll need to install the also generated parent-POM.
                        <br />
                        Open a command console and type:
                        <code>
                            <b>mvn clean install</b>
                        </code>
                        <br />
                        Now the parent-POM and submodules are installed and you can import them as Maven projects into Eclipse.
                        <br />
                        Choose: Import, Maven 2, Maven 2 Project
                        <br />
                        and navigate to ../MyApplication-domain
                    </li>
                    <li>Check if the generated-(re)sources folders are added as sourcefolders. If not do it manually.</li>
                    <li>Import the MyApplication-data module in the same way.</li>
                </ol>
            </subsection>

            <subsection name="Extension Points">
                <p>
                    There are several reasons to mention why a developer needs to manually add (re)sources to the generated
                    (re)sources by Mod4j.
                </p>
                <ul>
                    <li>To implement business rules</li>
                    <li>To</li>
                </ul>
                <p>
                    For these reasons with Mod4j you can use Extension Points. Extension Points are extends to the generated
                    (re)sources and provide a place where developers manually can make additions to- or change the behaviour of
                    the system. Initial Mod4j generates Extension Points once if they do not exist already. So Extension Points
                    will not be overwritten by the generator.
                </p>
                <p>
                    Typically Extension Points are placed under the
                    <code>src</code>
                    folder of a module and needs to be added to the projects versioncontrol system.
                </p>
            </subsection>

        </section>
        <section name="Latest News">
            <ul>
                <li>Mod4j 0.9 released. - June 2008</li>
                <li>Mod4j development team started. - March 2008</li>
            </ul>
        </section>
    </body>
</document>
