<?xml version="1.0"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!-- 
    Please edit this file with the Eclipse XML editor, set your XML editor to
    a line length of 80 characters, indent-size of 4 characters and not using
    tab-characters, and format the file (Ctrl-Shift-F) before checking in. This
    should minimize the number of non-significant differences when comparing
    versions.
-->
<document>
    <properties>
        <title>Welcome to Mod4j</title>
    </properties>
    <body>
        <section name="Welcome to Mod4j">
            <p>
                Mod4j is a project that focuses on Model Driven Software Development. It's goal is to improve the
                productivity of Java software development by using Domain Specific Languages.
            </p>
            <p>
                The DSL's and the corresponding code generation are based on a reference architecture. This allows
                developers to model various aspects of the application and generate code that strictly follows this
                reference architecture.
            </p>
            <p>
                The reference architecture is described in a separate document which can be found at
                <a href="https://refapp.smart-java.nl/docs/">https://refapp.smart-java.nl/docs/</a>
                For a good understanding of the generated code it is useful to read this document.
            </p>

            <subsection name="About Mod4j">
                <ul>
                    <li>
                        <a href="features.html">What are the features of Mod4j?</a>
                    </li>
                    <li>
                        <a href="guide-helping.html">Can I get involved?</a>
                    </li>
                    <li>
                        <a href="developer-guide.html">The Mod4j developer guide</a>
                    </li>
                    <li>
                        The Mod4j user guide (
                        <a href="documentation/user-guide/mod4j-user-guide.html">HTML</a>
                        ,
                        <a href="documentation/user-guide/mod4j-user-guide.pdf">PDF</a>
                        )
                    </li>
                </ul>
            </subsection>

            <subsection name="Getting started">
                <ol>
                    <li>
                        Make sure you've installed Java JDK version 5 (1.5.0_15 or higher). You can download one from
                        the
                        <a href="http://java.sun.com/javase/downloads/index.jsp">Sun download site</a>
                        .
                    </li>
                    <li>
                        <a href="https://mod4j.smart-java.nl/docs/downloads">Download</a>
                        and install Eclipse with modeling plug-ins. To minimize time spending on version en dependency
                        conflicts we already have a version waiting for you to download. This version based on Eclipse
                        Europa 3.3.2, OAW 4.3, EMF 2.3.1 and has some convenient plug-ins (like Q4E and Subclipse). You
                        can download a Windows or Linux archive from our project share
                        <a href="https://mod4j.smart-java.nl/docs/downloads">here</a>
                    </li>
                    <li>
                        Make sure you start Eclipse with de right options, e.g on a linux system:
                        /path-to-eclipse-mod4j/Eclipse-europa/eclipse -vm /path-to-jdk1.5.0_15/jre/bin/java -vmargs
                        -Xms512m -Xmx512m -XX:PermSize=512m -XX:MaxPermSize=512m
                    </li>
                    <li>
                        Make sure the text file encoding in Eclipse is set to 'UTF-8'. You can verify and set this in
                        the field 'Text file encoding' by navigating to 'Window -> Preferences... -> General ->
                        Workspace'. For Linux users UTF-8 is usually the platform encoding, and no change will be
                        necessary.
                    </li>
                    <li>Install the Mod4j DSL Eclipse plug-in as described in the next section.</li>
                </ol>
            </subsection>

            <subsection name="Installing the Mod4j DSL Eclipse plug-in">
                <p>
                    The Mod4j DSL Eclipse plug-in can be installed from the Mod4j update site:
                    <br />
                    <br />
                    <b>
                        <big>
                            Mod4j update site:
                            <code>https://repo.smart-java.nl/mod4j/updatesite</code>
                        </big>
                    </b>
                </p>
                <ol>
                    <li>In Eclipse navigate to: Help, Software Updates, Find and Install...</li>
                    <li>Choose the option "Search for new features to install" and click on "Next".</li>
                    <li>To create a new remote site for Mod4j, click on "New Remote Site".</li>
                    <li>Enter a Name: "Mod4j update site"</li>
                    <li>Enter the URL: https://repo.smart-java.nl/mod4j/updatesite and click on "OK"</li>
                    <li>After clicking on "Finish" you will be prompted for your SMART-Java username and password</li>
                    <li>
                        Next you can select the Mod4j features of your choice. Complete the wizard to install the chosen
                        features.
                    </li>
                </ol>
            </subsection>

            <subsection name="Modelling">
                <p>If you've completed the installation steps above, you're ready for moddeling...</p>
                <p>You can use the following DSL's in your project:</p>
                <ul>
                    <li>BusinessDomainDSL</li>
                    <li>ContractDataDSL -- NOT AVAILABLE YET</li>
                    <li>ServiceDSL -- NOT AVAILABLE YET</li>
                    <li>PresentationDSL -- NOT AVAILABLE YET</li>
                </ul>

                <ol>
                    <li>
                        First of all you need to create a new Eclipse project for the DSL you're going to use.
                        <br />
                        For instance if you want to create a new BusinessDomain model, choose:
                        <q>File, New, Project, Xtext DSL Wizards, Mod4j BusinessDomainDSL project</q>
                        .
                    </li>
                    <li>
                        Enter the Application name of the project. For instance:
                        <b>MyApplication</b>
                    </li>
                    <li>
                        Enter a Root package. For instance:
                        <b>org.mycompany.myapplication</b>
                    </li>
                    <li>
                        Uncheck the "Use default location" checkbox and choose a location where all model projects and modules for your application can be placed. 
                        <br />
                        While your project develops, this folder will contain all your DSL model projects you create, all generated mavenized modules and the
                        generated Maven parent-POM.
                    <br />
                    We suggest (commonly used) you use the following folder structure:
                    <br />
                    <code><b>path-to-your-projects/MyApplication/modules</b></code>
                    </li>
                    <li>
                        After finishing the wizard, a new model project is created with a directory structure like:
                        <br />
                        <code><b>model/model.busmod</b></code>
                        (the model file containing all the elements of your business model)
                        <br />
                        <code><b>workflow/businessGenerator.oaw</b></code>
                        (the workflow file containing all processing steps for generation)
                        <br />
                        <code><b>workflow/workflow.properties</b></code>
                        (the property file for the workflow, to be changed as needed)
                    </li>
                    <li>
                        For modeling the business domain model of your application, open the file
                        <code>model/model.busmod</code>
                    </li>
                    <li>
                        Here you can add the classes, attributes, businessrules, associations etc. of your business
                        model.
                    </li>
                    <li>
                        After saving your model :), you are ready for generating the (re)sources for your application.
                        See next section.
                    </li>
                </ol>
            </subsection>

            <subsection name="Generating source code">
                <p>
                    If you've completed your model(s) in the previous section, you're ready for generating source code
                    out of the models.
                </p>
                <ol>
                    <li>
                        Right-click on the file
                        <code>workflow/businessGenerator.oaw</code>
                        and choose
                        <code>Run as.., oAW Workflow.</code>
                    </li>
                    <li>
                        The previous step generated two modules right beside the MyApplication.BusinessDomain.Model
                        project folder. See:
                        <code>../MyApplication-domain</code>
                        and
                        <code>../MyApplication-data</code>
                    </li>
                    <li>
                        Typically the generated sources are placed under the target folder
                        <code>MyApplication-domain/target/generated-sources</code>
                        and resources in
                        <code>MyApplication-data/target/generated-resources</code>
                        <br />
                        All Extension Points (see also next section) are initial generated into the src/main/.. folders.
                    </li>
                    <li>
                        Since the generated mdules are fully Mavenized you can import the generated modules directly as
                        Maven projects into Eclipse.
                        <br />
                        Choose: Import, Maven 2, Maven 2 Project
                        <br />
                        and navigate to ../MyApplication-domain
                    </li>
                    <li>
                        Check if the generated-(re)sources folders are added as sourcefolders. If not do it manually.
                    </li>
                    <li>Do the same with the MyApplication-data module.</li>
                </ol>

            </subsection>

            <subsection name="Extension Points">
                <p>
                    There are several reasons to mention why a developer needs to manually add (re)sources to the
                    generated (re)sources by Mod4j.
                </p>
                <ul>
                    <li>To implement business rules</li>
                    <li>To</li>
                </ul>
                <p>
                    For these reasons with Mod4j you can use Extension Points. Extension Points are extends to the
                    generated (re)sources and provide a place where developers manually can make additions to- or change
                    the behaviour of the system. Initial Mod4j generates Extension Points once if they do not exist
                    already. So Extension Points will not be overwritten by the generator.
                </p>
                <p>
                    Typically Extension Points are placed under the
                    <code>src</code>
                    folder of a module and needs to be added to the projects versioncontrol system.
                </p>
            </subsection>

        </section>
        <section name="Latest News">
            <ul>
                <li>Mod4j 0.9 released. - June 2008</li>
                <li>Mod4j development team started. - March 2008</li>
            </ul>
        </section>
    </body>
</document>
