/* 
 * Operations implemented in Java 
 */
import ServiceDsl;

extension org::mod4j::crossx::broker::xtend::Crossx ;

String JavaType(DtoReference dto) :
    let dtoSymbol = lookupSymbol(dto.modelname, dto.name, "Dto") :
    let dtoType = dtoSymbol.getPropertyValue("dtoType") :
    let baseDto = dtoSymbol.getPropertyValue("baseDto") :
    switch( dtoType ){
        case 'ListDto' : 'List<' +  baseDto + '>'
        default : dto.name
    }
;

/** Get the name of the businessclass for dto, returns "void" if the dto does not have a businessclass
 */
String businessClass(DtoReference dto) :
    let dtoSymbol = lookupSymbol(dto.modelname, dto.name, "Dto") :
    let businessClass = dtoSymbol.getPropertyValue("businessClass") :
    (businessClass == null) ? "void": businessClass
;

String baseDto(DtoReference dto) :
    let dtoSymbol = lookupSymbol(dto.modelname, dto.name, "Dto") :
    let base = dtoSymbol.getPropertyValue("baseDto") :
    (base == null) ? "void" : base
;

String dtoType(DtoReference dto) :
    let dtoSymbol = lookupSymbol(dto.modelname, dto.name, "Dto") :
    let dtoType = dtoSymbol.getPropertyValue("dtoType") :
    (dtoType == null) ? "void": dtoType
;

String dtoBase(DtoReference dto) :
    let dtoSymbol = lookupSymbol(dto.modelname, dto.name, "Dto") :
    let dtoBase = dtoSymbol.getPropertyValue("businessClass") :
    (dtoBase == null) ? "void": dtoBase
;

/** Find all method of a special type, 
 */
List[SpecialMethod] uniqueMethods(ServiceModel model, MethodType typeToFind) :
	let createMethods = model.methods.typeSelect(SpecialMethod).select(m| m.type == typeToFind) :
 	let uniqueNames = createMethods.name.toSet() :
 	let uniqueBusinessClassesNew = createMethods.dto.businessClass().toSet() :
 	let uniqueCreateMethodsNew = uniqueBusinessClassesNew.collect(cls| createMethods.selectFirst(m|m.dto.businessClass() == cls)) :
 	let uniqueCreateMethods = uniqueNames.collect(unique | createMethods.selectFirst(m|m.name == unique)) :
 	uniqueCreateMethodsNew
;

List[String] uniqueBusinessClasses(ServiceModel model) :
    model.dtoReferences.select(dtoRef|dtoRef.dtoType() == "BusinessClassDto").dtoBase().toSet()
;

crossx::Symbol getAssociation(AssociationMethod method) :
      let mainSymbol = lookupSymbol(method.main.modelname, method.main.name, "Dto") :
      let baseClassRef = getReferenceProperty(mainSymbol, "BaseClass") :
      let class = lookupReference( baseClassRef) :
      let assoc = lookupSubSymbol(class, method.rolename, "Association") : 
      assoc
;