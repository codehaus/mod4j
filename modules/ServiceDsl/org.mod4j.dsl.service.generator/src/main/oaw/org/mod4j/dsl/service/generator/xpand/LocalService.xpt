«REM»
	  Copyright (c) 2009 Ordina and committers to Mod4j
	  All rights reserved. This program and the accompanying materials
	  are made available under the terms of the Eclipse Public License v1.0
	  which accompanies this distribution, and is available at
	  http://www.eclipse.org/legal/epl-v10.html
	 
	  Contributors:
	      Ordina - initial implementation
«ENDREM»
«IMPORT ServiceDsl»
«IMPORT crossx»

«EXTENSION org::mod4j::dsl::service::mm::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 

«DEFINE LocalService FOR ServiceModel» 
    /**
     * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN 
     *
     * Generated by Mod4j Service DSL: LocalService::LocalService at: «timestamp()»
     * from model «this.name»
     */
	package «getServiceRootPackage()»;

	import java.util.List;

	«FOREACH this.dtoReferences.select(e|e.dtoType() != "ListDto") AS dto -»
	    import «getServiceRootPackage()».dto.«dto.name»;
	«ENDFOREACH»
	«FOREACH this.dtoReferences.select(e|e.dtoType() == "ListDto") AS dto -»
	    «LET lookupSymbol(dto.modelname, dto.name, "Dto").getPropertyValue("baseDto") AS baseDtoName»
	        import «getServiceRootPackage()».dto.«baseDtoName»;
	    «ENDLET»
	«ENDFOREACH»

	/**
	 * @author Generated by Mod4j
	 */
	public interface «javaLocalServiceInterface(name)» {

	«FOREACH this.methods.typeSelect(CustomMethod) AS method»
	    «EXPAND CustomMethod FOR method»
	«ENDFOREACH»	

	«FOREACH this.methods.typeSelect(SpecialMethod) AS method»
		«IF method.type == MethodType::CREATE»
			«EXPAND CreateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::READ»
			«EXPAND ReadMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::UPDATE»
			«EXPAND UpdateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::DELETE»
			«EXPAND DeleteMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::LISTALL»
			«EXPAND ListallMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::FIND»
			«EXPAND FindMethod FOR method»
		«ENDIF»
	«ENDFOREACH»	

	«EXPAND Associations FOR  this»
	}
«ENDDEFINE»

«DEFINE CustomMethod FOR CustomMethod»
		/** 
		 * Description: «this.description»
	     * @params «this.inParameters.name»
	     * @return «this.output.name»
	     */
	    public «JavaType(this.output)» «this.name» ( «EXPAND Parameter FOREACH this.inParameters SEPARATOR ','» );
«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«JavaType(type)»  «this.name»
«ENDDEFINE»

«DEFINE CreateMethod FOR SpecialMethod»
    /**
     * Create a new «this.dto.name».
     * «description»
     *
     * @param object 
     *            The «this.dto.name» to create.
     * @return the «this.dto.name» created, possibly modified during creation.
     */
    public «JavaType(this.dto)» «this.name»(«JavaType(this.dto)» object);
«ENDDEFINE»

«DEFINE ReadMethod FOR SpecialMethod»
    /**
     * Read an existing «this.dto.name».
     * «description»
     *
     * @param object 
     *            The id of the «this.dto.name» to read.
     * @return 
     */
    public «JavaType(this.dto)» «this.name»(Long id);
«ENDDEFINE»

«DEFINE UpdateMethod FOR SpecialMethod»
    /**
     * Update an existing «this.dto.name».
     * «description»
     * 
     * @param object
     *            The «this.dto.name» containing the modifications for the corresponding «JavaType(this.dto)»
     * @return the «this.dto.name» updated, possibly modified during update.
     */
    public «JavaType(this.dto)» «this.name»(«JavaType(this.dto)» object);
«ENDDEFINE»

«DEFINE DeleteMethod FOR SpecialMethod»
    /**
     * «description»
     *
     * @param id
     *            The id of the «this.dto.name» to delete.
     */
    public void «this.name»(«JavaType(this.dto)» object);
«ENDDEFINE»

«DEFINE ListallMethod FOR SpecialMethod»
    /**
     * «description»
     */
    public List<«JavaType(this.dto)»> «this.name»( );
«ENDDEFINE»

«DEFINE FindMethod FOR SpecialMethod»
    /**
     * Find method: «description»
     */
    public List<«JavaType(this.dto)»> «this.name»(«JavaType(this.dto)» example);
«ENDDEFINE»

«DEFINE Associations FOR ServiceModel»
	«FOREACH this.methods.typeSelect(AssociationMethod) AS method»
	«LET getAssociation(method) AS assoc» 
	«LET getPropertyValue(assoc, "Multiplicity") AS mult»
    «LET ((mult == "ONE") ? "set" : "addTo") + method.rolename.toFirstUpper() AS genName»
    	«IF method.type == MethodType::ADDTO»
	    public void «genName»(«method.part.name» part, «method.main.name» whole);
		«ENDIF»
		
		«IF method.type == MethodType::REMOVEFROM»
			public void removeFrom«method.rolename.toFirstUpper()»(«method.part.name» part, «method.main.name» whole);
		«ENDIF»
	
	«ENDLET»
	«ENDLET»
	«ENDLET»
	«ENDFOREACH»
«ENDDEFINE»

