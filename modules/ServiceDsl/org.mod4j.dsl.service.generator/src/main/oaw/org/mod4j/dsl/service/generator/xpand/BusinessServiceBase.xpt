«REM»
	  Copyright (c) 2009 Ordina and committers to Mod4j
	  All rights reserved. This program and the accompanying materials
	  are made available under the terms of the Eclipse Public License v1.0
	  which accompanies this distribution, and is available at
	  http://www.eclipse.org/legal/epl-v10.html
	 
	  Contributors:
	      Ordina - initial implementation
«ENDREM»
«IMPORT ServiceDsl»
«IMPORT crossx»

«EXTENSION org::mod4j::dsl::service::mm::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 

«DEFINE BusinessServiceBase FOR ServiceModel»
    /**
     * DO NOT MODIFY THIS FILE, CHANGES WILL BE AUTOMATICALLY OVERWRITTEN 
     *
     * Generated by Mod4j Service DSL: BusinessServiceBase::BusinessServiceBase at: «timestamp()»
     * from model «this.name»
     */
	package «getBusinessRootPackage()»;

	import java.util.List;

	«FOREACH this.uniqueBusinessClasses() AS cls -»
	import «javaDomainClassPath(cls )»;
	import «javaDomainExampleClassPath(cls )»;
	«ENDFOREACH»

	/**
	 * @author Generated by Mod4j
	 */
	public interface «javaDomainServiceBaseInterface(name)» {

	«FOREACH this.methods.typeSelect(CustomMethod) AS method»
	«REM»
	// TODO MOD4J Generate custom method «method.name»?
		/**
	     * @params «method.inParameters.name»
	     * @return «method.output.name»
	     */
	    public «(method.output == null) ? "void" : businessClass(method.output)» «method.name»(«EXPAND Parameter FOREACH method.inParameters SEPARATOR  ", "»);
    «ENDREM»
	«ENDFOREACH»	

	«EXPAND  CreateMethod  FOREACH this.uniqueMethods(MethodType::CREATE) »
	«EXPAND  ReadMethod    FOREACH this.uniqueMethods(MethodType::READ) »
	«EXPAND  UpdateMethod  FOREACH this.uniqueMethods(MethodType::UPDATE) »
	«EXPAND  DeleteMethod  FOREACH this.uniqueMethods(MethodType::DELETE) »
	«EXPAND  ListallMethod FOREACH this.uniqueMethods(MethodType::LISTALL) »
	«EXPAND  FindMethod    FOREACH this.uniqueMethods(MethodType::FIND) »

    «EXPAND Associations FOR this»
	}
«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«businessClass(type)»  «this.name»
«ENDDEFINE»

«DEFINE CreateMethod FOR SpecialMethod»
    /**
     * Create a new «dto.businessClass()».
     * 
     * @param object
     *            the «dto.businessClass()» to create.
     * @return the «dto.businessClass()» created, possibly modified during creation.
     */
    public «javaDomainClass(dto.businessClass())» create«this.dto.businessClass()»(«javaDomainClass(dto.businessClass())» object);
«ENDDEFINE»

«DEFINE ReadMethod FOR SpecialMethod»
    /**
     * Read an existing «dto.businessClass()».
     * 
     * @param object
     *            the id of the «dto.businessClass()» to read.
     * @return 
     */
    public «javaDomainClass(dto.businessClass())» read«this.dto.businessClass()»(Long id);
«ENDDEFINE»

«DEFINE UpdateMethod FOR SpecialMethod»
   /**
     * Update an existing «businessClass(this.dto)».
     * 
     * @param object
     *            the representation of the modified «businessClass(this.dto)».
     * @return the «businessClass(this.dto)» updated, possibly modified during update.
     */
    public «javaDomainClass(dto.businessClass())» update«this.dto.businessClass()»(«javaDomainClass(dto.businessClass())» object);
«ENDDEFINE»

«DEFINE DeleteMethod FOR SpecialMethod»
    /**
     * @param id
     *            the id of the «javaDomainClass(dto.businessClass())» to delete.
     */
    public void delete«dto.businessClass()»(«javaDomainClass(dto.businessClass())» object);
«ENDDEFINE»

«DEFINE ListallMethod FOR SpecialMethod»
    /**
     * Read all existing «dto.businessClass()».
     * 
     * @return List<«javaDomainClass(dto.businessClass())»>
     */
    public List<«javaDomainClass(dto.businessClass())»> listAll«this.dto.businessClass()»s();
«ENDDEFINE»

«DEFINE FindMethod FOR SpecialMethod»
«LET javaDomainClass(dto.businessClass()) AS Class»
    /**
     * Find all «Class» that look like the «dto.name».
     * 
     * @return List<«Class»>
     */
    public List<«Class»> find«Class»ByExample(«javaDomainExampleClass(dto.businessClass())» example);
«ENDLET»
«ENDDEFINE»


«DEFINE Associations FOR ServiceModel»
	«FOREACH this.methods.typeSelect(AssociationMethod) AS method»
	«LET getAssociation(method) AS assoc» 
	«LET getPropertyValue(assoc, "Multiplicity") AS mult»
    «LET ((mult == "ONE") ? "set" : "addTo") + method.rolename.toFirstUpper() AS genName»
		«IF method.type == MethodType::ADDTO»
		public void «genName»(«method.part.businessClass()» part, «method.main.businessClass()» whole) ;
		«ENDIF»
	
		«IF method.type == MethodType::REMOVEFROM»
		public void removeFrom«method.rolename.toFirstUpper()»(«method.part.businessClass()» part, «method.main.businessClass()» whole) ;
		«ENDIF»

		«IF method.type == MethodType::GETFROM»
			«IF (mult == "ONE")»
			public «method.part.businessClass()» get«method.rolename.toFirstUpper()»(«method.main.businessClass()» source) ;
			«ELSE»
			public List<«method.part.dtoBaseBusinessClass()»> get«method.rolename.toFirstUpper()»(«method.main.businessClass()» source) ;
			«ENDIF»
		«ENDIF»
	«ENDLET»
	«ENDLET»
	«ENDLET»
	«ENDFOREACH»
«ENDDEFINE»
