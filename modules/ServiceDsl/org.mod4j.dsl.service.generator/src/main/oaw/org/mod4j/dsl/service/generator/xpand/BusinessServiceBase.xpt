«REM»
	  Copyright (c) 2009 Ordina and committers to Mod4j
	  All rights reserved. This program and the accompanying materials
	  are made available under the terms of the Eclipse Public License v1.0
	  which accompanies this distribution, and is available at
	  http://www.eclipse.org/legal/epl-v10.html
	 
	  Contributors:
	      Ordina - initial implementation
«ENDREM»
«IMPORT ServiceDsl»
«IMPORT crossx»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::service::mm::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 

«DEFINE BusinessServiceBase FOR ServiceModel»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j ServiceDsl generator: BusinessServiceBase.xpt") FOR this»

	package «getBusinessRootPackage()»;

	import java.util.List;

	«FOREACH this.uniqueBusinessClasses() AS cls -»
	import «javaDomainClassPath(cls )»;
	import «javaDomainExampleClassPath(cls )»;
	«ENDFOREACH»

	/**
	 * @author Generated by Mod4j
	 */
	public interface «javaDomainServiceBaseInterface(name)» {

	«FOREACH this.methods.typeSelect(CustomMethod) AS method»
	«REM»
	// TODO MOD4J Generate custom method «method.name»?
		/**
	     * @params «method.inParameters.name»
	     * @return «method.output.name»
	     */
	    public «(method.output == null) ? "void" : businessClass(method.output)» «method.name»(«EXPAND Parameter FOREACH method.inParameters SEPARATOR  ", "»);
    «ENDREM»
	«ENDFOREACH»	

	«EXPAND  CreateMethod  FOREACH this.uniqueMethods(MethodType::CREATE) »
	«EXPAND  ReadMethod    FOREACH this.uniqueMethods(MethodType::READ) »
	«EXPAND  UpdateMethod  FOREACH this.uniqueMethods(MethodType::UPDATE) »
	«EXPAND  DeleteMethod  FOREACH this.uniqueMethods(MethodType::DELETE) »
	«EXPAND  ListallMethod FOREACH this.uniqueMethods(MethodType::LISTALL) »
	«EXPAND  FindMethod    FOREACH this.uniqueMethods(MethodType::FIND) »

    «EXPAND Associations FOR this»
	}
«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«businessClass(type)»  «this.name»
«ENDDEFINE»

«DEFINE CreateMethod FOR SpecialMethod»
    /**
     * Create a new «dto.businessClass()».
     * 
     * @param object
     *            the «dto.businessClass()» to create.
     * @return the id of the object created.
     */
    public Long create«this.dto.businessClass()»(«javaDomainClass(dto.businessClass())» object);
«ENDDEFINE»

«DEFINE ReadMethod FOR SpecialMethod»
    /**
     * Read an existing «dto.businessClass()».
     * «description»
     * @param id
     *            the id of the «dto.businessClass()» to read.
     * @return «javaDomainClass(dto.businessClass())»
     */
    public «javaDomainClass(dto.businessClass())» read«this.dto.businessClass()»(Long id);
«ENDDEFINE»

«DEFINE UpdateMethod FOR SpecialMethod»
   /**
     * Update an existing «businessClass(this.dto)».
     * «description»
     * @param object
     *            the representation of the modified «businessClass(this.dto)».
     */
    public void update«this.dto.businessClass()»(«javaDomainClass(dto.businessClass())» object);
«ENDDEFINE»

«DEFINE DeleteMethod FOR SpecialMethod»
    /**
     * Delete an «javaDomainClass(dto.businessClass())»
     * «description»
     * @param object
     *            the «javaDomainClass(dto.businessClass())» object to delete.
     */
    public void delete«dto.businessClass()»(«javaDomainClass(dto.businessClass())» object);
«ENDDEFINE»

«DEFINE ListallMethod FOR SpecialMethod»
    /**
     * Read all existing «dto.businessClass()».
     * «description» 
     * @return List<«javaDomainClass(dto.businessClass())»>
     */
    public List<«javaDomainClass(dto.businessClass())»> listAll«this.dto.businessClass()»s();

    /**
     * Reads a range (page) of existing «dto.businessClass()»s.
     * «description» 
     * 
     * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
     * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
     * 
     * @return List containing 0 or more existing «dto.businessClass()» objects.
     *
     * @see {@link #list«this.dto.businessClass()»s(int, int, String, boolean)} 
     */
    public List<«javaDomainClass(dto.businessClass())»> list«this.dto.businessClass()»s(final int firstResult, final int maxResults);
    
    /**
     * Reads a sorted range (page) of existing «dto.businessClass()»s.
     * «description» 
     * 
     * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
     * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
     * @param sortProperty - the property of the object to sort on
     * @param isAscending - should the retruned list be sorted ascending or descending? 
     * 
     * @return List containing 0 or more existing «dto.businessClass()» objects.
     *
     * @see {@link #list«this.dto.businessClass()»s(int, int, String, boolean)}
     */
    public List<«javaDomainClass(dto.businessClass())»> list«this.dto.businessClass()»s(final int firstResult, final int maxResults,
        final String sortProperty, final boolean isAscending);

    /**
     * Counts all existing «dto.businessClass()»s objects.
     * «description» 
     *
     * @return number of existing «dto.businessClass()»s objects.
     */
    public long count«this.dto.businessClass()»s();
«ENDDEFINE»

«DEFINE FindMethod FOR SpecialMethod»
«LET javaDomainClass(dto.businessClass()) AS Class»
    /**
     * Find all «Class» obejcts that look like the example object.
     * «description»
     * @param example
     *            The object to which the result objects must conform.
     * @return List<«Class»>
     */
    public List<«Class»> find«Class»ByExample(final «javaDomainExampleClass(dto.businessClass())» example);
    
    /**
     * Reads a sorted range (page) of existing «dto.businessClass()»s.
     * «description» 
     * 
     * @param example - the example object to which the result objects need to conform
     * @param firstResult - the index of the first result object to be retrieved (numbered from 0)
     * @param maxResuls - the maximum number of result objects to retrieve (or <=0 for no limit) 
     * @param sortProperty - the property of the object to sort on
     * @param isAscending - should the retruned list be sorted ascending or descending? 
     * 
     * @return List containing 0 or more existing «dto.businessClass()» objects.
     *
     * @see {@link #list«this.dto.businessClass()»s(int, int, String, boolean)}
     */
    public List<«javaDomainClass(dto.businessClass())»> find«Class»ByExampleCount(final «javaDomainExampleClass(dto.businessClass())» example,
        final int firstResult, final int maxResults, final String sortProperty, final boolean isAscending);
    
    /**
     * Counts the number of persisted «dto.businessClass()» objects in the database that
     * matches the given example object.
     * «description»
     *
     * @param example
     *                the example object to be counted
     * 
     * @return the number of persisted objects in the database.
     */     
    public long count«this.dto.businessClass()»s(final «javaDomainExampleClass(dto.businessClass())» example);
«ENDLET»
«ENDDEFINE»


«DEFINE Associations FOR ServiceModel»
	«FOREACH this.methods.typeSelect(AssociationMethod) AS method»
	«LET getAssociation(method) AS assoc» 
	«LET getPropertyValue(assoc, "Multiplicity") AS mult»
	«LET getPropertyValue(assoc, "ordered") AS ordered»
    «LET ((mult == "ONE") ? "set" : "addTo") + method.rolename.toFirstUpper() AS genName»
		«IF method.type == MethodType::ADDTO»
			/**
			 * Add a «method.part.businessClass()» to an «method.main.businessClass()» object.
			 * «method.description»
		     * @param whole
		     *            The object to which to add.
		     * @param part
		     *            The object that is added to the whole.
			 */
			public void «genName»(«method.main.businessClass()» whole, «method.part.businessClass()» part) ;
			«IF ordered == "true" »
				/**
				 * Add a «method.part.businessClass()» to an «method.main.businessClass()» object at a specific index.
				 * «method.description»
			     * @param whole
			     *            The object to which to add.
			     * @param index
			     *            The location where the part should be added.
			     * @param part
			     *            The object that is added to the whole.
				 */
				public void «genName»(«method.main.businessClass()» whole, int index, «method.part.businessClass()» part) ;
			«ENDIF»
		«ENDIF»
	
		«IF method.type == MethodType::REMOVEFROM»
		    /**
		     * Remove an «method.part.businessClass()» from an «method.main.businessClass()»
		     * «method.description»
		     * @param whole
		     *            The object from which to remove.
		     * @param part
		     *            The object that is removed from the whole.
		     */
			public void removeFrom«method.rolename.toFirstUpper()»(«method.main.businessClass()» whole, «method.part.businessClass()» part) ;
			«IF ordered == "true" »
			    /**
			     * Remove an «method.part.businessClass()» from an «method.main.businessClass()»
			     * «method.description»
			     * @param whole
			     *            The object from which to remove.
			     * @param index
			     *            The location of the object to be removed.
			     */
				public void removeFrom«method.rolename.toFirstUpper()»(«method.main.businessClass()» whole, int index) ;
			«ENDIF»
		«ENDIF»

		«IF method.type == MethodType::GETFROM»
			«IF (mult == "ONE")»
	    	    /**
	    	     * Get the «method.part.businessClass()» from an «method.main.businessClass()»
			     * «method.description»
			     * @param source
			     *            The object from which to get the «method.part.businessClass()»
			     * @return «method.part.businessClass()»
	    	     */
				public «method.part.businessClass()» get«method.rolename.toFirstUpper()»(«method.main.businessClass()» source) ;
			«ELSE»
	    	    /**
	    	     * Get the «method.part.businessClass()» from «method.main.businessClass()»
			     * «method.description»
			     * @param source
			     *            The object from which to get the «method.part.businessClass()»
			     * @return List<«method.part.businessClass()»>
	    	     */
				public List<«method.part.businessClass()»> get«method.rolename.toFirstUpper()»(«method.main.businessClass()» source) ;
			«ENDIF»
		«ENDIF»

	«ENDLET»
	«ENDLET»
	«ENDLET»
	«ENDLET»
	«ENDFOREACH»
«ENDDEFINE»
