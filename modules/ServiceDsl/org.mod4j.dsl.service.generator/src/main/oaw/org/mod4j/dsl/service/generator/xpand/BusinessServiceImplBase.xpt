«REM»
	  Copyright (c) 2009 Ordina and committers to Mod4j
	  All rights reserved. This program and the accompanying materials
	  are made available under the terms of the Eclipse Public License v1.0
	  which accompanies this distribution, and is available at
	  http://www.eclipse.org/legal/epl-v10.html
	 
	  Contributors:
	      Ordina - initial implementation
«ENDREM»
«IMPORT ServiceDsl»
«IMPORT crossx»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dsl::service::mm::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 


«DEFINE BusinessServiceImplBase FOR ServiceModel»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j ServiceDsl generator: BusinessServiceImplBase.xpt") FOR this»

	package «getBusinessRootPackage()»;

	import java.util.List;
	import java.util.ArrayList;
    import org.springframework.util.Assert;
    import org.mod4j.runtime.queries.SearchParameters;
    «REM»
        Import the business class  and dao for aech base of each BusinessClassDto. 
        Ensure that doules are removed.
    «ENDREM»	
	«FOREACH this.uniqueBusinessClasses() AS cls -»
	    import «javaDomainClassPath(cls)»;
		import «javaDaoInterfacePath(cls)»;
	«ENDFOREACH»

	/**
	 * @author Generated by Mod4j
	 */
	abstract public class «javaDomainServiceBaseClass(name)» implements «javaDomainServiceBaseInterface(name)» {

	«FOREACH this.uniqueBusinessClasses() AS cls -»
		«EXPAND FieldGetterSetter::field(javaDaoInterface(cls)) FOR javaDaoInterface(cls).toFirstLower()»    
	«ENDFOREACH»

	«EXPAND  CreateMethod  FOREACH this.uniqueMethods(MethodType::CREATE) »
	«EXPAND  ReadMethod    FOREACH this.uniqueMethods(MethodType::READ) »
	«EXPAND  UpdateMethod  FOREACH this.uniqueMethods(MethodType::UPDATE) »
	«EXPAND  DeleteMethod  FOREACH this.uniqueMethods(MethodType::DELETE) »
	«EXPAND  ListallMethod FOREACH this.uniqueMethods(MethodType::LISTALL) »
	«EXPAND  FindMethod    FOREACH this.uniqueMethods(MethodType::FIND) »

    «EXPAND  Associations FOR this»
	}
«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«businessClass(type)»  «this.name»
«ENDDEFINE»

«DEFINE CreateMethod FOR SpecialMethod»
    /**
     * {@inheritDoc} 
     */
    public Long create«this.dto.businessClass()»(«javaDomainClass(dto.businessClass())» object) {
        Assert.notNull(object, "argument [object] may not be null");
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».add(object);
    }
«ENDDEFINE»

«DEFINE ReadMethod FOR SpecialMethod»
    /**
     * {@inheritDoc} 
     */
    public «javaDomainClass(dto.businessClass())»  read«this.dto.businessClass()»(Long id){
        Assert.notNull(id, "argument [id] may not be null");
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».retrieve(id);
    }
«ENDDEFINE»

«DEFINE UpdateMethod FOR SpecialMethod»
    /**
     * {@inheritDoc} 
     */
    public void update«this.dto.businessClass()»(«javaDomainClass(dto.businessClass())» object) {
        // Nothing to do. Persistence is taken care of automatically.
    }
«ENDDEFINE»

«DEFINE DeleteMethod FOR SpecialMethod»
    /**
     * {@inheritDoc} 
     */
    public void delete«this.dto.businessClass()»(«businessClass(this.dto)» object) {
        Assert.notNull(object, "argument [object] may not be null");
        «javaDaoInterface(dto.businessClass()).toFirstLower()
        ».delete(object);
    }
«ENDDEFINE»

«DEFINE ListallMethod FOR SpecialMethod»
    /**
     * {@inheritDoc} 
     */
    public List<«javaDomainClass(dto.businessClass())»> listAll«this.dto.businessClass()»s(){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».listAll();
    }

    /**
     * {@inheritDoc} 
     */
    public List<«javaDomainClass(dto.businessClass())»> list«this.dto.businessClass()»s(final int firstResult, final int maxResults){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».listPage(firstResult, maxResults);
    }

    /**
     * {@inheritDoc} 
     */
    public List<«javaDomainClass(dto.businessClass())»> list«this.dto.businessClass()»s(final int firstResult, final int maxResults,
        final String sortProperty, final boolean isAscending){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».listPage(firstResult, maxResults, sortProperty, isAscending);
    }

    /**
     * {@inheritDoc} 
     */
    public long count«this.dto.businessClass()»s(){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».count();
    }
«ENDDEFINE»

«DEFINE FindMethod FOR SpecialMethod -»
«LET javaDomainClass(dto.businessClass()) AS Class»
    /**
     * {@inheritDoc} 
     */
    public List<«Class»> findByExample(«javaDomainClass(dto.businessClass())» example) {
        Assert.notNull(example, "argument [example] may not be null");
        return this.«javaDaoInterface(dto.businessClass()).toFirstLower()».findByExample(example);
    }

    /**
     * {@inheritDoc} 
     */
    public List<«javaDomainClass(dto.businessClass())»> findByExample(final «javaDomainClass(dto.businessClass())» example, final SearchParameters parameters){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».findByExample(example, parameters);
    }
    
    /**
     * {@inheritDoc} 
     */
    public long countByExample(final «javaDomainClass(dto.businessClass())» example){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».countByExample(example);
    }
    
    /**
     * {@inheritDoc} 
     */
    public long countByExample(final «javaDomainClass(dto.businessClass())» example,final SearchParameters parameters){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».countByExample(example, parameters);
    }
    

 «REM»Below depricated!«ENDREM»
    /**
     * {@inheritDoc} 
     */
    public List<«Class»> find«Class»ByExample(«javaDomainClass(dto.businessClass())» example) {
        Assert.notNull(example, "argument [example] may not be null");
        return this.«javaDaoInterface(dto.businessClass()).toFirstLower()».findByExample(example);
    }

    /**
     * {@inheritDoc} 
     */
    public List<«javaDomainClass(dto.businessClass())»> find«Class»ByExampleCount(final «javaDomainClass(dto.businessClass())» example, final int firstResult,
        final int maxResults, final String sortProperty, final boolean isAscending){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».listPageByExample(example, firstResult, maxResults, sortProperty, isAscending);
    }
    
    /**
     * {@inheritDoc} 
     */
    public long count«this.dto.businessClass()»s(«javaDomainClass(dto.businessClass())» example){
        return «javaDaoInterface(dto.businessClass()).toFirstLower()».count(example);
    }
«ENDLET»
«ENDDEFINE»


«DEFINE Associations FOR ServiceModel»
	«FOREACH this.methods.typeSelect(AssociationMethod) AS method»
	«LET getAssociation(method) AS assoc» 
	«LET getPropertyValue(assoc, "Multiplicity") AS mult»
	«LET getPropertyValue(assoc, "ordered") AS ordered»
    «LET ((mult == "ONE") ? "set" : "addTo") + method.rolename.toFirstUpper() AS genName»
		«REM»The addTo method«ENDREM»	
		«IF method.type == MethodType::ADDTO»
		    /**
		     * {@inheritDoc} 
		     */
			public void «genName»(«method.main.businessClass()» whole, «method.part.businessClass()» part) {
                Assert.notNull(whole, "argument [whole] may not be null");
                «IF mult != "ONE" -»
                    Assert.notNull(part, "argument [part] may not be null");
                «ENDIF -»
				whole.«genName»(part);
			}
			«IF ordered == "true" »
			    /**
			     * {@inheritDoc} 
			     */
				public void «genName»(«method.main.businessClass()» whole, int index, «method.part.businessClass()» part) {
                Assert.notNull(whole, "argument [whole] may not be null");
                    «IF mult != "ONE" -»
                        Assert.notNull(part, "argument [part] may not be null");
                    «ENDIF -»
	                whole.«genName»(index, part); 
		        }
			«ENDIF»
		«ENDIF»
	
		«REM»The removefrom method«ENDREM»	
		«IF (method.type == MethodType::REMOVEFROM) && (mult == "MANY") »
		    /**
		     * {@inheritDoc} 
		     */
			public void removeFrom«method.rolename.toFirstUpper()»(«method.main.businessClass()» whole, «method.part.businessClass()» part) {
                Assert.notNull(whole, "argument [whole] may not be null");
                Assert.notNull(part, "argument [part] may not be null");
				whole.removeFrom«method.rolename.toFirstUpper()»(part);
			}
			«IF ordered == "true" »
			    /**
			     * {@inheritDoc} 
			     */
				public void removeFrom«method.rolename.toFirstUpper()»(«method.main.businessClass()» whole, int index) {
                    Assert.notNull(whole, "argument [whole] may not be null");
					whole.removeFrom«method.rolename.toFirstUpper()»(index);
				}
			«ENDIF»
		«ENDIF»
		
		«IF method.type == MethodType::GETFROM»
			«IF (mult == "ONE")»
			    /**
			     * {@inheritDoc} 
			     */
				public «method.part.businessClass()» get«method.rolename.toFirstUpper()»(«method.main.businessClass()» source){
                    Assert.notNull(source, "argument [source] may not be null");
				    return source.get«method.rolename.toFirstUpper()»();
				}
			«ELSE»			
			    /**
			     * {@inheritDoc} 
			     */
				public List<«method.part.businessClass()»> get«method.rolename.toFirstUpper()»(«method.main.businessClass()» source){
                    Assert.notNull(source, "argument [source] may not be null");
				    return new ArrayList<«method.part.businessClass()»>( source.get«method.rolename.toFirstUpper()»() );
				}
			«ENDIF»
		«ENDIF»
		
	«ENDLET»
	«ENDLET»
	«ENDLET»
	«ENDLET»
	«ENDFOREACH»
«ENDDEFINE»