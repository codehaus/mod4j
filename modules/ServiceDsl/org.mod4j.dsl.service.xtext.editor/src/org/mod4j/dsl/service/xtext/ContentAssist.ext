/*******************************************************************************
 * Copyright (c) 2009 Ordina and committers to Mod4j
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Ordina - initial implementation
 *******************************************************************************/
import servicedsl;
import codeassist;
import emf;
import crossx;

extension org::mod4j::dsl::service::xtext::Extensions;
extension org::mod4j::dsl::service::xtext::GenContentAssist reexport;
extension org::mod4j::eclipse::xtend::EclipseUtil;
extension org::mod4j::crossx::broker::xtend::Crossx;

List[String] getRolenameProposals(emf::EObject ctx) : JAVA
    org.mod4j.dsl.service.xtext.ServiceProposals.getRolenameProposals(org.eclipse.emf.ecore.EObject);

List[String] getPartProposals(emf::EObject ctx) : JAVA
    org.mod4j.dsl.service.xtext.ServiceProposals.getPartProposals(org.eclipse.emf.ecore.EObject);

/*
 * There are two types of extensions one can define
 *
 * completeMetaType_feature(ModelElement ele, String prefix)
 * This one is called for assignments only. It gets the underlying Modelelement and the current prefix passed in.
 *
 * Note that only proposals with 'Proposal.toInsert.toLowerCase().startsWith(prefix.toLowerCase())' will be proposed in the editor
 * 
 * you can sort and/or filter the proposals by overwriting 'List[Proposal] sortProposals(List[Proposal] proposalsToSort)'
 */

/* proposals for Feature BusinessClassReference::name */
List[Proposal] completeDtoReference_name(emf::EObject ctx, String prefix) :
	findAllFromModel( ((ServiceDsl::DtoReference)ctx).modelname, "Dto").name.
	          collect(x|newProposal(x));

/* proposals for Feature EnumerationProperty::name */
List[Proposal] completeDtoReference_modelname(emf::EObject ctx, String prefix) :
	findAllModelsInProject( ctx.getProjectName()).select(e|e.dslname == "DataContractDsl").modelname.collect(x|newProposal(x)) ;

/* proposals for Feature AssociationMethod::rolename */
List[Proposal] completeAssociationMethod_rolename(emf::EObject ctx, String prefix) :
	getRolenameProposals(ctx).collect(p |  newProposal( p) );
	
/* proposals for AssociationMethod::part */
List[Proposal] completeAssociationMethod_part(emf::EObject ctx, String prefix) :
	getPartProposals(ctx).collect(p |  newProposal( p) );

/* proposals for AssociationMethod::main */
List[Proposal] completeAssociationMethod_main(emf::EObject ctx, String prefix) :
	allBusinessClassDtos(ctx, prefix);

/* proposals for SpecialMethod::dto */
List[Proposal] completeSpecialMethod_dto(emf::EObject ctx, String prefix) :
	allBusinessClassDtos(ctx, prefix);

/* proposals for CrudService::dto */
List[Proposal] completeCrudService_dto(emf::EObject ctx, String prefix) :
	allBusinessClassDtos(ctx, prefix);

List[Proposal] allBusinessClassDtos(emf::EObject ctx, String prefix) :
	ctx.allVisibleElements().typeSelect(ServiceDsl::DtoReference).
	select(dtoRef | lookupSymbol(dtoRef.modelname, dtoRef.name, "Dto").getPropertyValue("dtoType") == "BusinessClassDto" ) .
	collect(x|newProposal(x.name));

// GET RID OF DESCRIPTIONS IN THE CODE COMPLETION

/* proposals for Feature DtoReference::description */
List[Proposal] completeDtoReference_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature CrudService::description */
List[Proposal] completeCrudService_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature ServiceMethod::description */
List[Proposal] completeServiceMethod_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature SpecialMethod::description */
List[Proposal] completeSpecialMethod_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature CustomMethod::description */
List[Proposal] completeCustomMethod_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature ServiceModel::description */
List[Proposal] completeServiceModel_description(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature AssociationMethod::description */
List[Proposal] completeAssociationMethod_description(emf::EObject ctx, String prefix) :
	{};

/** Filter out all proiposals that end with Description. 
 *  This eliminates the descritions from all proposals.
 *  Also put a space at the end of all proposals
 */
List[Proposal] sortProposals(List[Proposal] proposalsToSort):
    proposalsToSort.reject(p | p.label.endsWith("Description"))
    .select(p | (! p.toInsert.endsWith(" ") ? p.setToInsert(p.toInsert + " ") : null)->true)
	;
