/*******************************************************************************
 * Copyright (c) 2008 Ordina and committers to Mod4j
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Ordina - initial implementation
 *******************************************************************************/
import ServiceDsl;
import crossx;

extension org::mod4j::crossx::broker::xtend::Crossx;
extension org::mod4j::common::xtend::NameMapper;
extension org::mod4j::dsl::service::mm::xtend::ServiceMethod;
extension org::openarchitectureware::util::stdlib::elementprops;

context DtoReference ERROR "DtoReference [" + this.name + "] not defined in model " + this.modelname:
       lookupSymbol(this.modelname, this.name, "Dto") != null;
       
context CrudService ERROR "Crud service "+ name + " can only be defined for a BusinessClassDto" :
       this.dto != null implies this.dto.dtoType() == "BusinessClassDto";

context SpecialMethod ERROR "Dto "+ dto.name + " must be a BusinessClassDto: create / read / update / delete methods can only be defined for a BusinessClassDto" :
      ((this.type == MethodType::CREATE) ||
       (this.type == MethodType::READ) ||
       (this.type == MethodType::UPDATE) ||
       (this.type == MethodType::DELETE) )
        implies
           (this.dto == null) ? true :  (dto.dtoType() == "BusinessClassDto");

context AssociationMethod ERROR "Of "+ main.name + " must be a BusinessClassDto: add / remove / get methods can only be defined for a BusinessClassDto" :
       (this.main == null) ? true :  (main.dtoType() == "BusinessClassDto");
      
context AssociationMethod ERROR "Dto "+ part.name + " must be a BusinessClassDto: add / remove / get methods can only be defined for a BusinessClassDto" :
      ((this.type == MethodType::ADDTO) ||
       (this.type == MethodType::REMOVEFROM) )
       implies
       (this.part == null) ? true :  (part.dtoType() == "BusinessClassDto");
	
context AssociationMethod ERROR this.getProperty("ERROR") :
      let mainSymbol = lookupSymbol(main.modelname, main.name, "Dto") :
      let baseClassRef = getReferenceProperty(mainSymbol, "BaseClass") :
      let class = lookupReference( baseClassRef) :
      let assoc = findAllSubSymbols(class, "Association").select(sym | sym.name == (this.rolename)) :
      if assoc.size == 0 then (
          this.setProperty("ERROR", "Reference "+ this.rolename + " must be a rolename in an association of " + main.name )->
          false
      ) else (
          let target = lookupReference( getReferenceProperty(assoc.first(), "Target") ) :
          let result = part.businessClass() :
          if target.name != result then (
              this.setProperty("ERROR", "The base business class of ["+ part.name + "] is ["+ result + "], but should be [" + target.name  + "]")->
              false
          ) else (
              true
          )
      );
