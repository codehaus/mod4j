«IMPORT ServiceDsl»
«IMPORT crossx»

«EXTENSION org::mod4j::dsl::service::generator::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 

«DEFINE LocalServiceImpl FOR ServiceModel»
	«FILE generate(javaPathFileName(getServiceRootPackage(), name + "Impl"))»
    /**
     * Generated by Mod4j Service DSL: LocalService::LocalService at: «timestamp()»
     * from model «this.name»
     */
	package «getServiceRootPackage()»;

	import java.util.List;

	«FOREACH this.dtoReferences AS dto -»
	import «getServiceRootPackage()».dto.«dto.name»Dto;
	«ENDFOREACH»
	
	/**
	 * @author Generated by Mod4j
	 */
	public class «this.name»LocalServiceImpl implements  «this.name»LocalService {

    private «this.name»DomainService the«this.name»DomainService;
    
	«FOREACH this.dtoReferences AS dto -»
	private «dto.name»Mapper the«dto.name»Mapper;
	«ENDFOREACH»

	«FOREACH this.methods.typeSelect(CustomMethod) AS method»
		/**
	     * @params «method.inParameters.name»
	     * @return «method.output.name»
	     */
	    «JavaType(method.output)» «method.name»(«EXPAND Parameter FOREACH method.inParameters SEPARATOR  ", "»);
	«ENDFOREACH»	

	«FOREACH this.methods.typeSelect(SpecialMethod) AS method»
		«IF method.type == MethodType::Create»
			«EXPAND CreateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::Read»
			«EXPAND ReadMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::Update»
			«EXPAND UpdateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::Delete»
			«EXPAND DeleteMethod FOR method»
		«ENDIF»
	«ENDFOREACH»	

	}
    «ENDFILE»
«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«JavaType(type)»  «this.name»
«ENDDEFINE»
«DEFINE CreateMethod FOR SpecialMethod»
    /**
     * (@inheritDoc)
     */
    public «JavaType(this.dto)» «this.name»(«JavaType(this.dto)» object){
        «BusinessJavaType(this.dto)» result = the«this.name»DomainService«this.name» ( the«dto.name»Mapper.fromDto(object));
        return the«dto.name»Mapper.toDto(result);
    }
«ENDDEFINE»

«DEFINE ReadMethod FOR SpecialMethod»
    /**
     * Read an existing «this.dto.name».
     * 
     * @param object
     *            the id of the «this.dto.name» to read.
     * @return 
     */
    «JavaType(this.dto)» «this.name»(Long id);
«ENDDEFINE»

«DEFINE UpdateMethod FOR SpecialMethod»
   /**
     * Update an existing «this.dto.name».
     * 
     * @param object
     *            the representation of the modified «this.dto.name».
     * @return the «this.dto.name» updated, possibly modified during update.
     */
    «JavaType(this.dto)» «this.name»(«JavaType(this.dto)» object);
«ENDDEFINE»

«DEFINE DeleteMethod FOR SpecialMethod»
    /**
     * @param id
     *            the id of the «this.dto.name» to delete.
     */
    void «this.name»(Long id);
«ENDDEFINE»
