«IMPORT ServiceDsl»
«IMPORT crossx»

«EXTENSION org::mod4j::dsl::service::mm::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 


«DEFINE BusinessServiceImpl FOR ServiceModel»
	«FILE generate(getBusinessModuleName(), javaDomainServiceClassPath(name).javaPathFileName())»
    /**
     * Generated by Mod4j Service DSL: BusinessServiceImpl::BusinessServiceImpl at: «timestamp()»
     * from model «this.name»
     */
	package «getBusinessRootPackage()»;

	import java.util.List;

	«FOREACH this.dtoReferences AS dto -»
		«IF dto.dtoType() == "BusinessClassDto" »
	    import «javaDomainClassPath(dto.businessClass())»;
		import «javaDaoInterfacePath(dto.businessClass())»;
		«ENDIF»
	«ENDFOREACH»

	/**
	 * @author Generated by Mod4j
	 */
	public class «javaDomainServiceClass(name)» implements «javaDomainServiceInterface(name)» {

	«FOREACH this.dtoReferences AS dto -»
		«IF dto.dtoType() == "BusinessClassDto" »
		    private «javaDaoInterface(dto.businessClass())» the«javaDaoInterface(dto.businessClass())»;
		    
		    /**
		     * @param object
		     *            the «javaDaoInterface(dto.businessClass())»to set
		     */
		    public void set«javaDaoInterface(dto.businessClass())»(«javaDaoInterface(dto.businessClass())» object) {
		        this.the«javaDaoInterface(dto.businessClass())» = object;
		    }
		«ENDIF»
	«ENDFOREACH»

	«FOREACH this.crudServices AS c»
	    // create crud methods for «c.dto.name»
	«ENDFOREACH»	

	«FOREACH this.methods.typeSelect(SpecialMethod) AS method»
		«IF method.type == MethodType::CREATE»
			«EXPAND CreateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::READ»
			«EXPAND ReadMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::UPDATE»
			«EXPAND UpdateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::DELETE»
			«EXPAND DeleteMethod FOR method»
		«ENDIF»
	«ENDFOREACH»	

	}
    «ENDFILE»
«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«businessClass(type)»  «this.name»
«ENDDEFINE»

«DEFINE CreateMethod FOR SpecialMethod»
    /**
     * Create a new «dto.businessClass()».
     * 
     * @param object
     *            the «dto.businessClass()» to create.
     * @return the «dto.businessClass()» created, possibly modified during creation.
     */
    public «javaDomainClass(dto.businessClass())» «this.name»(«javaDomainClass(dto.businessClass())» object) {
        return the«javaDaoInterface(dto.businessClass())».add(object);
    }
«ENDDEFINE»

«DEFINE ReadMethod FOR SpecialMethod»
    /**
     * Read an existing «dto.businessClass()».
     * 
     * @param object
     *            the id of the «dto.businessClass()» to read.
     * @return 
     */
    public «javaDomainClass(dto.businessClass())»  «this.name»(Long id){
        return the«javaDaoInterface(dto.businessClass())».retrieve(id);
    }
«ENDDEFINE»

«DEFINE UpdateMethod FOR SpecialMethod»
   /**
     * Update an existing «dto.businessClass()».
     * 
     * @param object
     *            the representation of the modified «businessClass(this.dto)».
     * @return the «businessClass(this.dto)» updated, possibly modified during update.
     */
    public «javaDomainClass(dto.businessClass())»  «this.name»(«javaDomainClass(dto.businessClass())» object) {
        return the«javaDaoInterface(dto.businessClass())».update(object);
    }
«ENDDEFINE»

«DEFINE DeleteMethod FOR SpecialMethod»
    /**
     * @param id
     *            the id of the «dto.businessClass()» to delete.
     */
    public void «this.name»(Long id){
        the«javaDaoInterface(dto.businessClass())».delete(id);
    }
«ENDDEFINE»
