«IMPORT ServiceDsl»
«IMPORT crossx»

«EXTENSION org::mod4j::dsl::service::mm::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 

«DEFINE BusinessService FOR ServiceModel»
	«FILE generate(javaPathFileName(javaDomainServiceInterfacePath(name)))»
    /**
     * Generated by Mod4j Service DSL: BusinessService::BusinessService at: «timestamp()»
     * from model «this.name»
     */
	package «getBusinessRootPackage()»;

	import java.util.List;

	«FOREACH this.dtoReferences AS dto -»
	«IF getPropertyValue( lookupSymbol(dto.modelname, dto.name, "Dto"), "dtoType" ) == "BusinessClassDto" »
	import «javaDomainClassPath(dto.businessClass() )»;
	«ENDIF»
	«ENDFOREACH»

	/**
	 * @author Generated by Mod4j
	 */
	public interface «javaDomainServiceInterface(name)» {

	«FOREACH this.crudServices AS c»
	    // create crud methods for «c.dto.name»
	«ENDFOREACH»	

	«FOREACH this.methods.typeSelect(CustomMethod) AS method»
		/**
	     * @params «method.inParameters.name»
	     * @return «method.output.name»
	     */
	    public «(method == null) ? "void" : businessClass(method.output)» «method.name»(«EXPAND Parameter FOREACH method.inParameters SEPARATOR  ", "»);
	«ENDFOREACH»	

	«FOREACH this.methods.typeSelect(SpecialMethod) AS method»
		«IF method.type == MethodType::CREATE»
			«EXPAND CreateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::READ»
			«EXPAND ReadMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::UPDATE»
			«EXPAND UpdateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::DELETE»
			«EXPAND DeleteMethod FOR method»
		«ENDIF»
	«ENDFOREACH»	

	}
    «ENDFILE»
«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«businessClass(type)»  «this.name»
«ENDDEFINE»

«DEFINE CreateMethod FOR SpecialMethod»
    /**
     * Create a new «dto.businessClass()».
     * 
     * @param object
     *            the «dto.businessClass()» to create.
     * @return the «dto.businessClass()» created, possibly modified during creation.
     */
    public «businessClass(this.dto)» «this.name»(«businessClass(this.dto)» object);
«ENDDEFINE»

«DEFINE ReadMethod FOR SpecialMethod»
    /**
     * Read an existing «dto.businessClass()».
     * 
     * @param object
     *            the id of the «dto.businessClass()» to read.
     * @return 
     */
    public «businessClass(this.dto)» «this.name»(Long id);
«ENDDEFINE»

«DEFINE UpdateMethod FOR SpecialMethod»
   /**
     * Update an existing «businessClass(this.dto)».
     * 
     * @param object
     *            the representation of the modified «businessClass(this.dto)».
     * @return the «businessClass(this.dto)» updated, possibly modified during update.
     */
    public «businessClass(this.dto)» «this.name»(«businessClass(this.dto)» object);
«ENDDEFINE»

«DEFINE DeleteMethod FOR SpecialMethod»
    /**
     * @param id
     *            the id of the «businessClass(this.dto)» to delete.
     */
    void «this.name»(Long id);
«ENDDEFINE»
