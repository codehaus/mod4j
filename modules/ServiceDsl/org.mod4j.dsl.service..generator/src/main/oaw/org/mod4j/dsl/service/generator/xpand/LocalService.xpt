«IMPORT ServiceDsl»
«IMPORT crossx»

«EXTENSION org::mod4j::dsl::service::generator::xtend::ServiceMethod»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx» 

«DEFINE LocalService FOR ServiceModel»
	«FILE generate(javaPathFileName(getServiceRootPackage(), name))»
    /**
     * Generated by Mod4j Service DSL: LocalService::LocalService at: «timestamp()»
     * from model «this.name»
     */
	package «getServiceRootPackage()»;

	import java.util.List;

	«FOREACH this.dtoReferences AS dto -»
	import «getServiceRootPackage()».dto.«dto.name»Dto;
	«ENDFOREACH»

	/**
	 * @author Generated by Mod4j
	 */
	public interface «this.name»LocalService {

	«FOREACH this.crudServices AS c»
	    // create crud methods for «c.dto.name»
	«ENDFOREACH»	

	«FOREACH this.methods.typeSelect(CustomMethod) AS method»
		/**
	     * @params «method.inParameters.name»
	     * @return «method.output.name»
	     */
	    «JavaType(method.output)» «method.name»(«EXPAND Parameter FOREACH method.inParameters SEPARATOR  ", "»);
	«ENDFOREACH»	

	«FOREACH this.methods.typeSelect(SpecialMethod) AS method»
		«IF method.type == MethodType::Create»
			«EXPAND CreateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::Read»
			«EXPAND ReadMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::Update»
			«EXPAND UpdateMethod FOR method»
		«ENDIF»
		«IF method.type == MethodType::Delete»
			«EXPAND DeleteMethod FOR method»
		«ENDIF»
	«ENDFOREACH»	

	}
    «ENDFILE»
«ENDDEFINE»

«DEFINE Parameter FOR Parameter»
«JavaType(type)»  «this.name»
«ENDDEFINE»

«DEFINE CreateMethod FOR SpecialMethod»
    /**
     * Create a new «this.dto.name».
     * 
     * @param object
     *            the «this.dto.name» to create.
     * @return the «this.dto.name» created, possibly modified during creation.
     */
    «JavaType(this.dto)» «this.name»(«JavaType(this.dto)» object);
«ENDDEFINE»

«DEFINE ReadMethod FOR SpecialMethod»
    /**
     * Read an existing «this.dto.name».
     * 
     * @param object
     *            the id of the «this.dto.name» to read.
     * @return 
     */
    «JavaType(this.dto)» «this.name»(Long id);
«ENDDEFINE»

«DEFINE UpdateMethod FOR SpecialMethod»
   /**
     * Update an existing «this.dto.name».
     * 
     * @param object
     *            the representation of the modified «this.dto.name».
     * @return the «this.dto.name» updated, possibly modified during update.
     */
    «JavaType(this.dto)» «this.name»(«JavaType(this.dto)» object);
«ENDDEFINE»

«DEFINE DeleteMethod FOR SpecialMethod»
    /**
     * @param id
     *            the id of the «this.dto.name» to delete.
     */
    void «this.name»(Long id);
«ENDDEFINE»
